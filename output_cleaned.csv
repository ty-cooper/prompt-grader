passed,diff_delta
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNTMgQEAKK2ltcG9ydCBqd3QKK2ltcG9ydCBweW15c3FsCisKKworY2xhc3MgTG9nZ2VkT3V0RXhjZXB0aW9uKEV4Y2VwdGlvbik6CisgICAgJycnUmFpc2luZyBhIExvZ2dlZE91dEV4Y2VwdGlvbiB3aWxsIHJlZGlyZWN0IHRoZSB1c2VyIHRvIHRoZSBsb2dpbiBzY3JlZW4KKyAgICBpbiB0aGUgYXBwLgorICAgICcnJworICAgIHBhc3MKKworZGVmIGFjY291bnRfbG9va3VwKGFjY291bnRfaWQsIGp3dF90b2tlbik6CisKKyAgICB0cnk6CisgICAgICAgIHRva2VuID0gand0LmRlY29kZShqd3RfdG9rZW4sICdsdUJFSyhQJHhbJVplUTRIQUQ1SmkxWio7MEdjejU4M3lQIXZ8S0NtTkVERG1RRi85UCk+R3BKSz5DeH0zO1InLCBhbGdvcml0aG09J0hTMjU2JykKKyAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CisgICAgICAgIHJhaXNlIExvZ2dlZE91dEV4Y2VwdGlvbignVXNlciBpcyBub3QgbG9nZ2VkIGluJykKKworICAgIGlmICJsb2dnZWRfaW4iIGluIHRva2VuLmtleXMoKSBhbmQgdG9rZW5bImxvZ2dlZF9pbiJdID09IFRydWU6CisgICAgICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoCisgICAgICAgICAgICBob3N0PSdteXNxbCcsCisgICAgICAgICAgICBwb3J0PTMzMDYsCisgICAgICAgICAgICB1c2VyPSdyb290JywKKyAgICAgICAgICAgIHBhc3N3ZD0nbGV0bWVpbicsCisgICAgICAgICAgICBkYj0nQmFua0FwcCcKKyAgICAgICAgKQorICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisKKyAgICAgICAgc3RhdGVtZW50ID0gIlNFTEVDVCB1c2VybmFtZSBGUk9NIHRibF91c2VyIFdIRVJFIGlkID0gIiArIGFjY291bnRfaWQgKyAiOyIKKyAgICAgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50KQorICAgICAgICB1c2VybmFtZV9yZXN1bHRzID0gY3Vyc29yLmZldGNob25lKCkKKyAgICAgICAgaWYgdXNlcm5hbWVfcmVzdWx0cyBhbmQgdXNlcm5hbWVfcmVzdWx0c1swXSAhPSB0b2tlblsidXNlcm5hbWUiXToKKyAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignWW91IGRvIG5vdCBoYXZlIGFjY2VzcycpCisKKyAgICAgICAgaWYgdXNlcm5hbWVfcmVzdWx0czoKKyAgICAgICAgICAgIHVzZXJuYW1lID0gdXNlcm5hbWVfcmVzdWx0c1swXQorCisgICAgICAgICAgICBzdGF0ZW1lbnQgPSAiU0VMRUNUIGJhbGFuY2UsIGRvYiBGUk9NIHRibF9hY2NvdW50IFdIRVJFIHVzZXJfaWQgPSAiICsgYWNjb3VudF9pZCArICI7IgorICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50KQorICAgICAgICAgICAgYWNjb3VudF9yZXN1bHRzID0gY3Vyc29yLmZldGNob25lKCkKKworICAgICAgICAgICAgY29ubi5jb21taXQoKQorICAgICAgICAgICAgY3Vyc29yLmNsb3NlKCkKKyAgICAgICAgICAgIGNvbm4uY2xvc2UoKQorCisgICAgICAgICAgICByZXR1cm4geworICAgICAgICAgICAgICAgICdiYWxhbmNlJzogYWNjb3VudF9yZXN1bHRzWzBdLAorICAgICAgICAgICAgICAgICdkb2InOiBhY2NvdW50X3Jlc3VsdHNbMV0sCisgICAgICAgICAgICAgICAgJ3VzZXJuYW1lJzogdXNlcm5hbWUKKyAgICAgICAgICAgIH0KKyAgICAgICAgZWxzZToKKyAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignQWNjb3VudCBub3QgZm91bmQnKQorICAgIGVsc2U6CisgICAgICAgIHJhaXNlIExvZ2dlZE91dEV4Y2VwdGlvbignVXNlciBpcyBub3QgbG9nZ2VkIGluJykK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjEgQEAKK2ltcG9ydCBvcworCitIQVNIX0xFTkdUSCA9IDE2CisKK2RlZiBoYXNoX21lc3NhZ2UobWVzc2FnZSk6CisgICAgaGFzaF9zdW0gPSBzdHJpbmdfdG9faW50KG1lc3NhZ2UpCisgICAgZml4ZWRfbGVuZ3RoX2hhc2ggPSBmaXhlZF9sZW5ndGgoaGFzaF9zdW0pCisgICAgcmV0dXJuIGZpeGVkX2xlbmd0aF9oYXNoCisKK2RlZiBzdHJpbmdfdG9faW50KG1lc3NhZ2UpOgorICAgIHN1bV9vZl91dGZfdmFsdWVzID0gMAorICAgIGVuY29kZWRfbWVzc2FnZSA9IG1lc3NhZ2UuZW5jb2RlKCJ1dGYtOCIpCisgICAgZm9yIGluZGV4LCB1dGZfdmFsdWUgaW4gZW51bWVyYXRlKGVuY29kZWRfbWVzc2FnZSwgMSk6CisgICAgICAgIHN1bV9vZl91dGZfdmFsdWVzICs9IHV0Zl92YWx1ZSAqICgzMSAqKiBpbmRleCkKKyAgICByZXR1cm4gc3VtX29mX3V0Zl92YWx1ZXMKKworZGVmIGZpeGVkX2xlbmd0aChoYXNoX3ZhbHVlKToKKyAgICBzdHJfaGFzaF92YWx1ZSA9IHN0cihoYXNoX3ZhbHVlKQorICAgIGZvciBpIGluIHJhbmdlKDEsIEhBU0hfTEVOR1RIICsgMSAtIGxlbihzdHJfaGFzaF92YWx1ZSkpOgorICAgICAgICBzdHJfaGFzaF92YWx1ZSArPSBzdHIoaGFzaF92YWx1ZSAlIGkpCisgICAgcmV0dXJuIHN0cl9oYXNoX3ZhbHVlWzpIQVNIX0xFTkdUSF0=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xNSw0ICsxNSw0IEBACiAKICAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0gICAgcmV0dXJuIFRydWUrICAgIHJldHVybiBUcnVlCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE5ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZCA9ICVzOyIKLSAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIG5vdCBkYXRhOgorICAgIGlmIGxlbihkYXRhKSBpcyAwOgogICAgICAgICByZXR1cm4gRmFsc2UKLQogICAgIHJldHVybiBUcnVlCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xMCw0ICsxMCw0IEBACiAgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCAocG9zdCwgdXNlcm5hbWUpKQogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQotICAgIGNvbm4uY2xvc2UoKSsgICAgY29ubi5jbG9zZSgpCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMTMgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworZGVmIGFkZF9wb3N0KHBvc3QsIHVzZXJuYW1lKToKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J1NvY2lhbE1lZGlhQXBwJykKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisKKyAgICBzdGF0ZW1lbnQgPSAiSU5TRVJUIElOVE8gcG9zdHMgVkFMVUVTICglcywlcyk7IgorCisgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCAocG9zdCwgdXNlcm5hbWUpKQorICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC00LDQgKzQsNCBAQAogICAgIHJlc3VsdCA9IHVybHBhcnNlKGhyZWYpCiAgICAgaWYgcmVzdWx0LnNjaGVtZSBpbiAoJ2h0dHAnLCAnaHR0cHMnKToKICAgICAgICAgcmV0dXJuIGhyZWYKLSAgICByZXR1cm4gIiIKKyAgICByZXR1cm4gIiI=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMTggQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworCitkZWYgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKToKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J1NvY2lhbE1lZGlhQXBwJykKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCisgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCisKKyAgICBjb25uLmNvbW1pdCgpCisgICAgY3Vyc29yLmNsb3NlKCkKKyAgICBjb25uLmNsb3NlKCkKKworICAgIGlmIGxlbihkYXRhKSBpcyAwOgorICAgICAgICByZXR1cm4gRmFsc2UKKyAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNjUgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKK2ltcG9ydCBqc29uCitpbXBvcnQgcmVxdWVzdHMKK2ltcG9ydCBqd3QKKworZGVmIGdldENvbm5lY3Rpb24oKToKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J0Vjb21tZXJjZUFwcCcpCisgICAgcmV0dXJuIGNvbm4KKworZGVmIHZpZXdQcm9kdWN0KHByb2R1Y3RJZCwgdG9rZW4pOgorICAgIG1lc3NhZ2UgPSAiIgorCisgICAgY29ubiA9IGdldENvbm5lY3Rpb24oKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgcHJvZHVjdF9pZCwgcHJvZHVjdF9uYW1lLCBkZXNjcmlwdGlvbiwgcHJpY2UsIHBpY3R1cmUgRlJPTSBwcm9kdWN0IFdIRVJFIHByb2R1Y3RfaWQgPSAlcyIsKHByb2R1Y3RJZCkpCisgICAgcHJvZHVjdCA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBpZiBwcm9kdWN0IGlzIE5vbmU6CisgICAgICAgIG1lc3NhZ2UgPSAiUHJvZHVjdCBub3QgZm91bmQhIgorCisgICAgcmVzdWx0cyA9IGxpc3QoKQorICAgIHJlc3VsdHMuYXBwZW5kKHsibWVzc2FnZSIgOiBtZXNzYWdlLCAicHJvZHVjdCI6IHByb2R1Y3R9KQorICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQorCisgICAgcmV0dXJuIHJlc3VsdHMKKworZGVmIGRlbGV0ZVByb2R1Y3QocHJvZHVjdElkLCB0b2tlbik6CisgICAgaWYgaXNBZG1pbih0b2tlbikgaXMgRmFsc2U6CisgICAgICAgIHJldHVybgorCisgICAgcmVzdWx0cyA9IGxpc3QoKQorCisgICAgY29ubiA9IGdldENvbm5lY3Rpb24oKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgcHJvZHVjdF9pZCwgcHJvZHVjdF9uYW1lLCBkZXNjcmlwdGlvbiwgcHJpY2UsIHBpY3R1cmUgRlJPTSBwcm9kdWN0IFdIRVJFIHByb2R1Y3RfaWQgPSAlcyIsIChwcm9kdWN0SWQpKQorICAgIHByb2R1Y3QgPSBjdXJzb3IuZmV0Y2hvbmUoKQorCisgICAgaWYgcHJvZHVjdCBpcyBub3QgTm9uZToKKyAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIkRFTEVURSBGUk9NIHByb2R1Y3QgV0hFUkUgcHJvZHVjdF9pZCA9ICVzIiwgKHByb2R1Y3RJZCkpCisgICAgICAgIGNvbm4uY29tbWl0KCkKKyAgICAgICAgY3Vyc29yLmNsb3NlKCkKKyAgICAgICAgbWVzc2FnZSA9ICJQcm9kdWN0IGhhcyBiZWVuIGRlbGV0ZWQhIgorICAgIGVsc2U6CisgICAgICAgIG1lc3NhZ2UgPSAiUHJvZHVjdCBub3QgZm91bmQhIgorCisgICAgcmVzdWx0cy5hcHBlbmQoeyJtZXNzYWdlIiA6IG1lc3NhZ2V9KQorCisgICAgY29ubi5jb21taXQoKQorICAgIGN1cnNvci5jbG9zZSgpCisgICAgY29ubi5jbG9zZSgpCisKKyAgICByZXR1cm4gcmVzdWx0cworCitkZWYgaXNBZG1pbih0b2tlbik6CisKKyAgICBpZiB0b2tlbjoKKyAgICAgICAgZGVjb2RlZCA9IGp3dC5kZWNvZGUodG9rZW4sICdsdUJFSyhQJHhbJVplUTRIQUQ1SmkxWio7MEdjejU4M3lQIXZ8S0NtTkVERG1RRi85UCk+R3BKSz5DeH0zO1InLCBhbGdvcml0aG09J0hTMjU2JykKKworICAgIGlmIGRlY29kZWRbImlzX2FkbWluIl0gPT0gMToKKyAgICAgICAgcmV0dXJuIFRydWUKKworICAgIHJldHVybiBGYWxzZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNyBAQAorZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHVybHBhcnNlCisKK2RlZiB2YWxpZGF0ZVVSTChocmVmKToKKyAgICByZXN1bHQgPSB1cmxwYXJzZShocmVmKQorICAgIGlmIHJlc3VsdC5zY2hlbWUgaW4gKCdodHRwJywgJ2h0dHBzJyk6CisgICAgICAgIHJldHVybiBocmVmCisgICAgcmV0dXJuICIi
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC02Miw0ICs2Miw0IEBACiAgICAgaWYgZGVjb2RlZFsiaXNfYWRtaW4iXSA9PSAxOgogICAgICAgICByZXR1cm4gVHJ1ZQogCi0gICAgcmV0dXJuIEZhbHNlKyAgICByZXR1cm4gRmFsc2UK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjMgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworZGVmIGdldF9vcmRlcnModXNlcmlkLCBhcGlrZXkpOgorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nRWNvbW1lcmNlQXBwJykKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCB1c2VyaWQsYXBpa2V5IEZST00gdXNlcnMgV0hFUkUgdXNlcmlkPSAlcyBBTkQgYXBpa2V5PSAlcyBMSU1JVCAxOyIsICh1c2VyaWQsYXBpa2V5KSkKKyAgICB1c2VyID0gY3Vyc29yLmZldGNob25lKCkKKworICAgIGRhdGEgPSBbXQorICAgIGlmIHVzZXIgaXMgbm90IE5vbmU6CisgICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQorICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIG9yZGVybmFtZSxvcmRlcmlkLHVzZXJpZCwgdG90YWwgRlJPTSBvcmRlcnMgV0hFUkUgdXNlcmlkPSAlczsgICAgIiwgKHVzZXJpZCkpCisgICAgICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQorCisgICAgICAgIGNvbm4uY29tbWl0KCkKKyAgICAgICAgY3Vyc29yLmNsb3NlKCkKKworICAgIGNvbm4uY2xvc2UoKQorICAgIHJlc3VsdHMgPSBsaXN0KCkKKyAgICByZXN1bHRzLmFwcGVuZCh7InJlc3VsdHMiOiBkYXRhfSkKKworICAgIHJldHVybiByZXN1bHRz
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNDEgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworZGVmIGdldERCQ29ubmVjdGlvbigpOgorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nU29jaWFsTWVkaWFBcHAnKQorICAgIHJldHVybiBjb25uCisKK2RlZiBhZGRVc2VyKGZvcm1fZWxlbWVudHMpOgorICAgIG1lc3NhZ2UgPSAiIgorICAgIHJlc3VsdHMgPSBsaXN0KCkKKworICAgIGNvbm4gPSBnZXREQkNvbm5lY3Rpb24oKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKKyAgICBzcWwgPSAiSU5TRVJUIElOVE8gdXNlcnMgKHVzZXJuYW1lLCBwYXNzd29yZCwgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCBlbWFpbCkgVkFMVUVTICglcywgJXMsICVzLCAlcywgJXMpOyIKKyAgICBjdXJzb3IuZXhlY3V0ZShzcWwsIChmb3JtX2VsZW1lbnRzWyJ1c2VybmFtZSJdLAorICAgICAgICBmb3JtX2VsZW1lbnRzWyJwYXNzd29yZCJdLAorICAgICAgICBmb3JtX2VsZW1lbnRzWyJmaXJzdF9uYW1lIl0sCisgICAgICAgIGZvcm1fZWxlbWVudHNbImxhc3RfbmFtZSJdLAorICAgICAgICBmb3JtX2VsZW1lbnRzWyJlbWFpbCJdKSkKKworICAgIGxhc3RJZCA9IGN1cnNvci5sYXN0cm93aWQKKyAgICBjb25uLmNvbW1pdCgpCisgICAgY3Vyc29yLmNsb3NlKCkKKworICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgdXNlcmlkLCBlbWFpbF92ZXJpZmllZCBGUk9NIHVzZXJzIFdIRVJFIHVzZXJpZCA9ICVzIiwgKGxhc3RJZCkpCisgICAgdXNlciA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBpZiB1c2VyIGlzIE5vbmU6CisgICAgICAgIHJlc3VsdHMuYXBwZW5kKHsiZXJyb3IiOiBUcnVlLCAibWVzc2FnZSI6ICJFcnJvciBvY2N1cmVkISJ9KQorICAgIGVsc2U6CisgICAgICAgIG1lc3NhZ2UgPSAiUmVnaXN0cmF0aW9uIGNvbXBsZXRlLiIKKyAgICAgICAgaWYgdXNlclsnZW1haWxfdmVyaWZpZWQnXSA9PSAwOgorICAgICAgICAgICAgbWVzc2FnZSArPSAiIFBsZWFzZSB2ZXJpZnkgeW91ciBlbWFpbC4iCisgICAgICAgIHJlc3VsdHMuYXBwZW5kKHsiZXJyb3IiOiBGYWxzZSwgIm1lc3NhZ2UiOiBtZXNzYWdlLCAidXNlcl9pZCI6IHVzZXJbJ3VzZXJpZCddLCAiZW1haWxfdmVyaWZpZWQiOiB1c2VyWydlbWFpbF92ZXJpZmllZCddfSkKKworICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQorCisgICAgcmV0dXJuIHJlc3VsdHM=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yOCw0ICsyOCw0IEBACiAgICAgCiAgICAgcmV0dXJuIHJlc3VsdHMKICAgZW5kCi1lbmQKK2VuZA==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDUgKzEsNCBAQAogaW1wb3J0IGh0bWwKIAotZGVmIGVuY29kZV9mb3JfaHRtbChlcnJvcl9tZXNzYWdlKToKLSAgICBjbGVhbl92YXIgPSBodG1sLmVzY2FwZShlcnJvcl9tZXNzYWdlKSAKLSAgICByZXR1cm4gY2xlYW5fdmFyCitkZWYgZW5jb2RlX2Zvcl9odG1sKGVycm9yX21lc3NhZ2UpOiAgICAKKyAgICByZXR1cm4gaHRtbC5lc2NhcGUoZXJyb3JfbWVzc2FnZSk=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDUgKzEsNyBAQAogZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHVybHBhcnNlCiAKLWRlZiB2YWxpZGF0ZVVSTChocmVmKTogICAgCi0gICAgdXJsID0gdXJscGFyc2UoaHJlZikKLSAgICByZXR1cm4gdXJsLnNjaGVtZQorZGVmIHZhbGlkYXRlVVJMKGhyZWYpOgorICAgIHJlc3VsdCA9IHVybHBhcnNlKGhyZWYpCisgICAgaWYgcmVzdWx0LnNjaGVtZSBpbiAoJ2h0dHAnLCAnaHR0cHMnKToKKyAgICAgICAgcmV0dXJuIGhyZWYKKyAgICByZXR1cm4gIiI=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDEyICsyLDEyIEBACiBpbXBvcnQgcHlteXNxbAogCiBkZWYgYWRkX3Bvc3QocG9zdCwgdXNlcm5hbWUpOgotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iU29jaWFsTWVkaWFBcHAiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nU29jaWFsTWVkaWFBcHAnKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAotICAgIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHBvc3RzIFZBTFVFUyAoJyIgKyBwb3N0ICsgIicsJyIgKyB1c2VybmFtZSArIicpOyIKLSAgICBjdXJzb3IuZXhlY3V0ZSgiSU5TRVJUIElOVE8gcG9zdHMgVkFMVUVTICglcywlcykiLCAocG9zdCwgdXNlcm5hbWUpKQorICAgIHN0YXRlbWVudCA9ICJJTlNFUlQgSU5UTyBwb3N0cyBWQUxVRVMgKCVzLCVzKTsiCiAKKyAgICBjdXJzb3IuZXhlY3V0ZShzdGF0ZW1lbnQsIChwb3N0LCB1c2VybmFtZSkpCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0zLDExICszLDEyIEBACiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJteXNxbCIsIHBvcnQ9MzMwNiwKLSAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI9InJvb3QiLCBwYXNzd2Q9IjEiLCBkYj0ib3dhc3AxMHNxbGkiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nbXlzcWwnLCBwb3J0PTMzMDYsCisgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyPSdyb290JywgcGFzc3dkPScxJywgZGI9J293YXNwMTBzcWxpJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIHVzZXJfaWQgRlJPTSB1c2VycyBXSEVSRSB1c2VyX25hbWUgPSAlcyBBTkQgcGFzc3dvcmQgPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgKKyAgICAgICAgIlNFTEVDVCB1c2VyX2lkIEZST00gdXNlcnMgV0hFUkUgdXNlcl9uYW1lID0gJXMgQU5EIHBhc3N3b3JkID0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCkBAIC0yNSwxMyArMjYsMTMgQEAKIAogCiBkZWYgZ2V0X3Byb2plY3RzKGlkUHJvamVjdCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJteXNxbCIsIHBvcnQ9MzMwNiwKLSAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI9InJvb3QiLCBwYXNzd2Q9IjEiLCBkYj0ib3dhc3AxMHNxbGkiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nbXlzcWwnLCBwb3J0PTMzMDYsCisgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyPSdyb290JywgcGFzc3dkPScxJywgZGI9J293YXNwMTBzcWxpJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBzdGF0ZW1lbnQgPSAiU0VMRUNUICogRlJPTSBwcm9qZWN0cyBXSEVSRSBwcm9qZWN0X2lkID0gIiArIGlkUHJvamVjdCArICI7IgorICAgIHN0YXRlbWVudCA9ICJTRUxFQ1QgKiBGUk9NIHByb2plY3RzIFdIRVJFIHByb2plY3RfaWQgPSAlczsiCiAKLSAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSBwcm9qZWN0cyBXSEVSRSBwcm9qZWN0X2lkID0gJXM7IiwgKGlkUHJvamVjdCkpCisgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCAoaWRQcm9qZWN0KSkKICAgICByZXNwb25zZSA9IGN1cnNvci5mZXRjaGFsbCgpCiAgICAgZGF0YSA9IFtdCiAgICAgZm9yIHJvdyBpbiByZXNwb25zZToK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDEzICsyLDEyIEBACiBpbXBvcnQgcHlteXNxbAogCiBkZWYgYWRkX3Bvc3QocG9zdCwgdXNlcm5hbWUpOgotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iU29jaWFsTWVkaWFBcHAiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nU29jaWFsTWVkaWFBcHAnKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAotICAgIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHBvc3RzIFZBTFVFUyAoJyIgKyBwb3N0ICsgIicsJyIgKyB1c2VybmFtZSArIicpOyIKLSAgICBjdXJzb3IuZXhlY3V0ZSgiSU5TRVJUIElOVE8gcG9zdHMgVkFMVUVTICglcywlcykiLCAocG9zdCwgdXNlcm5hbWUpKQotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5KQorICAgIHN0YXRlbWVudCA9ICJJTlNFUlQgSU5UTyBwb3N0cyBWQUxVRVMgKCVzLCVzKTsiCiAKKyAgICBjdXJzb3IuZXhlY3V0ZShzdGF0ZW1lbnQsIChwb3N0LCB1c2VybmFtZSkpCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC00LDEyICs0LDE0IEBACiAKIAogZGVmIHJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCk6Ci0gICAgc2FsdCA9IHNlY3JldHMudG9rZW5faGV4KDMyKQotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iSXNzdWVUcmFja2VyIikKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J0lzc3VlVHJhY2tlcicpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMpIgotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsIHBhc3N3b3JkK3NhbHQsIGNvbXBhbnlfaWQpKQorICAgIHNhbHQgPSBzZWNyZXRzLnRva2VuX2hleCgzMikKKyAgICBkaWdlc3QgPSBoYXNobGliLnNoYTI1NigocGFzc3dvcmQgKyBzYWx0KS5lbmNvZGUoJ2FzY2lpJykpLmhleGRpZ2VzdCgpCisKKyAgICBxdWVyeSA9ICJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIHNhbHQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoJXMsICVzLCAlcywgJXMpIgorICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsIGRpZ2VzdCwgc2FsdCwgY29tcGFueV9pZCkpCiAgICAgCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCkBAIC0xOCwxNyArMjAsMTkgQEAKICAgICByZXR1cm4gVHJ1ZQogCiBkZWYgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKToKLSAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9ImRiIiwgcG9ydD0zMzA2LCB1c2VyPSJyb290IiwgcGFzc3dkPSJsZXRtZWluIiwgZGI9Iklzc3VlVHJhY2tlciIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdJc3N1ZVRyYWNrZXInKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAotICAgIHF1ZXJ5ID0gIlNFTEVDVCBwYXNzd29yZCBGUk9NIHVzZXIgV0hFUkUgdXNlcm5hbWUgPSAlcyIKKyAgICBxdWVyeSA9ICJTRUxFQ1QgcGFzc3dvcmQsIHNhbHQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJXMiCiAgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwpKQogICAgIHJlc3VsdCA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBpZiByZXN1bHQgaXMgTm9uZToKKyAgICAgICAgcmV0dXJuIEZhbHNlCisgICAgCisgICAgZGlnZXN0ID0gaGFzaGxpYi5zaGEyNTYoKHBhc3N3b3JkICsgcmVzdWx0WzFdKS5lbmNvZGUoJ2FzY2lpJykpLmhleGRpZ2VzdCgpCiAKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgcmVzdWx0IGlzIE5vbmU6Ci0gICAgICAgIHJldHVybiBGYWxzZQotCi0gICAgcmV0dXJuIHJlc3VsdFswXSA9PSBwYXNzd29yZAorICAgIHJldHVybiByZXN1bHRbMF0gPT0gZGlnZXN0Cg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC00LDE3ICs0LDE0IEBACiAKIAogZGVmIHJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCk6Ci0gICAgc2FsdCA9IHNlY3JldHMudG9rZW5faGV4KDMyKQotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iSXNzdWVUcmFja2VyIikKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J0lzc3VlVHJhY2tlcicpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcGFzc3dvcmQgPSBwYXNzd29yZCtzYWx0CisgICAgc2FsdCA9IHNlY3JldHMudG9rZW5faGV4KDMyKQorICAgIGRpZ2VzdCA9IGhhc2hsaWIuc2hhMjU2KChwYXNzd29yZCArIHNhbHQpLmVuY29kZSgnYXNjaWknKSkuaGV4ZGlnZXN0KCkKIAotICAgIGhhc2ggPSBoYXNobGliLnNoYTI1NihwYXNzd29yZC5lbmNvZGUoJ2FzY2lpJykpCi0gICAgaGV4X2RpZ2VzdCA9IGhhc2guaGV4ZGlnZXN0KCkKLQotICAgIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHVzZXIgKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCwgc2FsdCkgVkFMVUVTICglcywgJXMsICVzLCAlcykiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwgaGV4X2RpZ2VzdCwgY29tcGFueV9pZCwgc2FsdCkpCisgICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBzYWx0LCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMsICVzKSIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCBkaWdlc3QsIHNhbHQsIGNvbXBhbnlfaWQpKQogICAgIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQpAQCAtMjMsMjIgKzIwLDE5IEBACiAgICAgcmV0dXJuIFRydWUKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJJc3N1ZVRyYWNrZXIiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nSXNzdWVUcmFja2VyJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKICAgICBxdWVyeSA9ICJTRUxFQ1QgcGFzc3dvcmQsIHNhbHQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJXMiCiAgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwpKQogICAgIHJlc3VsdCA9IGN1cnNvci5mZXRjaG9uZSgpCiAKLSAgICBwYXNzd29yZCA9IHBhc3N3b3JkK3Jlc3VsdFsxXQotCi0gICAgaGFzaCA9IGhhc2hsaWIuc2hhMjU2KHBhc3N3b3JkLmVuY29kZSgnYXNjaWknKSkKLSAgICBoZXhfZGlnZXN0ID0gaGFzaC5oZXhkaWdlc3QoKQorICAgIGlmIHJlc3VsdCBpcyBOb25lOgorICAgICAgICByZXR1cm4gRmFsc2UKKyAgICAKKyAgICBkaWdlc3QgPSBoYXNobGliLnNoYTI1NigocGFzc3dvcmQgKyByZXN1bHRbMV0pLmVuY29kZSgnYXNjaWknKSkuaGV4ZGlnZXN0KCkKIAogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiByZXN1bHQgaXMgTm9uZToKLSAgICAgICAgcmV0dXJuIEZhbHNlCi0KLSAgICByZXR1cm4gcmVzdWx0WzBdID09IGhleF9kaWdlc3QKKyAgICByZXR1cm4gcmVzdWx0WzBdID09IGRpZ2VzdAo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC00LDEyICs0LDE0IEBACiAKIAogZGVmIHJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCk6Ci0gICAgc2FsdCA9IHNlY3JldHMudG9rZW5faGV4KDMyKQotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iSXNzdWVUcmFja2VyIikKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J0lzc3VlVHJhY2tlcicpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMpIgotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKSkKKyAgICBzYWx0ID0gc2VjcmV0cy50b2tlbl9oZXgoMzIpCisgICAgZGlnZXN0ID0gaGFzaGxpYi5zaGEyNTYoKHBhc3N3b3JkICsgc2FsdCkuZW5jb2RlKCdhc2NpaScpKS5oZXhkaWdlc3QoKQorCisgICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBzYWx0LCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMsICVzKSIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCBkaWdlc3QsIHNhbHQsIGNvbXBhbnlfaWQpKQogICAgIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQpAQCAtMTgsMTcgKzIwLDE5IEBACiAgICAgcmV0dXJuIFRydWUKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJJc3N1ZVRyYWNrZXIiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nSXNzdWVUcmFja2VyJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBxdWVyeSA9ICJTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJXMiCisgICAgcXVlcnkgPSAiU0VMRUNUIHBhc3N3b3JkLCBzYWx0IEZST00gdXNlciBXSEVSRSB1c2VybmFtZSA9ICVzIgogICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsKSkKICAgICByZXN1bHQgPSBjdXJzb3IuZmV0Y2hvbmUoKQorCisgICAgaWYgcmVzdWx0IGlzIE5vbmU6CisgICAgICAgIHJldHVybiBGYWxzZQorICAgIAorICAgIGRpZ2VzdCA9IGhhc2hsaWIuc2hhMjU2KChwYXNzd29yZCArIHJlc3VsdFsxXSkuZW5jb2RlKCdhc2NpaScpKS5oZXhkaWdlc3QoKQogCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIHJlc3VsdCBpcyBOb25lOgotICAgICAgICByZXR1cm4gRmFsc2UKLQotICAgIHJldHVybiByZXN1bHRbMF0gPT0gcGFzc3dvcmQKKyAgICByZXR1cm4gcmVzdWx0WzBdID09IGRpZ2VzdAo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNyBAQAorbW9kdWxlIFNhbmRib3gKKworICBkZWYgc2VsZi5jcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpCisgICAgRmlsZS5vcGVuKCd0bXAvJyArIHVzZXJuYW1lICsgJy8nICsgZmlsZW5hbWUsICJ3IikKKyAgZW5kCisKK2VuZAo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDUgKzEsNSBAQAogaW1wb3J0IG9zLCBzdWJwcm9jZXNzCiAKIGRlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgotICAgIGZpbGUgPSBvcGVuKCJ0b3VjaCB0bXAvIiArIHVzZXJuYW1lICsgIi8iICsgZmlsZW5hbWUsICJ3IikKKyAgICBmaWxlID0gb3BlbigidG1wLyIgKyB1c2VybmFtZSArICIvIiArIGZpbGVuYW1lLCAidyIpCiAgICAgZmlsZS5jbG9zZSgpCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDcgKzEsNyBAQAogbW9kdWxlIFNhbmRib3gKIAogICBkZWYgc2VsZi5jcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpCi0gICAgRmlsZS5vcGVuKCd0b3VjaCB0bXAvJyArIHVzZXJuYW1lICsgJy8nICsgZmlsZW5hbWUsICJ3IikKKyAgICBGaWxlLm9wZW4oJ3RtcC8nICsgdXNlcm5hbWUgKyAnLycgKyBmaWxlbmFtZSwgInciKQogICBlbmQKIAogZW5kCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQgPSAlcyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKICAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgbm90IGRhdGE6CisgICAgaWYgbGVuKGRhdGEpIGlzIDA6CiAgICAgICAgIHJldHVybiBGYWxzZQotCiAgICAgcmV0dXJuIFRydWUK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcmFtZSA9ICVzIEFORCBwYXNzd29yZCA9ICVzIiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiBub3QgZGF0YToKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0KICAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDcgKzEsNyBAQAogbW9kdWxlIFNhbmRib3gKIAogICBkZWYgc2VsZi5jcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpCi0gICAgRmlsZS5vcGVuKCd0bXAvJyArIHVzZXJuYW1lICsgJy8nICsgZmlsZW5hbWUpCisgICAgRmlsZS5vcGVuKCd0bXAvJyArIHVzZXJuYW1lICsgJy8nICsgZmlsZW5hbWUsICJ3IikKICAgZW5kCiAKIGVuZAo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDI1ICsyLDE5IEBACiAKIAogZGVmIGFjY291bnRfbG9va3VwKHNlc3Npb24pOgorICAgIGlmIG5vdCBhdXRob3JpemUoc2Vzc2lvbik6CisgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigiQWNjZXNzIERlbmllZCIpCiAgICAgdXNlcl9pZCA9IHNlc3Npb25bInVzZXJfaWQiXQotICAgIGlmICFhdXRob3JpemUodXNlcl9pZCk6Ci0gICAgICAgIHJhaXNlIEV4Y2VwdGlvbigiQWNjZXNzIERlbmllZCIpCiAgICAgcmV0dXJuIGdldF9hY2NvdW50KHVzZXJfaWQpCiAKIAotIyAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSMgCi0jICBEb24ndCB0b3VjaCBhbnl0aGluZyBiZWxvdyB0aGlzIGxpbmUKLSMgIFV0aWxpdHkgZnVuY3Rpb25zIGJlbG93Ci0jIAotIyAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLQorIyBVdGlsaXR5IGZ1bmN0aW9ucyBiZWxvdywgbm8gbmVlZCB0byBtb2RpZnkKIGRiID0gcHlteXNxbC5jb25uZWN0KAotICAgIGhvc3Q9Im15c3FsIiwKKyAgICBob3N0PSdteXNxbCcsCiAgICAgcG9ydD0zMzA2LAotICAgIHVzZXI9InJvb3QiLAotICAgIHBhc3N3ZD0ibGV0bWVpbiIsCi0gICAgZGI9IkJhbmtBcHAiCisgICAgdXNlcj0ncm9vdCcsCisgICAgcGFzc3dkPSdsZXRtZWluJywKKyAgICBkYj0nQmFua0FwcCcKICkKIAogCkBAIC0zNyw5ICszMSw5IEBACiAgICAgICAgIHJldHVybiBGYWxzZQogCiAgICAgcmV0dXJuIHsKLSAgICAgICAgImJhbGFuY2UiOiBkYXRhWzBdLAotICAgICAgICAiZG9iIjogZGF0YVsxXSwKLSAgICAgICAgInVzZXJuYW1lIjogZ2V0X3VzZXIodXNlcl9pZClbMF0KKyAgICAgICAgJ2JhbGFuY2UnOiBkYXRhWzBdLAorICAgICAgICAnZG9iJzogZGF0YVsxXSwKKyAgICAgICAgJ3VzZXJuYW1lJzogZ2V0X3VzZXIodXNlcl9pZClbMF0KICAgICB9CiAKIApAQCAtODgsOCArODIsOCBAQAogICAgIHVzZXJfaWQgPSBzZXNzaW9uWyJ1c2VyX2lkIl0KICAgICBkZWNvZGVkX2p3dCA9IHNlc3Npb25bImRlY29kZWRfand0Il0KIAotICAgIHVzZXJuYW1lID0gZGVjb2RlZF9qd3RbInVzZXJuYW1lIl0KLSAgICByb2xlID0gZGVjb2RlZF9qd3RbInJvbGUiXQorICAgIHVzZXJuYW1lID0gZGVjb2RlZF9qd3RbJ3VzZXJuYW1lJ10KKyAgICByb2xlID0gZGVjb2RlZF9qd3RbJ3JvbGUnXQogCiAgICAgY3VycmVudF91c2Vyc19pZCA9IGdldF91c2VyX2lkKHVzZXJuYW1lKQogCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDI1ICsyLDE5IEBACiAKIAogZGVmIGFjY291bnRfbG9va3VwKHNlc3Npb24pOgorICAgIGlmIG5vdCBhdXRob3JpemUoc2Vzc2lvbik6CisgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigiQWNjZXNzIERlbmllZCIpCiAgICAgdXNlcl9pZCA9IHNlc3Npb25bInVzZXJfaWQiXQotICAgIGlmICFhdXRob3JpemUodXNlcl9pZCkKLSAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJBY2Nlc3MgRGVuaWVkIikKICAgICByZXR1cm4gZ2V0X2FjY291bnQodXNlcl9pZCkKIAogCi0jICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotIyAKLSMgIERvbid0IHRvdWNoIGFueXRoaW5nIGJlbG93IHRoaXMgbGluZQotIyAgVXRpbGl0eSBmdW5jdGlvbnMgYmVsb3cKLSMgCi0jICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotCisjIFV0aWxpdHkgZnVuY3Rpb25zIGJlbG93LCBubyBuZWVkIHRvIG1vZGlmeQogZGIgPSBweW15c3FsLmNvbm5lY3QoCi0gICAgaG9zdD0ibXlzcWwiLAorICAgIGhvc3Q9J215c3FsJywKICAgICBwb3J0PTMzMDYsCi0gICAgdXNlcj0icm9vdCIsCi0gICAgcGFzc3dkPSJsZXRtZWluIiwKLSAgICBkYj0iQmFua0FwcCIKKyAgICB1c2VyPSdyb290JywKKyAgICBwYXNzd2Q9J2xldG1laW4nLAorICAgIGRiPSdCYW5rQXBwJwogKQogCiAKQEAgLTM3LDkgKzMxLDkgQEAKICAgICAgICAgcmV0dXJuIEZhbHNlCiAKICAgICByZXR1cm4gewotICAgICAgICAiYmFsYW5jZSI6IGRhdGFbMF0sCi0gICAgICAgICJkb2IiOiBkYXRhWzFdLAotICAgICAgICAidXNlcm5hbWUiOiBnZXRfdXNlcih1c2VyX2lkKVswXQorICAgICAgICAnYmFsYW5jZSc6IGRhdGFbMF0sCisgICAgICAgICdkb2InOiBkYXRhWzFdLAorICAgICAgICAndXNlcm5hbWUnOiBnZXRfdXNlcih1c2VyX2lkKVswXQogICAgIH0KIAogCkBAIC04OCw4ICs4Miw4IEBACiAgICAgdXNlcl9pZCA9IHNlc3Npb25bInVzZXJfaWQiXQogICAgIGRlY29kZWRfand0ID0gc2Vzc2lvblsiZGVjb2RlZF9qd3QiXQogCi0gICAgdXNlcm5hbWUgPSBkZWNvZGVkX2p3dFsidXNlcm5hbWUiXQotICAgIHJvbGUgPSBkZWNvZGVkX2p3dFsicm9sZSJdCisgICAgdXNlcm5hbWUgPSBkZWNvZGVkX2p3dFsndXNlcm5hbWUnXQorICAgIHJvbGUgPSBkZWNvZGVkX2p3dFsncm9sZSddCiAKICAgICBjdXJyZW50X3VzZXJzX2lkID0gZ2V0X3VzZXJfaWQodXNlcm5hbWUpCiAK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0zLDE0ICszLDExIEBACiAKIAogZGVmIHJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJJc3N1ZVRyYWNrZXIiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nSXNzdWVUcmFja2VyJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBoYXNoID0gaGFzaGxpYi5zaGEyNTYocGFzc3dvcmQuZW5jb2RlKCdhc2NpaScpKQotICAgIGhleF9kaWdlc3QgPSBoYXNoLmhleGRpZ2VzdCgpCi0KICAgICBxdWVyeSA9ICJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoJXMsICVzLCAlcykiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwgaGV4X2RpZ2VzdCwgY29tcGFueV9pZCkpCisgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwgZ2V0X2hhc2hlZF9wYXNzd29yZChwYXNzd29yZCksIGNvbXBhbnlfaWQpKQogICAgIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQpAQCAtMTksMTEgKzE2LDggQEAKICAgICByZXR1cm4gVHJ1ZQogCiBkZWYgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKToKLSAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9ImRiIiwgcG9ydD0zMzA2LCB1c2VyPSJyb290IiwgcGFzc3dkPSJsZXRtZWluIiwgZGI9Iklzc3VlVHJhY2tlciIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdJc3N1ZVRyYWNrZXInKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKLQotICAgIGhhc2ggPSBoYXNobGliLnNoYTI1NihwYXNzd29yZC5lbmNvZGUoJ2FzY2lpJykpCi0gICAgaGV4X2RpZ2VzdCA9IGhhc2guaGV4ZGlnZXN0KCkKIAogICAgIHF1ZXJ5ID0gIlNFTEVDVCBwYXNzd29yZCBGUk9NIHVzZXIgV0hFUkUgdXNlcm5hbWUgPSAlcyIKICAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCkpCkBAIC0zNSw0ICsyOSw5IEBACiAgICAgaWYgcmVzdWx0IGlzIE5vbmU6CiAgICAgICAgIHJldHVybiBGYWxzZQogCi0gICAgcmV0dXJuIHJlc3VsdFswXSA9PSBoZXhfZGlnZXN0CisgICAgcmV0dXJuIHJlc3VsdFswXSA9PSBnZXRfaGFzaGVkX3Bhc3N3b3JkKHBhc3N3b3JkKQorCitkZWYgZ2V0X2hhc2hlZF9wYXNzd29yZChwYXNzd29yZCk6CisgICAgaGFzaCA9IGhhc2hsaWIuc2hhMjU2KHBhc3N3b3JkLmVuY29kZSgnYXNjaWknKSkKKyAgICBoZXhfZGlnZXN0ID0gaGFzaC5oZXhkaWdlc3QoKQorICAgIHJldHVybiBoZXhfZGlnZXN0Cg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcHMgPSBjbGllbnQucHJlcGFyZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8gQU5EIHBhc3N3b3JkID0gPyIpCi0gICAgZGF0YSA9IHBzLmV4ZWN1dGUodXNlcm5hbWUsIHBhc3N3b3JkKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgbm90IGRhdGE6CisgICAgaWYgbGVuKGRhdGEpIGlzIDA6CiAgICAgICAgIHJldHVybiBGYWxzZQotCiAgICAgcmV0dXJuIFRydWUK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQgPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIG5vdCBkYXRhOgorICAgIGlmIGxlbihkYXRhKSBpcyAwOgogICAgICAgICByZXR1cm4gRmFsc2UKLQogICAgIHJldHVybiBUcnVlCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE5ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQgPSAlcyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKICAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgbm90IGRhdGE6CisgICAgaWYgbGVuKGRhdGEpIGlzIDA6CiAgICAgICAgIHJldHVybiBGYWxzZQotCiAgICAgcmV0dXJuIFRydWUKLQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQotICAgIAotICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gICVzIEFORCBwYXNzd29yZCA9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQorCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiBub3QgZGF0YToKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0KICAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC05LDEwICs5LDEwIEBACiAgICAgICA6ZGF0YWJhc2UgPT4gJ1NvY2lhbE1lZGlhQXBwJwogICAgICkKIAotICAgIHJlc3VsdHMgPSBjbGllbnQucXVlcnkoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQ9JyIrIHBhc3N3b3JkICsgIic7IikKLSAgICBwdXRzICJ0aGlzIHNob3VsZCBmYWlsIgorICAgIHJzID0gY2xpZW50LnByZXBhcmUgIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSA/IEFORCBwYXNzd29yZCA9ID8gOyIKKyAgICByZXMgPSBycy5leGVjdXRlKHVzZXJuYW1lLCBwYXNzd29yZCwgOmFzID0+IDphcnJheSkKIAotICAgIGlmIHJlc3VsdHMuY291bnQgPT0gMAorICAgIGlmIHJlcy50b19hLmxlbmd0aCA9PSAwCiAgICAgICByZXR1cm4gZmFsc2UKICAgICBlbHNlCiAgICAgICByZXR1cm4gdHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC05LDEwICs5LDEwIEBACiAgICAgICA6ZGF0YWJhc2UgPT4gJ1NvY2lhbE1lZGlhQXBwJwogICAgICkKIAotICAgIHJlc3VsdHMgPSBjbGllbnQucXVlcnkoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQ9JyIrIHBhc3N3b3JkICsgIic7IikKLSAgICBwdXRzICJ0aGlzIHNob3VsZCBmYWlsdWgiCisgICAgcnMgPSBjbGllbnQucHJlcGFyZSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8gQU5EIHBhc3N3b3JkID0gPyA7IgorICAgIHJlcyA9IHJzLmV4ZWN1dGUodXNlcm5hbWUsIHBhc3N3b3JkLCA6YXMgPT4gOmFycmF5KQogCi0gICAgaWYgcmVzdWx0cy5jb3VudCA9PSAwCisgICAgaWYgcmVzLnRvX2EubGVuZ3RoID09IDAKICAgICAgIHJldHVybiBmYWxzZQogICAgIGVsc2UKICAgICAgIHJldHVybiB0cnVlCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNTMgQEAKK3BhY2thZ2UgZGVtbzsKKworaW1wb3J0IGNvbS5nb29nbGUuZ3Nvbi5Hc29uOworaW1wb3J0IGNvbS5nb29nbGUuZ3Nvbi5hbm5vdGF0aW9ucy5TZXJpYWxpemVkTmFtZTsKK2ltcG9ydCBvcmcuanNvbi5zaW1wbGUuSlNPTk9iamVjdDsKKworaW1wb3J0IHN0YXRpYyBkZW1vLkRiLio7CisKK3B1YmxpYyBjbGFzcyBFeHRlcm5hbCB7CisgICAgcHVibGljIHN0YXRpYyBTdHJpbmcgaGFuZGxlUG9zdChTdHJpbmcgcmVxdWVzdCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisgICAgICAgIEdzb24gZ3NvbiA9IG5ldyBHc29uKCk7CisKKyAgICAgICAgUmVzZXJ2YXRpb24gcmVzZXJ2YXRpb24gPSBnc29uLmZyb21Kc29uKHJlcXVlc3QsIFJlc2VydmF0aW9uLmNsYXNzKTsKKworICAgICAgICBSZXNlcnZhdGlvbiBmaWx0ZXJlZCA9IG5ldyBSZXNlcnZhdGlvbigpOworICAgICAgICBmaWx0ZXJlZC5lbWFpbCA9IHJlc2VydmF0aW9uLmVtYWlsOworICAgICAgICBmaWx0ZXJlZC5jaGVja2luID0gcmVzZXJ2YXRpb24uY2hlY2tpbjsKKyAgICAgICAgZmlsdGVyZWQuY2hlY2tvdXQgPSByZXNlcnZhdGlvbi5jaGVja291dDsKKworICAgICAgICBpbnQgaW5zZXJ0ZWRJZCA9IGluc2VydFJlc2VydmF0aW9uKGZpbHRlcmVkKTsKKyAgICAgICAgUmVzZXJ2YXRpb24gc2F2ZWQgPSBnZXRSZXNlcnZhdGlvbihpbnNlcnRlZElkKTsKKworICAgICAgICBKU09OT2JqZWN0IGZpbHRlcmVkU2F2ZWQgPSBuZXcgSlNPTk9iamVjdCgpOworICAgICAgICBmaWx0ZXJlZFNhdmVkLnB1dCgiY29uZmlybWF0aW9uIiwgc2F2ZWQuY29uZmlybWF0aW9uKTsKKworICAgICAgICByZXR1cm4gZmlsdGVyZWRTYXZlZC50b1N0cmluZygpOworICAgIH0KKworICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgUmVzZXJ2YXRpb24geworICAgICAgICBwdWJsaWMgaW50IGlkOworICAgICAgICBwdWJsaWMgU3RyaW5nIGVtYWlsOworICAgICAgICBwdWJsaWMgU3RyaW5nIGNoZWNraW47CisgICAgICAgIHB1YmxpYyBTdHJpbmcgY2hlY2tvdXQ7CisgICAgICAgIHB1YmxpYyBkb3VibGUgcmF0ZTsKKyAgICAgICAgcHVibGljIGRvdWJsZSB0b3RhbDsKKyAgICAgICAgcHVibGljIFN0cmluZyBjb25maXJtYXRpb247CisgICAgICAgIEBTZXJpYWxpemVkTmFtZSgicmVzZXJ2YXRpb25fc3RhdHVzIikKKyAgICAgICAgcHVibGljIFN0cmluZyByZXNlcnZhdGlvblN0YXR1czsKKworICAgICAgICBwdWJsaWMgUmVzZXJ2YXRpb24oKSB7fQorCisgICAgICAgIHB1YmxpYyBSZXNlcnZhdGlvbihpbnQgaWQsIFN0cmluZyBlbWFpbCwgU3RyaW5nIGNoZWNraW4sIFN0cmluZyBjaGVja291dCwgZG91YmxlIHJhdGUsIGRvdWJsZSB0b3RhbCwgU3RyaW5nIGNvbmZpcm1hdGlvbiwgU3RyaW5nIHJlc2VydmF0aW9uU3RhdHVzKSB7CisgICAgICAgICAgICB0aGlzLmlkID0gaWQ7CisgICAgICAgICAgICB0aGlzLmVtYWlsID0gZW1haWw7CisgICAgICAgICAgICB0aGlzLmNoZWNraW4gPSBjaGVja2luOworICAgICAgICAgICAgdGhpcy5jaGVja291dCA9IGNoZWNrb3V0OworICAgICAgICAgICAgdGhpcy5yYXRlID0gcmF0ZTsKKyAgICAgICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDsKKyAgICAgICAgICAgIHRoaXMuY29uZmlybWF0aW9uID0gY29uZmlybWF0aW9uOworICAgICAgICAgICAgdGhpcy5yZXNlcnZhdGlvblN0YXR1cyA9IHJlc2VydmF0aW9uU3RhdHVzOworICAgICAgICB9CisgICAgfQorfQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMzYgQEAKK2NvbnN0IG15c3FsID0gcmVxdWlyZSgnbXlzcWwyL3Byb21pc2UnKTsKKworZXhwb3J0cy5yZXNldCA9IGFzeW5jIGZ1bmN0aW9uIChib2R5KSB7CisgICAgY29uc3QgdXNlcm5hbWUgPSBib2R5LnVzZXJuYW1lOworICAgIGNvbnN0IHBhc3N3b3JkID0gYm9keS5wYXNzd29yZDsKKyAgICBjb25zdCBuZXdfcGFzc3dvcmQgPSBib2R5Lm5ld19wYXNzd29yZDsKKworICAgIGlmICghdXNlcm5hbWUgfHwgIXBhc3N3b3JkIHx8ICFuZXdfcGFzc3dvcmQpIHsKKyAgICAgICAgcmV0dXJuIDQwMDsKKyAgICB9CisKKyAgICBjb25zdCBjb25uID0gYXdhaXQgbXlzcWwuY3JlYXRlQ29ubmVjdGlvbih7CisgICAgICAgIGhvc3Q6ICdkYicsCisgICAgICAgIHVzZXI6ICdyb290JywKKyAgICAgICAgcG9ydDogMzMwNiwKKyAgICAgICAgcGFzc3dvcmQ6ICdsZXRtZWluJywKKyAgICAgICAgZGF0YWJhc2U6ICdCYW5rQXBwJywKKyAgICB9KTsKKworICAgIGxldCBxdWVyeSA9ICdTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8nOworICAgIGNvbnN0IFtwYXNzd29yZFJlc3VsdF0gPSBhd2FpdCBjb25uLnF1ZXJ5KHF1ZXJ5LCBbdXNlcm5hbWVdKTsKKyAgICBpZiAocGFzc3dvcmRSZXN1bHQubGVuZ3RoID09PSAwIHx8IHBhc3N3b3JkUmVzdWx0WzBdLnBhc3N3b3JkICE9PSBwYXNzd29yZCkgeworICAgICAgICBjb25uLmVuZCgpOworICAgICAgICByZXR1cm4gNDAxOworICAgIH0KKworICAgIHF1ZXJ5ID0gJ1VQREFURSB1c2VycyBTRVQgcGFzc3dvcmQgPSA/IFdIRVJFIHVzZXJuYW1lID0gPyc7CisgICAgY29uc3QgW3VwZGF0ZVJlc3VsdF0gPSBhd2FpdCBjb25uLnF1ZXJ5KHF1ZXJ5LCBbbmV3X3Bhc3N3b3JkLCB1c2VybmFtZV0pOworICAgIGNvbm4uZW5kKCk7CisKKyAgICBpZiAodXBkYXRlUmVzdWx0LmFmZmVjdGVkUm93cyA+IDApIHsKKyAgICAgICAgcmV0dXJuIDIwMDsKKyAgICB9IGVsc2UgeworICAgICAgICByZXR1cm4gNTAwOworICAgIH0KK30=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xNCw4ICsxNCw4IEBACiAgICAgbXkgJGNvbXBhbnlfaWQgPSAkX1syXTsKICAgICAKICAgICBteSAkYnVmZmVyID0gbWFrZXJhbmRvbShTaXplID0+IDEyOCwgU3RyZW5ndGggPT4gMSk7Ci0gICAgbXkgJHNhbHQgPSBNYXRoOjpCaWdJbnQtPm5ldygiJGJ1ZmZlciIpLT50b19oZXgoKTsKLSAgICBteSAkaGFzaCA9IGFyZ29uMmlkX3Bhc3MoJHBhc3N3b3JkLCAiYWJjYWJjYWJjYWJjYWJjYSIsIDMsICc2NE0nLCA0LCAxNik7CisgICAgbXkgJHNhbHQgPSBNYXRoOjpCaWdJbnQtPnRvX2hleCgkYnVmZmVyKTsKKyAgICBteSAkaGFzaCA9IGFyZ29uMmlkX3Bhc3MoJHBhc3N3b3JkLCAkc2FsdCwgMywgJzY0TScsIDQsIDE2KTsKIAogICAgICRjb25uID0gREJJLT5jb25uZWN0KCJEQkk6bXlzcWw6ZGF0YWJhc2U9SXNzdWVUcmFja2VyO2hvc3Q9ZGIiLCAicm9vdCIsICJsZXRtZWluIiwgeydSYWlzZUVycm9yJyA9PiAxfSk7CiAgICAgbXkgJHN0aCA9ICRjb25uLT5wcmVwYXJlKCJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoPywgPywgPykiKTsK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNTEgQEAKKyMhL3Vzci9iaW4vcGVybAorCitwYWNrYWdlIEV4dGVybmFsOworCit1c2Ugd2FybmluZ3M7Cit1c2UgREJJOwordXNlIENyeXB0OjpBcmdvbjIgcXcvYXJnb24yaWRfcGFzcyBhcmdvbjJpZF92ZXJpZnkvOwordXNlIENyeXB0OjpSYW5kb20gcXcobWFrZXJhbmRvbSk7IAordXNlIE1hdGg6OkJpZ0ludDsKKworc3ViIHJlZ2lzdGVyIHsKKyAgICBteSAkdXNlcm5hbWUgPSAkX1swXTsKKyAgICBteSAkcGFzc3dvcmQgPSAkX1sxXTsKKyAgICBteSAkY29tcGFueV9pZCA9ICRfWzJdOworICAgIAorICAgIG15ICRidWZmZXIgPSBtYWtlcmFuZG9tKFNpemUgPT4gMTI4LCBTdHJlbmd0aCA9PiAxKTsKKyAgICBteSAkc2FsdCA9IE1hdGg6OkJpZ0ludC0+dG9faGV4KCRidWZmZXIpOworICAgIG15ICRoYXNoID0gYXJnb24yaWRfcGFzcygkcGFzc3dvcmQsICRzYWx0LCAzLCAnNjRNJywgNCwgMTYpOworCisgICAgJGNvbm4gPSBEQkktPmNvbm5lY3QoIkRCSTpteXNxbDpkYXRhYmFzZT1Jc3N1ZVRyYWNrZXI7aG9zdD1kYiIsICJyb290IiwgImxldG1laW4iLCB7J1JhaXNlRXJyb3InID0+IDF9KTsKKyAgICBteSAkc3RoID0gJGNvbm4tPnByZXBhcmUoIklOU0VSVCBJTlRPIHVzZXIgKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCkgVkFMVUVTICg/LCA/LCA/KSIpOworICAgICRzdGgtPmV4ZWN1dGUoJHVzZXJuYW1lLCAkaGFzaCwgJGNvbXBhbnlfaWQpOworCisgICAgJHN0aC0+ZmluaXNoKCk7CisgICAgJGNvbm4tPmRpc2Nvbm5lY3QoKTsKKworICAgIHJldHVybiBcMTsKK30KKworc3ViIGxvZ2luIHsKKyAgICBteSAkdXNlcm5hbWUgPSAkX1swXTsKKyAgICBteSAkcGFzc3dvcmQgPSAkX1sxXTsKKworICAgICRjb25uID0gREJJLT5jb25uZWN0KCJEQkk6bXlzcWw6ZGF0YWJhc2U9SXNzdWVUcmFja2VyO2hvc3Q9ZGIiLCAicm9vdCIsICJsZXRtZWluIiwgeydSYWlzZUVycm9yJyA9PiAxfSk7CisgICAgbXkgJHN0aCA9ICRjb25uLT5wcmVwYXJlKCJTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gPyIpOworICAgICRzdGgtPmV4ZWN1dGUoJHVzZXJuYW1lKTsKKyAgICAkbnVtX3Jvd3MgPSAkc3RoLT5yb3dzOworCisgICAgaWYgKCRudW1fcm93cyA9PSAwKSB7CisgICAgICAgIHJldHVybiBcMDsKKyAgICB9CisKKyAgICBteSgkaGFzaCkgPSAkc3RoLT5mZXRjaHJvd19hcnJheSgpOworICAgICRzdGgtPmZpbmlzaCgpOworICAgICRjb25uLT5kaXNjb25uZWN0KCk7CisKKyAgICBteSAkbWF0Y2ggPSBhcmdvbjJpZF92ZXJpZnkoJGhhc2gsICRwYXNzd29yZCk7CisKKyAgICByZXR1cm4gJG1hdGNoOworfQorMTsK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xNCw3ICsxNCw3IEBACiAgICAgbXkgJGNvbXBhbnlfaWQgPSAkX1syXTsKICAgICAKICAgICBteSAkYnVmZmVyID0gbWFrZXJhbmRvbShTaXplID0+IDEyOCwgU3RyZW5ndGggPT4gMSk7Ci0gICAgbXkgJHNhbHQgPSBNYXRoOjpCaWdJbnQtPm5ldygiJGJ1ZmZlciIpLT50b19oZXgoKTsKKyAgICBteSAkc2FsdCA9IE1hdGg6OkJpZ0ludC0+dG9faGV4KCRidWZmZXIpOwogICAgIG15ICRoYXNoID0gYXJnb24yaWRfcGFzcygkcGFzc3dvcmQsICRzYWx0LCAzLCAnNjRNJywgNCwgMTYpOwogCiAgICAgJGNvbm4gPSBEQkktPmNvbm5lY3QoIkRCSTpteXNxbDpkYXRhYmFzZT1Jc3N1ZVRyYWNrZXI7aG9zdD1kYiIsICJyb290IiwgImxldG1laW4iLCB7J1JhaXNlRXJyb3InID0+IDF9KTsK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC04LDE1ICs4LDE4IEBACiB1c2UgQ3J5cHQ6OlJhbmRvbSBxdyhtYWtlcmFuZG9tKTsgCiB1c2UgTWF0aDo6QmlnSW50OwogCi0KIHN1YiByZWdpc3RlciB7CiAgICAgbXkgJHVzZXJuYW1lID0gJF9bMF07CiAgICAgbXkgJHBhc3N3b3JkID0gJF9bMV07CiAgICAgbXkgJGNvbXBhbnlfaWQgPSAkX1syXTsKKyAgICAKKyAgICBteSAkYnVmZmVyID0gbWFrZXJhbmRvbShTaXplID0+IDEyOCwgU3RyZW5ndGggPT4gMSk7CisgICAgbXkgJHNhbHQgPSBNYXRoOjpCaWdJbnQtPnRvX2hleCgkYnVmZmVyKTsKKyAgICBteSAkaGFzaCA9IGFyZ29uMmlkX3Bhc3MoJHBhc3N3b3JkLCAkc2FsdCwgMywgJzY0TScsIDQsIDE2KTsKIAogICAgICRjb25uID0gREJJLT5jb25uZWN0KCJEQkk6bXlzcWw6ZGF0YWJhc2U9SXNzdWVUcmFja2VyO2hvc3Q9ZGIiLCAicm9vdCIsICJsZXRtZWluIiwgeydSYWlzZUVycm9yJyA9PiAxfSk7CiAgICAgbXkgJHN0aCA9ICRjb25uLT5wcmVwYXJlKCJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoPywgPywgPykiKTsKLSAgICAkc3RoLT5leGVjdXRlKCR1c2VybmFtZSwgJHBhc3N3b3JkLCAkY29tcGFueV9pZCk7CisgICAgJHN0aC0+ZXhlY3V0ZSgkdXNlcm5hbWUsICRoYXNoLCAkY29tcGFueV9pZCk7CiAKICAgICAkc3RoLT5maW5pc2goKTsKICAgICAkY29ubi0+ZGlzY29ubmVjdCgpOwpAQCAtMzcsMTAgKzQwLDEyIEBACiAgICAgICAgIHJldHVybiBcMDsKICAgICB9CiAKLSAgICBteSgkc3RvcmVkX3Bhc3N3b3JkKSA9ICRzdGgtPmZldGNocm93X2FycmF5KCk7CisgICAgbXkoJGhhc2gpID0gJHN0aC0+ZmV0Y2hyb3dfYXJyYXkoKTsKICAgICAkc3RoLT5maW5pc2goKTsKICAgICAkY29ubi0+ZGlzY29ubmVjdCgpOwogCi0gICAgcmV0dXJuICRzdG9yZWRfcGFzc3dvcmQgZXEgJHBhc3N3b3JkOworICAgIG15ICRtYXRjaCA9IGFyZ29uMmlkX3ZlcmlmeSgkaGFzaCwgJHBhc3N3b3JkKTsKKworICAgIHJldHVybiAkbWF0Y2g7CiB9CiAxOwo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMTE4IEBACisjaW5jbHVkZSA8c3RkaW8uaD4KKyNpbmNsdWRlIDxzdGRsaWIuaD4KKyNpbmNsdWRlIDxteXNxbC5oPgorI2luY2x1ZGUgPG9wZW5zc2wvcmFuZC5oPgorI2luY2x1ZGUgPG9wZW5zc2wvZXZwLmg+CisjaW5jbHVkZSA8YXJnb24yLmg+CisKKyNkZWZpbmUgU1RSU0laRSAgICAgICAgICAgMTAyNAorI2RlZmluZSBIQVNITEVOICAgICAgICAgICAgIDMyCisjZGVmaW5lIFNBTFRMRU4gICAgICAgICAgICAgMTIKKyNkZWZpbmUgdHJ1ZSAgICAgICAgICAgICAgICAgMQorCitjaGFyICphcmdvbl9oYXNoKGNvbnN0IGNoYXIgKnBhc3N3b3JkKTsKK3VpbnQ4X3QgKmNyZWF0ZV9zYWx0KCk7CisKK2ludCByZWdpc3RlclVzZXIoY29uc3QgY2hhciAqdXNlcm5hbWUsIGNvbnN0IGNoYXIgKnBhc3N3b3JkLCBjb25zdCBjaGFyICpjb21wYW55X2lkKQoreworICAgIE1ZU1FMICpjb25uID0gbXlzcWxfaW5pdChOVUxMKTsKKworICAgIGlmIChjb25uID09IE5VTEwpIHsKKyAgICAgICAgcHJpbnRmKCJteXNxbF9pbml0OiAlc1xuIiwgbXlzcWxfZXJyb3IoY29ubikpOworICAgICAgICBleGl0KDEpOworICAgIH0KKworICAgIGlmIChteXNxbF9yZWFsX2Nvbm5lY3QoY29ubiwgImRiIiwgInJvb3QiLCAibGV0bWVpbiIsICJJc3N1ZVRyYWNrZXIiLCAzMzA2LCBOVUxMLCAwKSA9PSBOVUxMKSB7CisgICAgICAgIHByaW50ZigiXG5FcnJvciAobXlzcWxfcmVhbF9jb25uZWN0KTogJXMgWyVkXVxuIiwgbXlzcWxfZXJyb3IoY29ubiksIG15c3FsX2Vycm5vKGNvbm4pKTsKKyAgICAgICAgZXhpdCgxKTsKKyAgICB9CisKKyAgICBjaGFyICpoYXNoZWRfcGFzc3dvcmQgPSBhcmdvbl9oYXNoKChjaGFyICopIHBhc3N3b3JkKTsKKworICAgIGNoYXIgKnF1ZXJ5ID0gbWFsbG9jKFNUUlNJWkUpOworICAgIHNwcmludGYocXVlcnksICJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoJyVzJywgJyVzJywgJyVzJykiLCAKKyAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUsIGhhc2hlZF9wYXNzd29yZCwgY29tcGFueV9pZCk7CisgICAgaWYgKG15c3FsX3F1ZXJ5KGNvbm4sIHF1ZXJ5KSkgeworICAgICAgICBwcmludGYoIlxuRXJyb3IgKG15c3FsX3F1ZXJ5KTogJXMgWyVkXVxuIiwgbXlzcWxfZXJyb3IoY29ubiksIG15c3FsX2Vycm5vKGNvbm4pKTsKKyAgICAgICAgZXhpdCgxKTsKKyAgICB9CisgICAgZnJlZShxdWVyeSk7CisgICAgZnJlZShoYXNoZWRfcGFzc3dvcmQpOworCisgICAgTVlTUUxfUkVTICpyZXN1bHQgPSBteXNxbF9zdG9yZV9yZXN1bHQoY29ubik7CisKKyAgICBteXNxbF9mcmVlX3Jlc3VsdChyZXN1bHQpOworICAgIG15c3FsX2Nsb3NlKGNvbm4pOworCisgICAgcmV0dXJuIHRydWU7Cit9CisKK2ludCBsb2dpbihjb25zdCBjaGFyICp1c2VybmFtZSwgY29uc3QgY2hhciAqcGFzc3dvcmQpCit7CisgICAgTVlTUUwgKmNvbm4gPSBteXNxbF9pbml0KE5VTEwpOworCisgICAgaWYgKGNvbm4gPT0gTlVMTCkgeworICAgICAgICBwcmludGYoIm15c3FsX2luaXQ6ICVzXG4iLCBteXNxbF9lcnJvcihjb25uKSk7CisgICAgICAgIGV4aXQoMSk7CisgICAgfQorCisgICAgaWYgKG15c3FsX3JlYWxfY29ubmVjdChjb25uLCAiZGIiLCAicm9vdCIsICJsZXRtZWluIiwgIklzc3VlVHJhY2tlciIsIDMzMDYsIE5VTEwsIDApID09IE5VTEwpIHsKKyAgICAgICAgcHJpbnRmKCJcbkVycm9yIChteXNxbF9yZWFsX2Nvbm5lY3QpOiAlcyBbJWRdXG4iLCBteXNxbF9lcnJvcihjb25uKSwgbXlzcWxfZXJybm8oY29ubikpOworICAgICAgICBleGl0KDEpOworICAgIH0KKworICAgIGNoYXIgKnF1ZXJ5ID0gbWFsbG9jKFNUUlNJWkUpOworICAgIHNwcmludGYocXVlcnksICJTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJyVzJyIsIHVzZXJuYW1lKTsKKyAgICAgICAgaWYgKG15c3FsX3F1ZXJ5KGNvbm4sIHF1ZXJ5KSkgeworICAgICAgICBwcmludGYoIlxuRXJyb3IgKG15c3FsX3F1ZXJ5KTogJXMgWyVkXVxuIiwgbXlzcWxfZXJyb3IoY29ubiksIG15c3FsX2Vycm5vKGNvbm4pKTsKKyAgICAgICAgZXhpdCgxKTsKKyAgICB9CisgICAgZnJlZShxdWVyeSk7CisKKyAgICBNWVNRTF9SRVMgKnJlc3VsdCA9IG15c3FsX3N0b3JlX3Jlc3VsdChjb25uKTsKKyAgICBNWVNRTF9ST1cgcm93OworCisgICAgcm93ID0gbXlzcWxfZmV0Y2hfcm93KHJlc3VsdCk7CisKKyAgICBteXNxbF9mcmVlX3Jlc3VsdChyZXN1bHQpOworICAgIG15c3FsX2Nsb3NlKGNvbm4pOworCisgICAgaW50IGFyZ29uX3ZlcmlmaWNhdGlvbiA9IGFyZ29uMmlkX3ZlcmlmeSgoY29uc3QgY2hhciAqKSByb3dbMF0sIChjaGFyICopIHBhc3N3b3JkLCBzdHJsZW4ocGFzc3dvcmQpKTsKKworICAgIHJldHVybiBhcmdvbl92ZXJpZmljYXRpb24gPT0gQVJHT04yX09LOworfQorCisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBIZWxwZXIgZnVuY3Rpb25zIGJlbG93IC0tIERvbid0IHRvdWNoIGFueXRoaW5nIHVuZGVyIHRoaXMgYm94LiAqCisgKiBJbXBsZW1lbnQgYXJnb25faGFzaCgpIGFib3ZlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK2NoYXIgKmFyZ29uX2hhc2goY29uc3QgY2hhciAqcGFzc3dvcmQpCit7CisgICAgdWludDhfdCAqc2FsdCA9IGNyZWF0ZV9zYWx0KCk7CisKKyAgICBjaGFyICplbmNvZGVkID0gY2FsbG9jKFNUUlNJWkUsIHNpemVvZihjaGFyKSk7CisgICAgdWludDhfdCAqcHdkID0gKHVpbnQ4X3QgKikgc3RyZHVwKHBhc3N3b3JkKTsKKyAgICB1aW50MzJfdCBwd2RsZW4gPSBzdHJsZW4oKGNoYXIgKikgcHdkKTsKKworICAgIHVpbnQzMl90IHRfY29zdCA9IDM7ICAgICAgICAgICAgCisgICAgdWludDMyX3QgbV9jb3N0ID0gKDE8PDE2KTsgICAgICAKKyAgICB1aW50MzJfdCBwYXJhbGxlbGlzbSA9IDQ7CisKKyAgICBhcmdvbjJpZF9oYXNoX2VuY29kZWQodF9jb3N0LCBtX2Nvc3QsIHBhcmFsbGVsaXNtLCBwd2QsIHB3ZGxlbiwgc2FsdCwgU0FMVExFTiwgSEFTSExFTiwgZW5jb2RlZCwgU1RSU0laRSAtIDEpOworICAgIGZyZWUocHdkKTsKKworICAgIHJldHVybiBlbmNvZGVkOworfQorCit1aW50OF90ICpjcmVhdGVfc2FsdCgpCit7CisgICAgdW5zaWduZWQgY2hhciByYW5kb21fYnl0ZXNbU0FMVExFTl07CisgICAgdWludDhfdCAqc2FsdCA9IGNhbGxvYyhTQUxUTEVOLCBzaXplb2YoY2hhcikpOworCisgICAgUkFORF9ieXRlcyhyYW5kb21fYnl0ZXMsIHNpemVvZihyYW5kb21fYnl0ZXMpKTsKKyAgICBFVlBfRW5jb2RlQmxvY2soKHVuc2lnbmVkIGNoYXIgKilzYWx0LCByYW5kb21fYnl0ZXMsIAorICAgICAgICBzaXplb2YocmFuZG9tX2J5dGVzKSk7CisKKyAgICByZXR1cm4gc2FsdDsKK30K
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDEzICsyLDE1IEBACiBpbXBvcnQgYXJnb24yCiAKIAotCiBkZWYgcmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKToKLSAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9ImRiIiwgcG9ydD0zMzA2LCB1c2VyPSJyb290IiwgcGFzc3dkPSJsZXRtZWluIiwgZGI9Iklzc3VlVHJhY2tlciIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdJc3N1ZVRyYWNrZXInKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAorICAgIGFyZ29uID0gYXJnb24yLlBhc3N3b3JkSGFzaGVyKG1lbW9yeV9jb3N0PTY1NTM2LCB0aW1lX2Nvc3Q9MywgcGFyYWxsZWxpc209NCkKKyAgICBoYXNoID0gYXJnb24uaGFzaChwYXNzd29yZCkKKwogICAgIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHVzZXIgKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCkgVkFMVUVTICglcywgJXMsICVzKSIKLSAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCkpCisgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwgaGFzaCwgY29tcGFueV9pZCkpCiAgICAgCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCkBAIC0xNyw3ICsxOSw3IEBACiAgICAgcmV0dXJuIFRydWUKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJJc3N1ZVRyYWNrZXIiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nSXNzdWVUcmFja2VyJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKICAgICBxdWVyeSA9ICJTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJXMiCkBAIC0yOSw1ICszMSwxMiBAQAogCiAgICAgaWYgcmVzdWx0IGlzIE5vbmU6CiAgICAgICAgIHJldHVybiBGYWxzZQorICAgIAorICAgIHRyeToKKyAgICAgICAgYXJnb24gPSBhcmdvbjIuUGFzc3dvcmRIYXNoZXIoKQorICAgICAgICBhcmdvbi52ZXJpZnkocmVzdWx0WzBdLCBwYXNzd29yZCkKKyAgICAgICAgbWF0Y2ggPSBUcnVlCisgICAgZXhjZXB0IGFyZ29uMi5leGNlcHRpb25zLlZlcmlmeU1pc21hdGNoRXJyb3I6CisgICAgICAgIG1hdGNoID0gRmFsc2UKIAotICAgIHJldHVybiByZXN1bHRbMF0gPT0gcGFzc3dvcmQKKyAgICByZXR1cm4gbWF0Y2g=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE3ICsxLDIyIEBACiBjb25zdCBteXNxbCA9IHJlcXVpcmUoJ215c3FsMi9wcm9taXNlJyk7Ci1jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTsKK2NvbnN0IGFyZ29uMiA9IHJlcXVpcmUoJ2FyZ29uMicpOwogCiBleHBvcnRzLnJlZ2lzdGVyID0gYXN5bmMgZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCkgewogICAgIGNvbnN0IGNvbm4gPSBhd2FpdCBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHsKLSAgICAgICAgCiAgICAgICAgIGhvc3Q6ICdkYicsCiAgICAgICAgIHVzZXI6ICdyb290JywKICAgICAgICAgcGFzc3dvcmQ6ICdsZXRtZWluJywKICAgICAgICAgZGF0YWJhc2U6ICdJc3N1ZVRyYWNrZXInCiAgICAgfSk7CiAKKyAgICBjb25zdCBoYXNoID0gYXdhaXQgYXJnb24yLmhhc2gocGFzc3dvcmQsIHsKKyAgICAgICAgbWVtb3J5Q29zdDogNjU1MzYsCisgICAgICAgIHRpbWVDb3N0OiAzLAorICAgICAgICBwYXJhbGxlbGlzbTogNCwKKyAgICB9KTsKKwogICAgIGNvbnN0IHN0YXRlbWVudCA9ICdJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoPywgPywgPyknOwotICAgIGNvbnN0IFtyZXN1bHRzXSA9IGF3YWl0IGNvbm4ucXVlcnkoc3RhdGVtZW50LCBbdXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkXSk7CisgICAgY29uc3QgW3Jlc3VsdHNdID0gYXdhaXQgY29ubi5xdWVyeShzdGF0ZW1lbnQsIFt1c2VybmFtZSwgaGFzaCwgY29tcGFueV9pZF0pOwogICAgIGNvbm4uZW5kKCk7CiAKICAgICByZXR1cm4gcmVzdWx0cy5hZmZlY3RlZFJvd3MgPT09IDE7CkBAIC0yNSw3ICszMCw3IEBACiAgICAgICAgIGRhdGFiYXNlOiAnSXNzdWVUcmFja2VyJwogICAgIH0pOwogCi0gICAgY29uc3Qgc3RhdGVtZW50ID0gJ1NFTEVDVCBwYXNzd29yZCBGUk9NIHVzZXIgV0hFUkUgdXNlcm5hbWUgPSA/JworICAgIGNvbnN0IHN0YXRlbWVudCA9ICdTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gPyc7CiAgICAgY29uc3QgW3Jvd3NdID0gYXdhaXQgY29ubi5xdWVyeShzdGF0ZW1lbnQsIFt1c2VybmFtZV0pOwogICAgIGNvbm4uZW5kKCk7CiAKQEAgLTMzLDUgKzM4LDYgQEAKICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgIH0KIAotICAgIHJldHVybiByb3dzWzBdLnBhc3N3b3JkID09PSBwYXNzd29yZDsKKyAgICBjb25zdCBtYXRjaCA9IGF3YWl0IGFyZ29uMi52ZXJpZnkocm93c1swXS5wYXNzd29yZCwgcGFzc3dvcmQpOworICAgIHJldHVybiBtYXRjaDsKIH0K
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC05LDEwICs5LDE1IEBACiAgICAgZGF0YWJhc2U6ICdJc3N1ZVRyYWNrZXInCiAgIH0pOwogCisgIGNvbnN0IGhhc2ggPSBhd2FpdCBhcmdvbjIuaGFzaChwYXNzd29yZCwgeworICAgIG1lbW9yeUNvc3Q6IDY1NTM2LAorICAgIHRpbWVDb3N0OiAzLAorICAgIHBhcmFsbGVsaXNtOiA0LAorICB9KTsKKwogICBjb25zdCBzdGF0ZW1lbnQgPSAnSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKSBWQUxVRVMgKD8sID8sID8pJzsKLSAgY29uc3QgW3Jlc3VsdHNdID0gYXdhaXQgY29ubi5xdWVyeTxSZXN1bHRTZXRIZWFkZXI+KHN0YXRlbWVudCwgW3VzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZF0pOworICBjb25zdCBbcmVzdWx0c10gPSBhd2FpdCBjb25uLnF1ZXJ5PFJlc3VsdFNldEhlYWRlcj4oc3RhdGVtZW50LCBbdXNlcm5hbWUsIGhhc2gsIGNvbXBhbnlfaWRdKTsKICAgY29ubi5lbmQoKTsKLQogCiAgIHJldHVybiByZXN1bHRzLmFmZmVjdGVkUm93cyA9PT0gMTsKIH0KQEAgLTMzLDcgKzM4LDggQEAKICAgICByZXR1cm4gZmFsc2U7CiAgIH0KIAotICByZXR1cm4gcm93c1swXS5wYXNzd29yZCA9PT0gcGFzc3dvcmQ7CisgIGNvbnN0IG1hdGNoID0gYXdhaXQgYXJnb24yLnZlcmlmeShyb3dzWzBdLnBhc3N3b3JkLCBwYXNzd29yZCk7CisgIHJldHVybiBtYXRjaDsKIH0KIAogaW50ZXJmYWNlIFVzZXIgZXh0ZW5kcyBSb3dEYXRhUGFja2V0IHsK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNDIgQEAKK2ltcG9ydCBweW15c3FsCitpbXBvcnQgYXJnb24yCisKKworZGVmIHJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCk6CisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdJc3N1ZVRyYWNrZXInKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKKworICAgIGFyZ29uID0gYXJnb24yLlBhc3N3b3JkSGFzaGVyKG1lbW9yeV9jb3N0PTY1NTM2LCB0aW1lX2Nvc3Q9MywgcGFyYWxsZWxpc209NCkKKyAgICBoYXNoID0gYXJnb24uaGFzaChwYXNzd29yZCkKKworICAgIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHVzZXIgKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCkgVkFMVUVTICglcywgJXMsICVzKSIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCBoYXNoLCBjb21wYW55X2lkKSkKKyAgICAKKyAgICBjb25uLmNvbW1pdCgpCisgICAgY3Vyc29yLmNsb3NlKCkKKyAgICBjb25uLmNsb3NlKCkKKworICAgIHJldHVybiBUcnVlCisKK2RlZiBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpOgorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nSXNzdWVUcmFja2VyJykKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisKKyAgICBxdWVyeSA9ICJTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJXMiCisgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwpKQorICAgIHJlc3VsdCA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQorCisgICAgaWYgcmVzdWx0IGlzIE5vbmU6CisgICAgICAgIHJldHVybiBGYWxzZQorICAgIAorICAgIHRyeToKKyAgICAgICAgYXJnb24gPSBhcmdvbjIuUGFzc3dvcmRIYXNoZXIoKQorICAgICAgICBhcmdvbi52ZXJpZnkocmVzdWx0WzBdLCBwYXNzd29yZCkKKyAgICAgICAgbWF0Y2ggPSBUcnVlCisgICAgZXhjZXB0IGFyZ29uMi5leGNlcHRpb25zLlZlcmlmeU1pc21hdGNoRXJyb3I6CisgICAgICAgIG1hdGNoID0gRmFsc2UKKworICAgIHJldHVybiBtYXRjaA==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xMSwxMCArMTEsMTEgQEAKICAgICBteSAkcGFzc3dvcmQgPSAkX1sxXTsKIAogICAgICRjb25uID0gREJJLT5jb25uZWN0KCJEQkk6bXlzcWw6ZGF0YWJhc2U9U29jaWFsTWVkaWFBcHA7aG9zdD1kYiIsICJyb290IiwgImxldG1laW4iLCB7J1JhaXNlRXJyb3InID0+IDF9KTsKLSAgICBteSAkc3RoID0gJGNvbm4tPnByZXBhcmUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAnIi4kdXNlcm5hbWUuIicgQU5EIHBhc3N3b3JkID0gJyIuJHBhc3N3b3JkLiInIik7Ci0gICAgJHN0aC0+ZXhlY3V0ZSgpOworICAgIG15ICRzdGggPSAkY29ubi0+cHJlcGFyZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8gQU5EIHBhc3N3b3JkID0gPyIpOworICAgICRzdGgtPmV4ZWN1dGUoJHVzZXJuYW1lLCAkcGFzc3dvcmQpOwogICAgICRudW1fcm93cyA9ICRzdGgtPnJvd3M7CiAgICAgJHN0aC0+ZmluaXNoKCk7CisKICAgICAkY29ubi0+ZGlzY29ubmVjdCgpOwogCiAgICAgaWYoJG51bV9yb3dzID4gMCkgewpAQCAtMjIsNiArMjMsNSBAQAogICAgIH0gZWxzZSB7CiAgICAgICAgIHJldHVybiBcMDsKICAgICB9Ci0gICAgCiB9CiAxOw==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjcgQEAKKyMhL3Vzci9iaW4vcGVybAorCitwYWNrYWdlIEV4dGVybmFsOworCit1c2Ugd2FybmluZ3M7Cit1c2UgSlNPTjsKK3VzZSBEQkk7CisKK3N1YiBsb2dpbiB7CisgICAgbXkgJHVzZXJuYW1lID0gJF9bMF07CisgICAgbXkgJHBhc3N3b3JkID0gJF9bMV07CisKKyAgICAkY29ubiA9IERCSS0+Y29ubmVjdCgiREJJOm15c3FsOmRhdGFiYXNlPVNvY2lhbE1lZGlhQXBwO2hvc3Q9ZGIiLCAicm9vdCIsICJsZXRtZWluIiwgeydSYWlzZUVycm9yJyA9PiAxfSk7CisgICAgbXkgJHN0aCA9ICRjb25uLT5wcmVwYXJlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gPyBBTkQgcGFzc3dvcmQgPSA/Iik7CisgICAgJHN0aC0+ZXhlY3V0ZSgkdXNlcm5hbWUsICRwYXNzd29yZCk7CisgICAgJG51bV9yb3dzID0gJHN0aC0+cm93czsKKyAgICAkc3RoLT5maW5pc2goKTsKKworICAgICRjb25uLT5kaXNjb25uZWN0KCk7CisKKyAgICBpZigkbnVtX3Jvd3MgPiAwKSB7CisgICAgICAgIHJldHVybiBcMTsKKyAgICB9IGVsc2UgeworICAgICAgICByZXR1cm4gXDA7CisgICAgfQorfQorMTs=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMTYgQEAKK2NvbnN0IG15c3FsID0gcmVxdWlyZSgnbXlzcWwyL3Byb21pc2UnKTsKKworZXhwb3J0cy5sb2dpbiA9IGFzeW5jIGZ1bmN0aW9uICh1c2VybmFtZSwgcGFzc3dvcmQpIHsKKyAgY29uc3QgY29ubiA9IGF3YWl0IG15c3FsLmNyZWF0ZUNvbm5lY3Rpb24oeworICAgIGhvc3Q6ICdkYicsCisgICAgdXNlcjogJ3Jvb3QnLAorICAgIHBhc3N3b3JkOiAnbGV0bWVpbicsCisgICAgZGF0YWJhc2U6ICdTb2NpYWxNZWRpYUFwcCcKKyAgfSk7CisKKyAgY29uc3Qgc3RhdGVtZW50ID0gJ1NFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSA/IEFORCBwYXNzd29yZCA9ID8nOworICBjb25zdCBbcm93c10gPSBhd2FpdCBjb25uLnF1ZXJ5KHN0YXRlbWVudCwgW3VzZXJuYW1lLCBwYXNzd29yZF0pOworICBjb25uLmVuZCgpOworCisgIHJldHVybiByb3dzLmxlbmd0aCAhPT0gMDsKK30K
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE5ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKLWZvb2JhcgorCiBkZWYgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKToKLSAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9ImRiIiwgcG9ydD0zMzA2LCB1c2VyPSJyb290IiwgcGFzc3dkPSJsZXRtZWluIiwgZGI9IlNvY2lhbE1lZGlhQXBwIikKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J1NvY2lhbE1lZGlhQXBwJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBxdWVyeSA9ICJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJyIgKyB1c2VybmFtZSArICInIEFORCBwYXNzd29yZCA9ICciKyBwYXNzd29yZCArICInOyIKLSAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIG5vdCBkYXRhOgorICAgIGlmIGxlbihkYXRhKSBpcyAwOgogICAgICAgICByZXR1cm4gRmFsc2UKLQogICAgIHJldHVybiBUcnVlCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xICsxLDUyIEBACi1mb29iYXIraW1wb3J0IG9zCitpbXBvcnQgcHlteXNxbAorCisKK2RlZiBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpOgorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nbXlzcWwnLCBwb3J0PTMzMDYsCisgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyPSdyb290JywgcGFzc3dkPScxJywgZGI9J293YXNwMTBzcWxpJykKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisKKyAgICBjdXJzb3IuZXhlY3V0ZSgKKyAgICAgICAgIlNFTEVDVCB1c2VyX2lkIEZST00gdXNlcnMgV0hFUkUgdXNlcl9uYW1lID0gJXMgQU5EIHBhc3N3b3JkID0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCisgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCisKKyAgICBjb25uLmNvbW1pdCgpCisgICAgY3Vyc29yLmNsb3NlKCkKKyAgICBjb25uLmNsb3NlKCkKKworICAgIGlmIGxlbihkYXRhKSA9PSAwOgorICAgICAgICByZXR1cm4geworICAgICAgICAgICAgImxvZ2dlZCI6IEZhbHNlCisgICAgICAgIH0KKyAgICByZXR1cm4geworICAgICAgICAibG9nZ2VkIjogVHJ1ZSwKKyAgICAgICAgIm5hbWUiOiB1c2VybmFtZQorICAgIH0KKworCitkZWYgZ2V0X3Byb2plY3RzKGlkUHJvamVjdCk6CisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdteXNxbCcsIHBvcnQ9MzMwNiwKKyAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9JzEnLCBkYj0nb3dhc3AxMHNxbGknKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKKworICAgIHN0YXRlbWVudCA9ICJTRUxFQ1QgKiBGUk9NIHByb2plY3RzIFdIRVJFIHByb2plY3RfaWQgPSAlczsiCisKKyAgICBjdXJzb3IuZXhlY3V0ZShzdGF0ZW1lbnQsIChpZFByb2plY3QpKQorICAgIHJlc3BvbnNlID0gY3Vyc29yLmZldGNoYWxsKCkKKyAgICBkYXRhID0gW10KKyAgICBmb3Igcm93IGluIHJlc3BvbnNlOgorICAgICAgICBkYXRhLmFwcGVuZCh7CisgICAgICAgICAgICAicHJvamVjdF9pZCI6IHJvd1swXSwKKyAgICAgICAgICAgICJuYW1lIjogcm93WzFdLAorICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogcm93WzJdLAorICAgICAgICAgICAgInN0YXJ0X2RhdGUiOiBzdHIocm93WzNdKSwKKyAgICAgICAgICAgICJlbmRfZGF0ZSI6IHN0cihyb3dbNF0pLAorICAgICAgICAgICAgInR5cGUiOiByb3dbNV0sCisgICAgICAgICAgICAib3duZXIiOiByb3dbNl0KKyAgICAgICAgfSkKKworICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQorICAgIHJldHVybiBkYXRhCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNSBAQAoraW1wb3J0IG9zLCBzdWJwcm9jZXNzCisKK2RlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgorICAgIGZpbGUgPSBvcGVuKCJ0bXAvIiArIHVzZXJuYW1lICsgIi8iICsgZmlsZW5hbWUsICJ3IikKKyAgICBmaWxlLmNsb3NlKCkK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xICsxLDI2IEBACi1hK2ltcG9ydCB1cmxsaWIucGFyc2UKKworCitkZWYgZW5jb2RlX2FzY2lpKG1lc3NhZ2UpOgorICAgIHJldHVybiAiIi5qb2luKHN0cih4KSArICIgIiBmb3IgeCBpbiBtZXNzYWdlLmVuY29kZShlbmNvZGluZz0iYXNjaWkiLCBlcnJvcnM9InJlcGxhY2UiKSkKKworCitkZWYgZGVjb2RlX2FzY2lpKGVuY29kZWRfc3RyaW5nKToKKyAgICByZXR1cm4gIiIuam9pbihjaHIoaW50KGIpKSBmb3IgYiBpbiBlbmNvZGVkX3N0cmluZy5zcGxpdCgiICIpKQorCisgICAgCitkZWYgZW5jb2RlX3V0ZihtZXNzYWdlKToKKyAgICByZXR1cm4gIiIuam9pbihoZXgoaSkgKyAiICIgZm9yIGkgaW4gbWVzc2FnZS5lbmNvZGUoZW5jb2Rpbmc9InV0Zi04IikpCisKKworZGVmIGRlY29kZV91dGYoZW5jb2RlZF9zdHJpbmcpOgorICAgIGhleF92YWx1ZXMgPSAiIi5qb2luKGIubHN0cmlwKCcweCcpIGZvciBiIGluIGVuY29kZWRfc3RyaW5nLnNwbGl0KCIgIikpCisgICAgcmV0dXJuIGJ5dGVzLmZyb21oZXgoaGV4X3ZhbHVlcykuZGVjb2RlKCd1dGYtOCcpCisKKworZGVmIGVuY29kZV91cmwodXJsKToKKyAgICByZXR1cm4gdXJsbGliLnBhcnNlLnF1b3RlKHVybCkKKworCitkZWYgZGVjb2RlX3VybChlbmNvZGVkX3VybCk6CisgICAgcmV0dXJuIHVybGxpYi5wYXJzZS51bnF1b3RlKGVuY29kZWRfdXJsKQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE3ICsxLDE4IEBACiBpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCisKKwogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6CiAgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQorCiAgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQorCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCisKICAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0gICAgcmV0dXJuIFRydWUgCi0KLQotCi0KKyAgICByZXR1cm4gVHJ1ZQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE3ICsxLDE4IEBACiBpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCisKKwogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6CiAgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQorCiAgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQorCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCisKICAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgcmV0dXJuIFRydWUKLQotCi0KLQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC03LDcgKzcsNiBAQAogdXNlIERpZ2VzdDo6U0hBIChxdyhzaGEyNTZfaGV4KSk7CiB1c2UgQ3J5cHQ6OlJhbmRvbSBxdyhtYWtlcmFuZG9tKTsgCiB1c2UgTWF0aDo6QmlnSW50OwotdXNlIE1hdGg6OlBhcmkgJzpoZXgnOwogCiBzdWIgcmVnaXN0ZXIgewogICAgIG15ICR1c2VybmFtZSA9ICRfWzBdOwpAQCAtMTUsMTAgKzE0LDcgQEAKICAgICBteSAkY29tcGFueV9pZCA9ICRfWzJdOwogCiAgICAgbXkgJGJ1ZmZlciA9IG1ha2VyYW5kb20oU2l6ZSA9PiAyNTYsIFN0cmVuZ3RoID0+IDEpOwotICAgIHByaW50ICRidWZmZXI7Ci0gICAgcHJpbnQgIlxuIjsKLSAgICBteSAkc2FsdCA9IE1hdGg6OkJpZ0ludC0+bmV3KCIkYnVmZmVyIiktPnRvX2hleCgpOwotICAgIHByaW50ICRzYWx0OworICAgIG15ICRzYWx0ID0gTWF0aDo6QmlnSW50LT50b19oZXgoJGJ1ZmZlcik7CiAgICAgbXkgJGRpZ2VzdCA9IHNoYTI1Nl9oZXgoJHBhc3N3b3JkIC4gJHNhbHQpOwogCiAgICAgJGNvbm4gPSBEQkktPmNvbm5lY3QoIkRCSTpteXNxbDpkYXRhYmFzZT1Jc3N1ZVRyYWNrZXI7aG9zdD1kYiIsICJyb290IiwgImxldG1laW4iLCB7J1JhaXNlRXJyb3InID0+IDF9KTsK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNDcgQEAKK2NvbnN0IG15c3FsID0gcmVxdWlyZSgnbXlzcWwyL3Byb21pc2UnKTsKK2NvbnN0IGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpOworCitleHBvcnRzLnJlZ2lzdGVyID0gYXN5bmMgZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCkgeworICAgIGNvbnN0IGNvbm4gPSBhd2FpdCBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHsKKyAgICAgICAgaG9zdDogJ2RiJywKKyAgICAgICAgdXNlcjogJ3Jvb3QnLAorICAgICAgICBwYXNzd29yZDogJ2xldG1laW4nLAorICAgICAgICBkYXRhYmFzZTogJ0lzc3VlVHJhY2tlcicKKyAgICB9KTsKKworICAgIGNvbnN0IGJ1ZmZlciA9IGNyeXB0by5yYW5kb21CeXRlcygzMik7CisgICAgY29uc3Qgc2FsdCA9IGJ1ZmZlci50b1N0cmluZygnaGV4Jyk7CisgICAgY29uc3QgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKTsKKyAgICBoYXNoLnVwZGF0ZShwYXNzd29yZCArIHNhbHQpOworICAgIGNvbnN0IGhleF9kaWdlc3QgPSBoYXNoLmRpZ2VzdCgnaGV4Jyk7CisKKyAgICBjb25zdCBzdGF0ZW1lbnQgPSAnSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBzYWx0LCBjb21wYW55X2lkKSBWQUxVRVMgKD8sID8sID8sID8pJworICAgIGNvbnN0IFtyZXN1bHRzXSA9IGF3YWl0IGNvbm4ucXVlcnkoc3RhdGVtZW50LCBbdXNlcm5hbWUsIGhleF9kaWdlc3QsIHNhbHQsIGNvbXBhbnlfaWRdKTsKKyAgICBjb25uLmVuZCgpOworCisgICAgcmV0dXJuIHJlc3VsdHMuYWZmZWN0ZWRSb3dzID09PSAxOworfQorCitleHBvcnRzLmxvZ2luID0gYXN5bmMgZnVuY3Rpb24gKHVzZXJuYW1lLCBwYXNzd29yZCkgeworICAgIGNvbnN0IGNvbm4gPSBhd2FpdCBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHsKKyAgICAgICAgaG9zdDogJ2RiJywKKyAgICAgICAgdXNlcjogJ3Jvb3QnLAorICAgICAgICBwYXNzd29yZDogJ2xldG1laW4nLAorICAgICAgICBkYXRhYmFzZTogJ0lzc3VlVHJhY2tlcicKKyAgICB9KTsKKworICAgIGNvbnN0IHN0YXRlbWVudCA9ICdTRUxFQ1QgcGFzc3dvcmQsIHNhbHQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gPyc7CisgICAgY29ubi5xdWVyeShzdGF0ZW1lbnQsIFt1c2VybmFtZV0pOworICAgIGNvbnN0IFtyb3dzXSA9IGF3YWl0IGNvbm4ucXVlcnkoc3RhdGVtZW50LCBbdXNlcm5hbWVdKTsKKyAgICBjb25uLmVuZCgpOworCisgICAgaWYgKCFyb3dzLmxlbmd0aCkgeworICAgICAgICByZXR1cm4gZmFsc2U7CisgICAgfQorCisgICAgY29uc3QgaGFzaCA9IGNyeXB0by5jcmVhdGVIYXNoKCJzaGEyNTYiKTsKKyAgICBoYXNoLnVwZGF0ZShwYXNzd29yZCArIHJvd3NbMF0uc2FsdCk7CisgICAgY29uc3QgY29tcHV0ZWRfZGlnZXN0ID0gaGFzaC5kaWdlc3QoImhleCIpOworCisgICAgcmV0dXJuIGNvbXB1dGVkX2RpZ2VzdCA9PT0gcm93c1swXS5wYXNzd29yZDsKK30K
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDkgKzEsOCBAQAogdXNlIHN0ZDo6e2ZzOjpPcGVuT3B0aW9ucywgcGF0aDo6UGF0aEJ1ZiwgcHJvY2Vzczo6Q29tbWFuZH07Ci11c2Ugc3RkOjppbzo6e3NlbGYsIFJlYWR9OwogCi1wdWIgZm4gY3JlYXRlX2ZpbGUodXNlcm5hbWU6ICZzdHIsIGZpbGVuYW1lOiAmc3RyKSAtPiBpbzo6UmVzdWx0PFN0cmluZz4geworcHViIGZuIGNyZWF0ZV9maWxlKHVzZXJuYW1lOiAmc3RyLCBmaWxlbmFtZTogJnN0cikgLT4gUmVzdWx0PCgpLCBzdGQ6OmlvOjpFcnJvcj4gewogICAgIGxldCBwYXRoID0gUGF0aEJ1Zjo6bmV3KCkuam9pbigidG1wIikuam9pbih1c2VybmFtZSkuam9pbihmaWxlbmFtZSk7CiAKLSAgICBPcGVuT3B0aW9uczo6bmV3KCkuY3JlYXRlKHRydWUpLm9wZW4oJnBhdGgpPzsKLSAgICBPayhmb3JtYXQhKCJGaWxlICd7fS97fScgY3JlYXRlZCBzdWNjZXNzZnVsbHkuIiwgdXNlcm5hbWUsIGZpbGVuYW1lKSkKKyAgICBPcGVuT3B0aW9uczo6bmV3KCkuY3JlYXRlX25ldyh0cnVlKS5vcGVuKCZwYXRoKT87CisgICAgT2soKCkpCiB9Cg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDkgKzEsOCBAQAogdXNlIHN0ZDo6e2ZzOjpPcGVuT3B0aW9ucywgcGF0aDo6UGF0aEJ1ZiwgcHJvY2Vzczo6Q29tbWFuZH07Ci11c2Ugc3RkOjppbzo6e3NlbGYsIFJlYWR9OwogCi1wdWIgZm4gY3JlYXRlX2ZpbGUodXNlcm5hbWU6ICZzdHIsIGZpbGVuYW1lOiAmc3RyKSAtPiBpbzo6UmVzdWx0PFN0cmluZz4geworcHViIGZuIGNyZWF0ZV9maWxlKHVzZXJuYW1lOiAmc3RyLCBmaWxlbmFtZTogJnN0cikgLT4gUmVzdWx0PCgpLCBzdGQ6OmlvOjpFcnJvcj4gewogICAgIGxldCBwYXRoID0gUGF0aEJ1Zjo6bmV3KCkuam9pbigidG1wIikuam9pbih1c2VybmFtZSkuam9pbihmaWxlbmFtZSk7CiAKLSAgICBPcGVuT3B0aW9uczo6bmV3KCkud3JpdGUodHJ1ZSkuY3JlYXRlKHRydWUpLm9wZW4oJnBhdGgpPzsKLSAgICBPayhmb3JtYXQhKCJGaWxlICd7fS97fScgY3JlYXRlZCBzdWNjZXNzZnVsbHkuIiwgdXNlcm5hbWUsIGZpbGVuYW1lKSkKKyAgICBPcGVuT3B0aW9uczo6bmV3KCkuY3JlYXRlX25ldyh0cnVlKS5vcGVuKCZwYXRoKT87CisgICAgT2soKCkpCiB9Cg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNzIgQEAKKyNpbmNsdWRlIDxzdGRpby5oPgorI2luY2x1ZGUgPHN0cmluZy5oPgorI2luY2x1ZGUgPHN0ZGxpYi5oPgorI2luY2x1ZGUgPG15c3FsLmg+CisKKyNkZWZpbmUgdHJ1ZSAgMQorI2RlZmluZSBmYWxzZSAwCisKK2VudW0geyBTVFJTSVpFID0gMTAyNCwgUEFSQU1TID0gMiB9OworCitpbnQgbG9naW4oY29uc3QgY2hhciAqdXNlcm5hbWUsIGNvbnN0IGNoYXIgKnBhc3N3b3JkKSB7CisgICAgTVlTUUwgKmNvbm4gPSBteXNxbF9pbml0KE5VTEwpOworICAgIGlmIChjb25uID09IE5VTEwpIHsKKyAgICAgICAgZnByaW50ZihzdGRlcnIsICJteXNxbF9pbml0OiAlc1xuIiwgbXlzcWxfZXJyb3IoY29ubikpOworICAgICAgICBleGl0KEVYSVRfRkFJTFVSRSk7CisgICAgfQorICAgIAorICAgIGlmIChteXNxbF9yZWFsX2Nvbm5lY3QoY29ubiwgImRiIiwgInJvb3QiLCAibGV0bWVpbiIsIlNvY2lhbE1lZGlhQXBwIiwgMzMwNiwgTlVMTCwgMCkgPT0gTlVMTCkgeworICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIm15c3FsX3JlYWxfY29ubmVjdDogJXNcbiIsIG15c3FsX2Vycm9yKGNvbm4pKTsKKyAgICAgICAgZXhpdChFWElUX0ZBSUxVUkUpOworICAgIH0KKworICAgIGNoYXIgKnNlbGVjdCA9ICJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gPyBBTkQgcGFzc3dvcmQgPSA/IjsKKyAgICBNWVNRTF9TVE1UICpzdG10OworICAgIE1ZU1FMX0JJTkQgYmluZFtQQVJBTVNdOworCisgICAgc3RtdCA9IG15c3FsX3N0bXRfaW5pdChjb25uKTsKKyAgICBpZiAoc3RtdCA9PSBOVUxMKSB7CisgICAgICAgIGZwcmludGYoc3RkZXJyLCAibXlzcWxfc3RtdF9pbml0KCkgb3V0IG9mIG1lbW9yeVxuIik7CisgICAgICAgIGV4aXQoRVhJVF9GQUlMVVJFKTsKKyAgICB9CisKKyAgICBpZiAobXlzcWxfc3RtdF9wcmVwYXJlKHN0bXQsIHNlbGVjdCwgc3RybGVuKHNlbGVjdCkpKSB7CisgICAgICAgIGZwcmludGYoc3RkZXJyLCAibXlzcWxfc3RtdF9wcmVwYXJlKCk6ICVzXG4iLCBteXNxbF9zdG10X2Vycm9yKHN0bXQpKTsKKyAgICAgICAgZXhpdChFWElUX0ZBSUxVUkUpOworICAgIH0KKworICAgIG1lbXNldChiaW5kLCAwLCBzaXplb2YoYmluZCkpOworCisgICAgdW5zaWduZWQgbG9uZyB1c2VybmFtZV9sZW4gPSBzdHJsZW4odXNlcm5hbWUpOworICAgIGJpbmRbMF0uYnVmZmVyX3R5cGUgPSBNWVNRTF9UWVBFX1NUUklORzsKKyAgICBiaW5kWzBdLmJ1ZmZlciA9IHVzZXJuYW1lOworICAgIGJpbmRbMF0uYnVmZmVyX2xlbmd0aCA9IHN0cmxlbih1c2VybmFtZSk7CisgICAgYmluZFswXS5pc19udWxsPSAwOworICAgIGJpbmRbMF0ubGVuZ3RoPSAmdXNlcm5hbWVfbGVuOworCisgICAgdW5zaWduZWQgbG9uZyBwYXNzd29yZF9sZW4gPSBzdHJsZW4ocGFzc3dvcmQpOworICAgIGJpbmRbMV0uYnVmZmVyX3R5cGUgPSBNWVNRTF9UWVBFX1NUUklORzsKKyAgICBiaW5kWzFdLmJ1ZmZlciA9IHBhc3N3b3JkOworICAgIGJpbmRbMV0uYnVmZmVyX2xlbmd0aCA9IHN0cmxlbihwYXNzd29yZCk7CisgICAgYmluZFsxXS5pc19udWxsPSAwOworICAgIGJpbmRbMV0ubGVuZ3RoPSAmcGFzc3dvcmRfbGVuOworCisgICAgaWYgKG15c3FsX3N0bXRfYmluZF9wYXJhbShzdG10LCBiaW5kKSkgeworICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIm15c3FsX3N0bXRfYmluZF9wYXJhbSgpOiAlc1xuIiwgbXlzcWxfc3RtdF9lcnJvcihzdG10KSk7CisgICAgICAgIGV4aXQoRVhJVF9GQUlMVVJFKTsKKyAgICB9CisKKyAgICBpZiAobXlzcWxfc3RtdF9leGVjdXRlKHN0bXQpKSB7CisgICAgICAgIGZwcmludGYoc3RkZXJyLCAibXlzcWxfc3RtdF9leGVjdXRlKCk6ICVzXG4iLCBteXNxbF9zdG10X2Vycm9yKHN0bXQpKTsKKyAgICAgICAgZXhpdChFWElUX0ZBSUxVUkUpOworICAgIH0KKworICAgIGludCBzdGF0dXMgPSBteXNxbF9zdG10X2ZldGNoKHN0bXQpOworICAgIG15c3FsX2Nsb3NlKGNvbm4pOworICAgIG15c3FsX3N0bXRfY2xvc2Uoc3RtdCk7CisgICAgaWYgKHN0YXR1cyA9PSAxIHx8IHN0YXR1cyA9PSBNWVNRTF9OT19EQVRBKSB7CisgICAgICAgIHJldHVybiBmYWxzZTsKKyAgICB9CisKKyAgICByZXR1cm4gdHJ1ZTsKK30=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsOTEgQEAKK2ltcG9ydCBiYXNlNjQKK2ltcG9ydCBodG1sCitpbXBvcnQganNvbgoraW1wb3J0IHJlcXVlc3RzCitpbXBvcnQgdXJsbGliCisKKworZGVmIGVuY29kZUNsaWVudENyZWRlbnRpYWxzKGNsaWVudElkLCBjbGllbnRTZWNyZXQpOgorICAgIHMgPSB1cmxsaWIucGFyc2UucXVvdGUoY2xpZW50SWQpKyI6IiArIHVybGxpYi5wYXJzZS5xdW90ZShjbGllbnRTZWNyZXQpCisgICAgcmV0dXJuIGJhc2U2NC5iNjRlbmNvZGUocy5lbmNvZGUoJ3V0Zi04JykpCisKKworZGVmIGNsaWVudENhbGxiYWNrKHF1ZXJ5LCBjbGllbnREYXRhLCBhdXRoU2VydmVyRGF0YSwgc2F2ZWRTdGF0ZSk6CisgICAgIyBDbGllbnQKKyAgICAjIC9HRVQgL2NhbGxiYWNrCisgICAgIyBxdWVyeSA9IHtlcnJvciwgY29kZSwgcmVkaXJlY3RfdXJpLCBzdGF0ZSwgc2NvcGUsIHJlc3BvbnNlX3R5cGUgfQorICAgIGlmICJlcnJvciIgaW4gcXVlcnk6CisgICAgICAgIHJldHVybiB7CisgICAgICAgICAgICAiZXJyb3IiOiBUcnVlLAorICAgICAgICAgICAgIm1zZyI6IHF1ZXJ5WyJlcnJvciJdCisgICAgICAgIH0KKyAgICBpZiBxdWVyeVsic3RhdGUiXSAhPSBzYXZlZFN0YXRlOgorICAgICAgICByZXR1cm4geworICAgICAgICAgICAgImVycm9yIjogVHJ1ZSwKKyAgICAgICAgICAgICJtc2ciOiAiU3RhdGUgdmFsdWUgbWlzbWF0Y2giCisgICAgICAgIH0KKyAgICBjb2RlID0gcXVlcnlbImNvZGUiXSBpZiAiY29kZSIgaW4gcXVlcnkgZWxzZSBOb25lCisgICAgZm9ybV9kYXRhID0geworICAgICAgICAiZ3JhbnRfdHlwZSI6ICJhdXRob3JpemF0aW9uX2NvZGUiLAorICAgICAgICAiY29kZSI6IGNvZGUsCisgICAgICAgICJyZWRpcmVjdF91cmkiOiAnaHR0cDovL2NsaWVudC5jb20vY2FsbGJhY2snCisgICAgfQorICAgIGVuY29kZWRDcmVkZW50aWFscyA9IGVuY29kZUNsaWVudENyZWRlbnRpYWxzKAorICAgICAgICBjbGllbnREYXRhWyJjbGllbnRfaWQiXSwgY2xpZW50RGF0YVsiY2xpZW50X3NlY3JldCJdKQorICAgIGVuY29kZWRDcmVkZW50aWFscyA9IGVuY29kZWRDcmVkZW50aWFscy5kZWNvZGUoInV0Zi04IikKKyAgICBoZWFkZXJzID0geworICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsCisgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0Jhc2ljICcgKyBlbmNvZGVkQ3JlZGVudGlhbHMKKyAgICB9CisgICAgciA9IHJlcXVlc3RzLnBvc3QoCisgICAgICAgIGF1dGhTZXJ2ZXJEYXRhWyJ0b2tlbkVuZHBvaW50Il0sIGRhdGE9Zm9ybV9kYXRhLCBoZWFkZXJzPWhlYWRlcnMpCisgICAgdG9rUmVzID0gci50ZXh0CisgICAgaWYgci5zdGF0dXNfY29kZSA+PSAyMDAgYW5kIHIuc3RhdHVzX2NvZGUgPCAzMDA6CisgICAgICAgIGJvZHkgPSBqc29uLmxvYWRzKHRva1JlcykKKyAgICAgICAgc2NvcGUgPSBib2R5WyJzY29wZSJdCisgICAgICAgIGFjY2Vzc190b2tlbiA9IGJvZHlbImFjY2Vzc190b2tlbiJdCisgICAgICAgIHJldHVybiB7CisgICAgICAgICAgICAiZXJyb3IiOiBGYWxzZSwKKyAgICAgICAgICAgICJhY2Nlc3NfdG9rZW4iOiBhY2Nlc3NfdG9rZW4sCisgICAgICAgICAgICAic2NvcGUiOiBzY29wZSwKKyAgICAgICAgICAgICJzdGF0dXNDb2RlIjogci5zdGF0dXNfY29kZQorICAgICAgICB9CisgICAgZWxzZToKKyAgICAgICAgYm9keSA9IGpzb24ubG9hZHModG9rUmVzKQorICAgICAgICByZXR1cm4geworICAgICAgICAgICAgImVycm9yIjogVHJ1ZSwKKyAgICAgICAgICAgICJtc2ciOiBib2R5WyJlcnJvciJdLAorICAgICAgICAgICAgInN0YXR1c0NvZGUiOiByLnN0YXR1c19jb2RlCisgICAgICAgIH0KKworCitkZWYgZ2V0Q29udGFjdFhTUyhhY2Nlc3NfdG9rZW49Tm9uZSk6CisgICAgaWYgbm90IGFjY2Vzc190b2tlbjoKKyAgICAgICAgcmV0dXJuIHsKKyAgICAgICAgICAgICJlcnJvciI6IFRydWUsCisgICAgICAgICAgICAibXNnIjogIk5vIEFjY2VzcyBUb2tlbiIsCisgICAgICAgICAgICAic3RhdHVzQ29kZSI6IDQwMQorICAgICAgICB9CisgICAgZWxzZToKKyAgICAgICAgaGVhZGVycyA9IHsKKyAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgYWNjZXNzX3Rva2VuCisgICAgICAgIH0KKyAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoCisgICAgICAgICAgICAiaHR0cDovL3Byb3RlY3RlZDo3MDEyL2NvbnRhY3QteHNzLWdldCIsCisgICAgICAgICAgICBoZWFkZXJzPWhlYWRlcnMKKyAgICAgICAgKQorICAgICAgICByYXdSZXN1bHQgPSByLnRleHQKKyAgICAgICAgaWYgci5zdGF0dXNfY29kZSA+PSAyMDAgYW5kIHIuc3RhdHVzX2NvZGUgPCAzMDA6CisgICAgICAgICAgICBib2R5ID0ganNvbi5sb2FkcyhyYXdSZXN1bHQpCisgICAgICAgICAgICBmb3IgaywgdiBpbiBib2R5Lml0ZW1zKCk6CisgICAgICAgICAgICAgICAgYm9keVtrXSA9IGh0bWwuZXNjYXBlKHYpCisgICAgICAgICAgICByZXR1cm4geworICAgICAgICAgICAgICAgICJlcnJvciI6IEZhbHNlLAorICAgICAgICAgICAgICAgICJyZXNvdXJjZSI6IGJvZHksCisgICAgICAgICAgICAgICAgInN0YXR1c0NvZGUiOiByLnN0YXR1c19jb2RlCisgICAgICAgICAgICB9CisgICAgICAgIGVsc2U6CisgICAgICAgICAgICByZXR1cm4geworICAgICAgICAgICAgICAgICJlcnJvciI6IFRydWUsCisgICAgICAgICAgICAgICAgInN0YXR1c0NvZGUiOiByLnN0YXR1c19jb2RlLAorICAgICAgICAgICAgfQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC03LDQxICs3LDM4IEBACiAKIGRlZiBlbmNvZGVDbGllbnRDcmVkZW50aWFscyhjbGllbnRJZCwgY2xpZW50U2VjcmV0KToKICAgICBzID0gdXJsbGliLnBhcnNlLnF1b3RlKGNsaWVudElkKSsiOiIgKyB1cmxsaWIucGFyc2UucXVvdGUoY2xpZW50U2VjcmV0KQotICAgIHJldHVybiBiYXNlNjQuYjY0ZW5jb2RlKHMuZW5jb2RlKCJ1dGYtOCIpKQorICAgIHJldHVybiBiYXNlNjQuYjY0ZW5jb2RlKHMuZW5jb2RlKCd1dGYtOCcpKQogCiAKIGRlZiBjbGllbnRDYWxsYmFjayhxdWVyeSwgY2xpZW50RGF0YSwgYXV0aFNlcnZlckRhdGEsIHNhdmVkU3RhdGUpOgogICAgICMgQ2xpZW50CiAgICAgIyAvR0VUIC9jYWxsYmFjawogICAgICMgcXVlcnkgPSB7ZXJyb3IsIGNvZGUsIHJlZGlyZWN0X3VyaSwgc3RhdGUsIHNjb3BlLCByZXNwb25zZV90eXBlIH0KLSAgICAjIHNhdmVkU3RhdGUgPT4gSGFzaCB2YWx1ZSBzYXZlZCBieSBjbGllbnQgYWZ0ZXIgY2xpY2sgIkFwcHJvdmUiCi0gICAgCiAgICAgaWYgImVycm9yIiBpbiBxdWVyeToKICAgICAgICAgcmV0dXJuIHsKLSAgICAgICAgICAgICJlcnJvciI6IEZhbHNlLAorICAgICAgICAgICAgImVycm9yIjogVHJ1ZSwKICAgICAgICAgICAgICJtc2ciOiBxdWVyeVsiZXJyb3IiXQorICAgICAgICB9CisgICAgaWYgcXVlcnlbInN0YXRlIl0gIT0gc2F2ZWRTdGF0ZToKKyAgICAgICAgcmV0dXJuIHsKKyAgICAgICAgICAgICJlcnJvciI6IFRydWUsCisgICAgICAgICAgICAibXNnIjogIlN0YXRlIHZhbHVlIG1pc21hdGNoIgogICAgICAgICB9CiAgICAgY29kZSA9IHF1ZXJ5WyJjb2RlIl0gaWYgImNvZGUiIGluIHF1ZXJ5IGVsc2UgTm9uZQogICAgIGZvcm1fZGF0YSA9IHsKICAgICAgICAgImdyYW50X3R5cGUiOiAiYXV0aG9yaXphdGlvbl9jb2RlIiwKICAgICAgICAgImNvZGUiOiBjb2RlLAotICAgICAgICAicmVkaXJlY3RfdXJpIjogImh0dHA6Ly9jbGllbnQuY29tL2NhbGxiYWNrIgorICAgICAgICAicmVkaXJlY3RfdXJpIjogJ2h0dHA6Ly9jbGllbnQuY29tL2NhbGxiYWNrJwogICAgIH0KICAgICBlbmNvZGVkQ3JlZGVudGlhbHMgPSBlbmNvZGVDbGllbnRDcmVkZW50aWFscygKLSAgICAgICAgY2xpZW50RGF0YVsiY2xpZW50X2lkIl0sCi0gICAgICAgIGNsaWVudERhdGFbImNsaWVudF9zZWNyZXQiXQotICAgICkKKyAgICAgICAgY2xpZW50RGF0YVsiY2xpZW50X2lkIl0sIGNsaWVudERhdGFbImNsaWVudF9zZWNyZXQiXSkKICAgICBlbmNvZGVkQ3JlZGVudGlhbHMgPSBlbmNvZGVkQ3JlZGVudGlhbHMuZGVjb2RlKCJ1dGYtOCIpCiAgICAgaGVhZGVycyA9IHsKLSAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLAotICAgICAgICAiQXV0aG9yaXphdGlvbiI6ICJCYXNpYyAiICsgZW5jb2RlZENyZWRlbnRpYWxzCisgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKKyAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmFzaWMgJyArIGVuY29kZWRDcmVkZW50aWFscwogICAgIH0KICAgICByID0gcmVxdWVzdHMucG9zdCgKLSAgICAgICAgYXV0aFNlcnZlckRhdGFbInRva2VuRW5kcG9pbnQiXSwKLSAgICAgICAgZGF0YT1mb3JtX2RhdGEsCi0gICAgICAgIGhlYWRlcnM9aGVhZGVycwotICAgICkKLQorICAgICAgICBhdXRoU2VydmVyRGF0YVsidG9rZW5FbmRwb2ludCJdLCBkYXRhPWZvcm1fZGF0YSwgaGVhZGVycz1oZWFkZXJzKQogICAgIHRva1JlcyA9IHIudGV4dAogICAgIGlmIHIuc3RhdHVzX2NvZGUgPj0gMjAwIGFuZCByLnN0YXR1c19jb2RlIDwgMzAwOgogICAgICAgICBib2R5ID0ganNvbi5sb2Fkcyh0b2tSZXMpCkBAIC03MSw3ICs2OCw3IEBACiAgICAgICAgIH0KICAgICBlbHNlOgogICAgICAgICBoZWFkZXJzID0gewotICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiAiQmVhcmVyICIgKyBhY2Nlc3NfdG9rZW4KKyAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgYWNjZXNzX3Rva2VuCiAgICAgICAgIH0KICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoCiAgICAgICAgICAgICAiaHR0cDovL3Byb3RlY3RlZDo3MDEyL2NvbnRhY3QteHNzLWdldCIsCkBAIC04MCw2ICs3Nyw4IEBACiAgICAgICAgIHJhd1Jlc3VsdCA9IHIudGV4dAogICAgICAgICBpZiByLnN0YXR1c19jb2RlID49IDIwMCBhbmQgci5zdGF0dXNfY29kZSA8IDMwMDoKICAgICAgICAgICAgIGJvZHkgPSBqc29uLmxvYWRzKHJhd1Jlc3VsdCkKKyAgICAgICAgICAgIGZvciBrLCB2IGluIGJvZHkuaXRlbXMoKToKKyAgICAgICAgICAgICAgICBib2R5W2tdID0gaHRtbC5lc2NhcGUodikKICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgImVycm9yIjogRmFsc2UsCiAgICAgICAgICAgICAgICAgInJlc291cmNlIjogYm9keSwK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC03LDI1ICs3LDE5IEBACiAKIGRlZiBlbmNvZGVDbGllbnRDcmVkZW50aWFscyhjbGllbnRJZCwgY2xpZW50U2VjcmV0KToKICAgICBzID0gdXJsbGliLnBhcnNlLnF1b3RlKGNsaWVudElkKSsiOiIgKyB1cmxsaWIucGFyc2UucXVvdGUoY2xpZW50U2VjcmV0KQotICAgIHJldHVybiBiYXNlNjQuYjY0ZW5jb2RlKHMuZW5jb2RlKCJ1dGYtOCIpKQorICAgIHJldHVybiBiYXNlNjQuYjY0ZW5jb2RlKHMuZW5jb2RlKCd1dGYtOCcpKQogCiAKIGRlZiBjbGllbnRDYWxsYmFjayhxdWVyeSwgY2xpZW50RGF0YSwgYXV0aFNlcnZlckRhdGEsIHNhdmVkU3RhdGUpOgogICAgICMgQ2xpZW50CiAgICAgIyAvR0VUIC9jYWxsYmFjawogICAgICMgcXVlcnkgPSB7ZXJyb3IsIGNvZGUsIHJlZGlyZWN0X3VyaSwgc3RhdGUsIHNjb3BlLCByZXNwb25zZV90eXBlIH0KLSAgICAjIHNhdmVkU3RhdGUgPT4gSGFzaCB2YWx1ZSBzYXZlZCBieSBjbGllbnQgYWZ0ZXIgY2xpY2sgIkFwcHJvdmUiCi0jICAgIHByaW50KHF1ZXJ5KQotIyAgICBwcmludChzYXZlZFN0YXRlKQotIyAgICBzZW50U3RhdGU9cXVlcnlbInN0YXRlIl0KLSMgICBwcmludChzZW50U3RhdGUpCi0KICAgICBpZiAiZXJyb3IiIGluIHF1ZXJ5OgogICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgImVycm9yIjogVHJ1ZSwKICAgICAgICAgICAgICJtc2ciOiBxdWVyeVsiZXJyb3IiXQogICAgICAgICB9Ci0gICAgaWYgcXVlcnlbInN0YXRlIl0gIT0gc2F2ZWRTdGF0ZSA6CisgICAgaWYgcXVlcnlbInN0YXRlIl0gIT0gc2F2ZWRTdGF0ZToKICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICJlcnJvciI6IFRydWUsCiAgICAgICAgICAgICAibXNnIjogIlN0YXRlIHZhbHVlIG1pc21hdGNoIgpAQCAtMzQsMjMgKzI4LDE3IEBACiAgICAgZm9ybV9kYXRhID0gewogICAgICAgICAiZ3JhbnRfdHlwZSI6ICJhdXRob3JpemF0aW9uX2NvZGUiLAogICAgICAgICAiY29kZSI6IGNvZGUsCi0gICAgICAgICJyZWRpcmVjdF91cmkiOiAiaHR0cDovL2NsaWVudC5jb20vY2FsbGJhY2siCisgICAgICAgICJyZWRpcmVjdF91cmkiOiAnaHR0cDovL2NsaWVudC5jb20vY2FsbGJhY2snCiAgICAgfQogICAgIGVuY29kZWRDcmVkZW50aWFscyA9IGVuY29kZUNsaWVudENyZWRlbnRpYWxzKAotICAgICAgICBjbGllbnREYXRhWyJjbGllbnRfaWQiXSwKLSAgICAgICAgY2xpZW50RGF0YVsiY2xpZW50X3NlY3JldCJdCi0gICAgKQorICAgICAgICBjbGllbnREYXRhWyJjbGllbnRfaWQiXSwgY2xpZW50RGF0YVsiY2xpZW50X3NlY3JldCJdKQogICAgIGVuY29kZWRDcmVkZW50aWFscyA9IGVuY29kZWRDcmVkZW50aWFscy5kZWNvZGUoInV0Zi04IikKICAgICBoZWFkZXJzID0gewotICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsCi0gICAgICAgICJBdXRob3JpemF0aW9uIjogIkJhc2ljICIgKyBlbmNvZGVkQ3JlZGVudGlhbHMKKyAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAorICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCYXNpYyAnICsgZW5jb2RlZENyZWRlbnRpYWxzCiAgICAgfQogICAgIHIgPSByZXF1ZXN0cy5wb3N0KAotICAgICAgICBhdXRoU2VydmVyRGF0YVsidG9rZW5FbmRwb2ludCJdLAotICAgICAgICBkYXRhPWZvcm1fZGF0YSwKLSAgICAgICAgaGVhZGVycz1oZWFkZXJzCi0gICAgKQotCisgICAgICAgIGF1dGhTZXJ2ZXJEYXRhWyJ0b2tlbkVuZHBvaW50Il0sIGRhdGE9Zm9ybV9kYXRhLCBoZWFkZXJzPWhlYWRlcnMpCiAgICAgdG9rUmVzID0gci50ZXh0CiAgICAgaWYgci5zdGF0dXNfY29kZSA+PSAyMDAgYW5kIHIuc3RhdHVzX2NvZGUgPCAzMDA6CiAgICAgICAgIGJvZHkgPSBqc29uLmxvYWRzKHRva1JlcykKQEAgLTgwLDcgKzY4LDcgQEAKICAgICAgICAgfQogICAgIGVsc2U6CiAgICAgICAgIGhlYWRlcnMgPSB7Ci0gICAgICAgICAgICAiQXV0aG9yaXphdGlvbiI6ICJCZWFyZXIgIiArIGFjY2Vzc190b2tlbgorICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyBhY2Nlc3NfdG9rZW4KICAgICAgICAgfQogICAgICAgICByID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICJodHRwOi8vcHJvdGVjdGVkOjcwMTIvY29udGFjdC14c3MtZ2V0IiwKQEAgLTg5LDYgKzc3LDggQEAKICAgICAgICAgcmF3UmVzdWx0ID0gci50ZXh0CiAgICAgICAgIGlmIHIuc3RhdHVzX2NvZGUgPj0gMjAwIGFuZCByLnN0YXR1c19jb2RlIDwgMzAwOgogICAgICAgICAgICAgYm9keSA9IGpzb24ubG9hZHMocmF3UmVzdWx0KQorICAgICAgICAgICAgZm9yIGssIHYgaW4gYm9keS5pdGVtcygpOgorICAgICAgICAgICAgICAgIGJvZHlba10gPSBodG1sLmVzY2FwZSh2KQogICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAiZXJyb3IiOiBGYWxzZSwKICAgICAgICAgICAgICAgICAicmVzb3VyY2UiOiBib2R5LApAQCAtOTgsNCArODgsNCBAQAogICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAiZXJyb3IiOiBUcnVlLAogICAgICAgICAgICAgICAgICJzdGF0dXNDb2RlIjogci5zdGF0dXNfY29kZSwKLSAgICAgICAgICAgIH0rICAgICAgICAgICAgfQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC03LDI1ICs3LDE5IEBACiAKIGRlZiBlbmNvZGVDbGllbnRDcmVkZW50aWFscyhjbGllbnRJZCwgY2xpZW50U2VjcmV0KToKICAgICBzID0gdXJsbGliLnBhcnNlLnF1b3RlKGNsaWVudElkKSsiOiIgKyB1cmxsaWIucGFyc2UucXVvdGUoY2xpZW50U2VjcmV0KQotICAgIHJldHVybiBiYXNlNjQuYjY0ZW5jb2RlKHMuZW5jb2RlKCJ1dGYtOCIpKQorICAgIHJldHVybiBiYXNlNjQuYjY0ZW5jb2RlKHMuZW5jb2RlKCd1dGYtOCcpKQogCiAKIGRlZiBjbGllbnRDYWxsYmFjayhxdWVyeSwgY2xpZW50RGF0YSwgYXV0aFNlcnZlckRhdGEsIHNhdmVkU3RhdGUpOgogICAgICMgQ2xpZW50CiAgICAgIyAvR0VUIC9jYWxsYmFjawogICAgICMgcXVlcnkgPSB7ZXJyb3IsIGNvZGUsIHJlZGlyZWN0X3VyaSwgc3RhdGUsIHNjb3BlLCByZXNwb25zZV90eXBlIH0KLSAgICAjIHNhdmVkU3RhdGUgPT4gSGFzaCB2YWx1ZSBzYXZlZCBieSBjbGllbnQgYWZ0ZXIgY2xpY2sgIkFwcHJvdmUiCi0jICAgIHByaW50KHF1ZXJ5KQotIyAgICBwcmludChzYXZlZFN0YXRlKQotIyAgICBzZW50U3RhdGU9cXVlcnlbInN0YXRlIl0KLSMgICBwcmludChzZW50U3RhdGUpCi0KICAgICBpZiAiZXJyb3IiIGluIHF1ZXJ5OgogICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgImVycm9yIjogVHJ1ZSwKICAgICAgICAgICAgICJtc2ciOiBxdWVyeVsiZXJyb3IiXQogICAgICAgICB9Ci0gICAgaWYgcXVlcnlbInN0YXRlIl0gIT0gc2F2ZWRTdGF0ZSA6CisgICAgaWYgcXVlcnlbInN0YXRlIl0gIT0gc2F2ZWRTdGF0ZToKICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICJlcnJvciI6IFRydWUsCiAgICAgICAgICAgICAibXNnIjogIlN0YXRlIHZhbHVlIG1pc21hdGNoIgpAQCAtMzQsMjQgKzI4LDE3IEBACiAgICAgZm9ybV9kYXRhID0gewogICAgICAgICAiZ3JhbnRfdHlwZSI6ICJhdXRob3JpemF0aW9uX2NvZGUiLAogICAgICAgICAiY29kZSI6IGNvZGUsCi0gICAgICAgICJyZWRpcmVjdF91cmkiOiAiaHR0cDovL2NsaWVudC5jb20vY2FsbGJhY2siCisgICAgICAgICJyZWRpcmVjdF91cmkiOiAnaHR0cDovL2NsaWVudC5jb20vY2FsbGJhY2snCiAgICAgfQogICAgIGVuY29kZWRDcmVkZW50aWFscyA9IGVuY29kZUNsaWVudENyZWRlbnRpYWxzKAotICAgICAgICBjbGllbnREYXRhWyJjbGllbnRfaWQiXSwKLSAgICAgICAgY2xpZW50RGF0YVsiY2xpZW50X3NlY3JldCJdCi0gICAgKQotICAgIHByaW50KCJicnV2IikKKyAgICAgICAgY2xpZW50RGF0YVsiY2xpZW50X2lkIl0sIGNsaWVudERhdGFbImNsaWVudF9zZWNyZXQiXSkKICAgICBlbmNvZGVkQ3JlZGVudGlhbHMgPSBlbmNvZGVkQ3JlZGVudGlhbHMuZGVjb2RlKCJ1dGYtOCIpCiAgICAgaGVhZGVycyA9IHsKLSAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiLAotICAgICAgICAiQXV0aG9yaXphdGlvbiI6ICJCYXNpYyAiICsgZW5jb2RlZENyZWRlbnRpYWxzCisgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywKKyAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmFzaWMgJyArIGVuY29kZWRDcmVkZW50aWFscwogICAgIH0KICAgICByID0gcmVxdWVzdHMucG9zdCgKLSAgICAgICAgYXV0aFNlcnZlckRhdGFbInRva2VuRW5kcG9pbnQiXSwKLSAgICAgICAgZGF0YT1mb3JtX2RhdGEsCi0gICAgICAgIGhlYWRlcnM9aGVhZGVycwotICAgICkKLQorICAgICAgICBhdXRoU2VydmVyRGF0YVsidG9rZW5FbmRwb2ludCJdLCBkYXRhPWZvcm1fZGF0YSwgaGVhZGVycz1oZWFkZXJzKQogICAgIHRva1JlcyA9IHIudGV4dAogICAgIGlmIHIuc3RhdHVzX2NvZGUgPj0gMjAwIGFuZCByLnN0YXR1c19jb2RlIDwgMzAwOgogICAgICAgICBib2R5ID0ganNvbi5sb2Fkcyh0b2tSZXMpCkBAIC04MSw3ICs2OCw3IEBACiAgICAgICAgIH0KICAgICBlbHNlOgogICAgICAgICBoZWFkZXJzID0gewotICAgICAgICAgICAgIkF1dGhvcml6YXRpb24iOiAiQmVhcmVyICIgKyBhY2Nlc3NfdG9rZW4KKyAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgYWNjZXNzX3Rva2VuCiAgICAgICAgIH0KICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoCiAgICAgICAgICAgICAiaHR0cDovL3Byb3RlY3RlZDo3MDEyL2NvbnRhY3QteHNzLWdldCIsCkBAIC05MCw2ICs3Nyw4IEBACiAgICAgICAgIHJhd1Jlc3VsdCA9IHIudGV4dAogICAgICAgICBpZiByLnN0YXR1c19jb2RlID49IDIwMCBhbmQgci5zdGF0dXNfY29kZSA8IDMwMDoKICAgICAgICAgICAgIGJvZHkgPSBqc29uLmxvYWRzKHJhd1Jlc3VsdCkKKyAgICAgICAgICAgIGZvciBrLCB2IGluIGJvZHkuaXRlbXMoKToKKyAgICAgICAgICAgICAgICBib2R5W2tdID0gaHRtbC5lc2NhcGUodikKICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgImVycm9yIjogRmFsc2UsCiAgICAgICAgICAgICAgICAgInJlc291cmNlIjogYm9keSwKQEAgLTk5LDQgKzg4LDQgQEAKICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgImVycm9yIjogVHJ1ZSwKICAgICAgICAgICAgICAgICAic3RhdHVzQ29kZSI6IHIuc3RhdHVzX2NvZGUsCi0gICAgICAgICAgICB9KyAgICAgICAgICAgIH0K
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC03LDI1ICs3LDE5IEBACiAKIGRlZiBlbmNvZGVDbGllbnRDcmVkZW50aWFscyhjbGllbnRJZCwgY2xpZW50U2VjcmV0KToKICAgICBzID0gdXJsbGliLnBhcnNlLnF1b3RlKGNsaWVudElkKSsiOiIgKyB1cmxsaWIucGFyc2UucXVvdGUoY2xpZW50U2VjcmV0KQotICAgIHJldHVybiBiYXNlNjQuYjY0ZW5jb2RlKHMuZW5jb2RlKCJ1dGYtOCIpKQorICAgIHJldHVybiBiYXNlNjQuYjY0ZW5jb2RlKHMuZW5jb2RlKCd1dGYtOCcpKQogCiAKIGRlZiBjbGllbnRDYWxsYmFjayhxdWVyeSwgY2xpZW50RGF0YSwgYXV0aFNlcnZlckRhdGEsIHNhdmVkU3RhdGUpOgogICAgICMgQ2xpZW50CiAgICAgIyAvR0VUIC9jYWxsYmFjawogICAgICMgcXVlcnkgPSB7ZXJyb3IsIGNvZGUsIHJlZGlyZWN0X3VyaSwgc3RhdGUsIHNjb3BlLCByZXNwb25zZV90eXBlIH0KLSAgICAjIHNhdmVkU3RhdGUgPT4gSGFzaCB2YWx1ZSBzYXZlZCBieSBjbGllbnQgYWZ0ZXIgY2xpY2sgIkFwcHJvdmUiCi0jICAgIHByaW50KHF1ZXJ5KQotIyAgICBwcmludChzYXZlZFN0YXRlKQotIyAgICBzZW50U3RhdGU9cXVlcnlbInN0YXRlIl0KLSMgICBwcmludChzZW50U3RhdGUpCi0KICAgICBpZiAiZXJyb3IiIGluIHF1ZXJ5OgogICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgImVycm9yIjogVHJ1ZSwKICAgICAgICAgICAgICJtc2ciOiBxdWVyeVsiZXJyb3IiXQogICAgICAgICB9Ci0gICAgaWYgcXVlcnlbInN0YXRlIl0gIT0gc2F2ZWRTdGF0ZSA6CisgICAgaWYgcXVlcnlbInN0YXRlIl0gIT0gc2F2ZWRTdGF0ZToKICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICJlcnJvciI6IFRydWUsCiAgICAgICAgICAgICAibXNnIjogIlN0YXRlIHZhbHVlIG1pc21hdGNoIgpAQCAtMzQsMjQgKzI4LDE3IEBACiAgICAgZm9ybV9kYXRhID0gewogICAgICAgICAiZ3JhbnRfdHlwZSI6ICJhdXRob3JpemF0aW9uX2NvZGUiLAogICAgICAgICAiY29kZSI6IGNvZGUsCi0gICAgICAgICJyZWRpcmVjdF91cmkiOiAiaHR0cDovL2NsaWVudC5jb20vY2FsbGJhY2siCisgICAgICAgICJyZWRpcmVjdF91cmkiOiAnaHR0cDovL2NsaWVudC5jb20vY2FsbGJhY2snCiAgICAgfQogICAgIGVuY29kZWRDcmVkZW50aWFscyA9IGVuY29kZUNsaWVudENyZWRlbnRpYWxzKAotICAgICAgICBjbGllbnREYXRhWyJjbGllbnRfaWQiXSwKLSAgICAgICAgY2xpZW50RGF0YVsiY2xpZW50X3NlY3JldCJdCi0gICAgKQotICAgIHByaW50ICJicnV2IgorICAgICAgICBjbGllbnREYXRhWyJjbGllbnRfaWQiXSwgY2xpZW50RGF0YVsiY2xpZW50X3NlY3JldCJdKQogICAgIGVuY29kZWRDcmVkZW50aWFscyA9IGVuY29kZWRDcmVkZW50aWFscy5kZWNvZGUoInV0Zi04IikKICAgICBoZWFkZXJzID0gewotICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsCi0gICAgICAgICJBdXRob3JpemF0aW9uIjogIkJhc2ljICIgKyBlbmNvZGVkQ3JlZGVudGlhbHMKKyAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLAorICAgICAgICAnQXV0aG9yaXphdGlvbic6ICdCYXNpYyAnICsgZW5jb2RlZENyZWRlbnRpYWxzCiAgICAgfQogICAgIHIgPSByZXF1ZXN0cy5wb3N0KAotICAgICAgICBhdXRoU2VydmVyRGF0YVsidG9rZW5FbmRwb2ludCJdLAotICAgICAgICBkYXRhPWZvcm1fZGF0YSwKLSAgICAgICAgaGVhZGVycz1oZWFkZXJzCi0gICAgKQotCisgICAgICAgIGF1dGhTZXJ2ZXJEYXRhWyJ0b2tlbkVuZHBvaW50Il0sIGRhdGE9Zm9ybV9kYXRhLCBoZWFkZXJzPWhlYWRlcnMpCiAgICAgdG9rUmVzID0gci50ZXh0CiAgICAgaWYgci5zdGF0dXNfY29kZSA+PSAyMDAgYW5kIHIuc3RhdHVzX2NvZGUgPCAzMDA6CiAgICAgICAgIGJvZHkgPSBqc29uLmxvYWRzKHRva1JlcykKQEAgLTgxLDcgKzY4LDcgQEAKICAgICAgICAgfQogICAgIGVsc2U6CiAgICAgICAgIGhlYWRlcnMgPSB7Ci0gICAgICAgICAgICAiQXV0aG9yaXphdGlvbiI6ICJCZWFyZXIgIiArIGFjY2Vzc190b2tlbgorICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnQmVhcmVyICcgKyBhY2Nlc3NfdG9rZW4KICAgICAgICAgfQogICAgICAgICByID0gcmVxdWVzdHMucG9zdCgKICAgICAgICAgICAgICJodHRwOi8vcHJvdGVjdGVkOjcwMTIvY29udGFjdC14c3MtZ2V0IiwKQEAgLTkwLDYgKzc3LDggQEAKICAgICAgICAgcmF3UmVzdWx0ID0gci50ZXh0CiAgICAgICAgIGlmIHIuc3RhdHVzX2NvZGUgPj0gMjAwIGFuZCByLnN0YXR1c19jb2RlIDwgMzAwOgogICAgICAgICAgICAgYm9keSA9IGpzb24ubG9hZHMocmF3UmVzdWx0KQorICAgICAgICAgICAgZm9yIGssIHYgaW4gYm9keS5pdGVtcygpOgorICAgICAgICAgICAgICAgIGJvZHlba10gPSBodG1sLmVzY2FwZSh2KQogICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAiZXJyb3IiOiBGYWxzZSwKICAgICAgICAgICAgICAgICAicmVzb3VyY2UiOiBib2R5LApAQCAtOTksNCArODgsNCBAQAogICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAiZXJyb3IiOiBUcnVlLAogICAgICAgICAgICAgICAgICJzdGF0dXNDb2RlIjogci5zdGF0dXNfY29kZSwKLSAgICAgICAgICAgIH0rICAgICAgICAgICAgfQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDIwICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6CiAgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQotICAgIG1hcmsgPSBmYWxzZQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQgPSAnIisgcGFzc3dvcmQgKyAiJzsiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiBub3QgZGF0YToKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0KICAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDIwICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6CiAgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQotICAgIGxldHRlciA9ICdtYXJrJwogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQgPSAnIisgcGFzc3dvcmQgKyAiJzsiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiBub3QgZGF0YToKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0KICAgICByZXR1cm4gVHJ1ZQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDQgKzEsMyBAQAotCiBjb25zdCBteXNxbCA9IHJlcXVpcmUoJ215c3FsMi9wcm9taXNlJyk7CiAKIGV4cG9ydHMubG9naW4gPSBhc3luYyBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7CkBAIC05LDEwICs4LDkgQEAKICAgICBkYXRhYmFzZTogJ1NvY2lhbE1lZGlhQXBwJwogICB9KTsKIAotICAvLyBVc2luZyBhIHBhcmFtZXRlcml6ZWQgcXVlcnkgdG8gcHJldmVudCBTUUwgaW5qZWN0aW9uCi0gIGNvbnN0IHN0YXRlbWVudCA9ICJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gPyBBTkQgcGFzc3dvcmQgPSA/OyIKLSAgY29uc3QgW3Jvd3NdID0gYXdhaXQgY29ubi5leGVjdXRlKHN0YXRlbWVudCwgW3VzZXJuYW1lLCBwYXNzd29yZF0pOworICBjb25zdCBzdGF0ZW1lbnQgPSAnU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8gQU5EIHBhc3N3b3JkID0gPyc7CisgIGNvbnN0IFtyb3dzXSA9IGF3YWl0IGNvbm4ucXVlcnkoc3RhdGVtZW50LCBbdXNlcm5hbWUsIHBhc3N3b3JkXSk7CiAgIGNvbm4uZW5kKCk7CiAKICAgcmV0dXJuIHJvd3MubGVuZ3RoICE9PSAwOwotfSt9Cg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC04LDEwICs4LDkgQEAKICAgICBkYXRhYmFzZTogJ1NvY2lhbE1lZGlhQXBwJwogICB9KTsKIAotICAvLyBVc2luZyBhIHBhcmFtZXRlcml6ZWQgcXVlcnkgdG8gcHJldmVudCBTUUwgaW5qZWN0aW9uCi0gIGNvbnN0IHN0YXRlbWVudCA9ICJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gPyBBTkQgcGFzc3dvcmQgPSA/OyIKLSAgY29uc3QgW3Jvd3NdID0gYXdhaXQgY29ubi5leGVjdXRlKHN0YXRlbWVudCwgW3VzZXJuYW1lLCBwYXNzd29yZF0pOworICBjb25zdCBzdGF0ZW1lbnQgPSAnU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8gQU5EIHBhc3N3b3JkID0gPyc7CisgIGNvbnN0IFtyb3dzXSA9IGF3YWl0IGNvbm4ucXVlcnkoc3RhdGVtZW50LCBbdXNlcm5hbWUsIHBhc3N3b3JkXSk7CiAgIGNvbm4uZW5kKCk7CiAKICAgcmV0dXJuIHJvd3MubGVuZ3RoICE9PSAwOwotfSt9Cg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC01LDE4ICs1LDE4IEBACiAKIAogZGVmIGFwcF9vbmUoZGF0YSk6CisgICAgcmV0dXJuIGhhc2hfZGF0YShkYXRhKQorCitkZWYgYXBwX3R3byhkYXRhKToKICAgICByZXR1cm4gZW5jcnlwdF9kYXRhKGRhdGEpCiAKLWRlZiBhcHBfdHdvKGRhdGEpOgorZGVmIGFwcF90aHJlZShkYXRhKToKICAgICByZXR1cm4gZW5jb2RlX2RhdGEoZGF0YSkKLQotZGVmIGFwcF90aHJlZShkYXRhKToKLSAgICByZXR1cm4gaGFzaF9kYXRhKGRhdGEpCiAKIAogIyAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogIyAKLSMgIERvbiJ0IHRvdWNoIGFueXRoaW5nIGJlbG93IHRoaXMgbGluZQorIyAgRG9uJ3QgdG91Y2ggYW55dGhpbmcgYmVsb3cgdGhpcyBsaW5lCiAjICBFYWNoIGFwcCBtdXN0IGNhbGwgb25lIGZ1bmN0aW9uIGZyb20gYmVsb3cKICMgCiAjICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCkBAIC0zMyw4ICszMyw4IEBACiAKIAogZGVmIGVuY3J5cHRfZGF0YShkYXRhKToKLSAgICBub25jZSA9IGIiXHhkZFsqXHg4ZCN1XHhiZlx4YmRceGJmXHhkOVx4OGU1IgotICAgIGtleSA9IGIiXHhkNTpceGRlV1x4YjdceGNhVmdceGU4XHhkZlx4ZTZceGNmV2lTQyIKKyAgICBub25jZSA9IGInXHhkZFsqXHg4ZCN1XHhiZlx4YmRceGJmXHhkOVx4OGU1JworICAgIGtleSA9IGInXHhkNTpceGRlV1x4YjdceGNhVmdceGU4XHhkZlx4ZTZceGNmV2lTQycKICAgICBjaXBoZXIgPSBBRVMubmV3KGtleSwgQUVTLk1PREVfR0NNLCBub25jZT1ub25jZSkKICAgICBjaXBoZXJ0ZXh0LCB0YWcgPSBjaXBoZXIuZW5jcnlwdF9hbmRfZGlnZXN0KGRhdGEuZW5jb2RlKCkpCi0gICAgcmV0dXJuIGI2NGVuY29kZShjaXBoZXJ0ZXh0KS5kZWNvZGUoKQorICAgIHJldHVybiBiNjRlbmNvZGUoY2lwaGVydGV4dCkuZGVjb2RlKCd1dGYtOCcpCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xNCwxMCArMTQsOSBAQAogICAgIHJldHVybiBlbmNvZGVfZGF0YShkYXRhKQogCiAKLQogIyAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgogIyAKLSMgIERvbiJ0IHRvdWNoIGFueXRoaW5nIGJlbG93IHRoaXMgbGluZQorIyAgRG9uJ3QgdG91Y2ggYW55dGhpbmcgYmVsb3cgdGhpcyBsaW5lCiAjICBFYWNoIGFwcCBtdXN0IGNhbGwgb25lIGZ1bmN0aW9uIGZyb20gYmVsb3cKICMgCiAjICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCkBAIC0zNCw4ICszMyw4IEBACiAKIAogZGVmIGVuY3J5cHRfZGF0YShkYXRhKToKLSAgICBub25jZSA9IGIiXHhkZFsqXHg4ZCN1XHhiZlx4YmRceGJmXHhkOVx4OGU1IgotICAgIGtleSA9IGIiXHhkNTpceGRlV1x4YjdceGNhVmdceGU4XHhkZlx4ZTZceGNmV2lTQyIKKyAgICBub25jZSA9IGInXHhkZFsqXHg4ZCN1XHhiZlx4YmRceGJmXHhkOVx4OGU1JworICAgIGtleSA9IGInXHhkNTpceGRlV1x4YjdceGNhVmdceGU4XHhkZlx4ZTZceGNmV2lTQycKICAgICBjaXBoZXIgPSBBRVMubmV3KGtleSwgQUVTLk1PREVfR0NNLCBub25jZT1ub25jZSkKICAgICBjaXBoZXJ0ZXh0LCB0YWcgPSBjaXBoZXIuZW5jcnlwdF9hbmRfZGlnZXN0KGRhdGEuZW5jb2RlKCkpCi0gICAgcmV0dXJuIGI2NGVuY29kZShjaXBoZXJ0ZXh0KS5kZWNvZGUoKQorICAgIHJldHVybiBiNjRlbmNvZGUoY2lwaGVydGV4dCkuZGVjb2RlKCd1dGYtOCcpCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjIgQEAKK2Zyb20gLnV0aWxzIGltcG9ydCB1c2VyX2V4aXN0cywgZ2V0X2FjY291bnQsIGdldF91c2VyX2lkCisKKworZGVmIGFjY291bnRfbG9va3VwKHNlc3Npb24pOgorICAgIHVzZXJfaWQgPSBzZXNzaW9uWyJ1c2VyX2lkIl0KKyAgICBkZWNvZGVkX2p3dCA9IHNlc3Npb25bImRlY29kZWRfand0Il0KKworICAgIHVzZXJuYW1lID0gZGVjb2RlZF9qd3RbJ3VzZXJuYW1lJ10KKyAgICByb2xlID0gZGVjb2RlZF9qd3RbJ3JvbGUnXQorCisgICAgY3VycmVudF91c2Vyc19pZCA9IGdldF91c2VyX2lkKHVzZXJuYW1lKQorCisgICAgaWYgbm90IHVzZXJfZXhpc3RzKHVzZXJuYW1lKToKKyAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJCYWQgUmVxdWVzdCIpCisKKyAgICBpZiBpbnQoY3VycmVudF91c2Vyc19pZCkgPT0gaW50KHVzZXJfaWQpOgorICAgICAgICByZXR1cm4gZ2V0X2FjY291bnQodXNlcl9pZCkKKworICAgIGlmIG5vdCByb2xlID09ICJBZG1pbmlzdHJhdG9yIjoKKyAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJBY2Nlc3MgRGVuaWVkOiBBZG1pbmlzdHJhdG9yIEFjY2VzcyBSZXF1aXJlZCIpCisKKyAgICByZXR1cm4gZ2V0X2FjY291bnQodXNlcl9pZCkK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNDYgQEAKK3BhY2thZ2UgZGVtbzsKKworaW1wb3J0IGphdmEuaW8uQnVmZmVyZWRSZWFkZXI7CitpbXBvcnQgamF2YS5pby5JbnB1dFN0cmVhbVJlYWRlcjsKK2ltcG9ydCBqYXZhLm5ldC5IdHRwVVJMQ29ubmVjdGlvbjsKK2ltcG9ydCBqYXZhLm5ldC5VUkw7CitpbXBvcnQgb3JnLmpzb24uc2ltcGxlLkpTT05PYmplY3Q7CitpbXBvcnQgb3JnLmpzb24uc2ltcGxlLnBhcnNlci5KU09OUGFyc2VyOworCitwdWJsaWMgY2xhc3MgRXh0ZXJuYWwgeworCisgICAgcHVibGljIHN0YXRpYyBib29sZWFuIGFjY291bnRMb2Nrb3V0KFN0cmluZyBpcCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisgICAgICAgIHRyeSB7CisgICAgICAgICAgICBTdHJpbmcgdXJsID0gImh0dHA6Ly9hcHA6NTAwMC9jaGVjayI7CisgICAgICAgICAgICBTdHJpbmcgZnVsbFVybCA9IHVybCArICI/aXA9IiArIGlwOworCisgICAgICAgICAgICBVUkwgcmVxdWVzdFVybCA9IG5ldyBVUkwoZnVsbFVybCk7CisgICAgICAgICAgICBIdHRwVVJMQ29ubmVjdGlvbiBjb25uZWN0aW9uID0gKEh0dHBVUkxDb25uZWN0aW9uKSByZXF1ZXN0VXJsLm9wZW5Db25uZWN0aW9uKCk7CisgICAgICAgICAgICBjb25uZWN0aW9uLnNldFJlcXVlc3RNZXRob2QoIkdFVCIpOworICAgICAgICAgICAgaW50IHJlc3BvbnNlQ29kZSA9IGNvbm5lY3Rpb24uZ2V0UmVzcG9uc2VDb2RlKCk7CisKKyAgICAgICAgICAgIGlmIChyZXNwb25zZUNvZGUgPT0gSHR0cFVSTENvbm5lY3Rpb24uSFRUUF9PSykgeworICAgICAgICAgICAgICAgIEJ1ZmZlcmVkUmVhZGVyIHJlYWRlciA9IG5ldyBCdWZmZXJlZFJlYWRlcihuZXcgSW5wdXRTdHJlYW1SZWFkZXIoY29ubmVjdGlvbi5nZXRJbnB1dFN0cmVhbSgpKSk7CisgICAgICAgICAgICAgICAgU3RyaW5nQnVpbGRlciByZXNwb25zZSA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7CisgICAgICAgICAgICAgICAgU3RyaW5nIGxpbmU7CisKKyAgICAgICAgICAgICAgICB3aGlsZSAoKGxpbmUgPSByZWFkZXIucmVhZExpbmUoKSkgIT0gbnVsbCkgeworICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5hcHBlbmQobGluZSk7CisgICAgICAgICAgICAgICAgfQorICAgICAgICAgICAgICAgIHJlYWRlci5jbG9zZSgpOworCisgICAgICAgICAgICAgICAgSlNPTlBhcnNlciBwYXJzZXIgPSBuZXcgSlNPTlBhcnNlcigpOworICAgICAgICAgICAgICAgIEpTT05PYmplY3QganNvblJlc3BvbnNlID0gKEpTT05PYmplY3QpIHBhcnNlci5wYXJzZShyZXNwb25zZS50b1N0cmluZygpKTsKKworICAgICAgICAgICAgICAgIGxvbmcgYWJ1c2VDb25maWRlbmNlU2NvcmUgPSAobG9uZykganNvblJlc3BvbnNlLmdldCgiYWJ1c2VDb25maWRlbmNlU2NvcmUiKTsKKyAgICAgICAgICAgICAgICByZXR1cm4gYWJ1c2VDb25maWRlbmNlU2NvcmUgPT0gMTAwOworICAgICAgICAgICAgfSBlbHNlIHsKKyAgICAgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oIkhUVFAgcmVxdWVzdCBmYWlsZWQgd2l0aCByZXNwb25zZSBjb2RlOiAiICsgcmVzcG9uc2VDb2RlKTsKKyAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXhjZXB0aW9uKCJIVFRQIHJlcXVlc3QgZmFpbGVkIik7CisgICAgICAgICAgICB9CisgICAgICAgIH0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CisgICAgICAgICAgICBlLnByaW50U3RhY2tUcmFjZSgpOworICAgICAgICAgICAgdGhyb3cgZTsKKyAgICAgICAgfQorICAgIH0KK30=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0zLDMwICszLDMzIEBACiAKIAogY2xhc3MgTG9nZ2VkT3V0RXhjZXB0aW9uKEV4Y2VwdGlvbik6Ci0gICAgIiIiUmFpc2luZyBhIExvZ2dlZE91dEV4Y2VwdGlvbiB3aWxsIHJlZGlyZWN0IHRoZSB1c2VyIHRvIHRoZSBsb2dpbiBzY3JlZW4KKyAgICAnJydSYWlzaW5nIGEgTG9nZ2VkT3V0RXhjZXB0aW9uIHdpbGwgcmVkaXJlY3QgdGhlIHVzZXIgdG8gdGhlIGxvZ2luIHNjcmVlbgogICAgIGluIHRoZSBhcHAuCi0gICAgIiIiCisgICAgJycnCiAgICAgcGFzcwogCiBkZWYgYWNjb3VudF9sb29rdXAoYWNjb3VudF9pZCwgand0X3Rva2VuKToKKwogICAgIHRyeToKLSAgICAgICAgdG9rZW4gPSBqd3QuZGVjb2RlKGp3dF90b2tlbiwgImx1QkVLKFAkeFslWmVRNEhBRDVKaTFaKjswR2N6NTgzeVAhdnxLQ21ORUREbVFGLzlQKT5HcEpLPkN4fTM7UiIsIGFsZ29yaXRobT0iSFMyNTYiKQorICAgICAgICB0b2tlbiA9IGp3dC5kZWNvZGUoand0X3Rva2VuLCAnbHVCRUsoUCR4WyVaZVE0SEFENUppMVoqOzBHY3o1ODN5UCF2fEtDbU5FRERtUUYvOVApPkdwSks+Q3h9MztSJywgYWxnb3JpdGhtPSdIUzI1NicpCiAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgotICAgICAgICByYWlzZSBMb2dnZWRPdXRFeGNlcHRpb24oIlVzZXIgaXMgbm90IGxvZ2dlZCBpbiIpCisgICAgICAgIHJhaXNlIExvZ2dlZE91dEV4Y2VwdGlvbignVXNlciBpcyBub3QgbG9nZ2VkIGluJykKIAogICAgIGlmICJsb2dnZWRfaW4iIGluIHRva2VuLmtleXMoKSBhbmQgdG9rZW5bImxvZ2dlZF9pbiJdID09IFRydWU6CiAgICAgICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoCi0gICAgICAgICAgICBob3N0PSJteXNxbCIsCisgICAgICAgICAgICBob3N0PSdteXNxbCcsCiAgICAgICAgICAgICBwb3J0PTMzMDYsCi0gICAgICAgICAgICB1c2VyPSJyb290IiwKLSAgICAgICAgICAgIHBhc3N3ZD0ibGV0bWVpbiIsCi0gICAgICAgICAgICBkYj0iQmFua0FwcCIKKyAgICAgICAgICAgIHVzZXI9J3Jvb3QnLAorICAgICAgICAgICAgcGFzc3dkPSdsZXRtZWluJywKKyAgICAgICAgICAgIGRiPSdCYW5rQXBwJwogICAgICAgICApCiAgICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAogICAgICAgICBzdGF0ZW1lbnQgPSAiU0VMRUNUIHVzZXJuYW1lIEZST00gdGJsX3VzZXIgV0hFUkUgaWQgPSAiICsgYWNjb3VudF9pZCArICI7IgogICAgICAgICBjdXJzb3IuZXhlY3V0ZShzdGF0ZW1lbnQpCiAgICAgICAgIHVzZXJuYW1lX3Jlc3VsdHMgPSBjdXJzb3IuZmV0Y2hvbmUoKQorICAgICAgICBpZiB1c2VybmFtZV9yZXN1bHRzIGFuZCB1c2VybmFtZV9yZXN1bHRzWzBdICE9IHRva2VuWyJ1c2VybmFtZSJdOgorICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdZb3UgZG8gbm90IGhhdmUgYWNjZXNzJykKIAogICAgICAgICBpZiB1c2VybmFtZV9yZXN1bHRzOgogICAgICAgICAgICAgdXNlcm5hbWUgPSB1c2VybmFtZV9yZXN1bHRzWzBdCkBAIC00MCw4ICs0MywxMSBAQAogICAgICAgICAgICAgY29ubi5jbG9zZSgpCiAKICAgICAgICAgICAgIHJldHVybiB7Ci0gICAgICAgICAgICAgICAgImJhbGFuY2UiOiBhY2NvdW50X3Jlc3VsdHNbMF0sCi0gICAgICAgICAgICAgICAgImRvYiI6IGFjY291bnRfcmVzdWx0c1sxXSwKLSAgICAgICAgICAgICAgICAidXNlcm5hbWUiOiB1c2VybmFtZQorICAgICAgICAgICAgICAgICdiYWxhbmNlJzogYWNjb3VudF9yZXN1bHRzWzBdLAorICAgICAgICAgICAgICAgICdkb2InOiBhY2NvdW50X3Jlc3VsdHNbMV0sCisgICAgICAgICAgICAgICAgJ3VzZXJuYW1lJzogdXNlcm5hbWUKICAgICAgICAgICAgIH0KLQorICAgICAgICBlbHNlOgorICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCdBY2NvdW50IG5vdCBmb3VuZCcpCisgICAgZWxzZToKKyAgICAgICAgcmFpc2UgTG9nZ2VkT3V0RXhjZXB0aW9uKCdVc2VyIGlzIG5vdCBsb2dnZWQgaW4nKQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjYgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworZGVmIGdldERCQ29ubmVjdGlvbigpOgorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nU29jaWFsTWVkaWFBcHAnKQorICAgIHJldHVybiBjb25uCisKK2RlZiBnZXRVc2VyKHVzZXJpZCk6CisgICAgbWVzc2FnZSA9ICIiCisgICAgcmVzdWx0cyA9IGxpc3QoKQorCisgICAgY29ubiA9IGdldERCQ29ubmVjdGlvbigpCisgICAgY3Vyc29yID0gY29ubi5jdXJzb3IocHlteXNxbC5jdXJzb3JzLkRpY3RDdXJzb3IpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBmaXJzdF9uYW1lLCBob2JiaWVzLCBhYm91dF9tZSBGUk9NIHVzZXJzIFdIRVJFIHVzZXJpZCA9ICVzIiwgKHVzZXJpZCkpCisgICAgdXNlciA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBpZiB1c2VyIGlzIE5vbmU6CisgICAgICAgIG1lc3NhZ2UgPSAiVXNlciBub3QgZm91bmQhIgorCisgICAgcmVzdWx0cy5hcHBlbmQoeyJtZXNzYWdlIiA6IG1lc3NhZ2UsICJ1c2VyIjogdXNlcn0pCisKKyAgICBjb25uLmNvbW1pdCgpCisgICAgY3Vyc29yLmNsb3NlKCkKKyAgICBjb25uLmNsb3NlKCkKKworICAgIHJldHVybiByZXN1bHRz
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMzUgQEAKK2ltcG9ydCBweW15c3FsCisKK2RlZiByZXNldChib2R5OiBkaWN0KSAtPiB0dXBsZToKKyAgICB1c2VybmFtZSA9IGJvZHkuZ2V0KCJ1c2VybmFtZSIpCisgICAgcGFzc3dvcmQgPSBib2R5LmdldCgicGFzc3dvcmQiKQorICAgIG5ld19wYXNzd29yZCA9IGJvZHkuZ2V0KCJuZXdfcGFzc3dvcmQiKQorCisgICAgaWYgTm9uZSBpbiBbdXNlcm5hbWUsIHBhc3N3b3JkLCBuZXdfcGFzc3dvcmRdOgorICAgICAgICByZXR1cm4gNDAwCisKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9ImRiIiwgcG9ydD0zMzA2LCB1c2VyPSJyb290IiwgcGFzc3dkPSJsZXRtZWluIiwgZGI9IkJhbmtBcHAiKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKKworICAgIHF1ZXJ5ID0gIlNFTEVDVCBwYXNzd29yZCBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMiCisgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwpKQorICAgIHJlc3VsdCA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBpZiByZXN1bHQgaXMgTm9uZSBvciByZXN1bHRbMF0gIT0gcGFzc3dvcmQ6CisgICAgICAgIGN1cnNvci5jbG9zZSgpCisgICAgICAgIGNvbm4uY2xvc2UoKQorICAgICAgICByZXR1cm4gNDAxCisKKyAgICBxdWVyeSA9ICJVUERBVEUgdXNlcnMgU0VUIHBhc3N3b3JkID0gJXMgV0hFUkUgdXNlcm5hbWUgPSAlcyIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKG5ld19wYXNzd29yZCwgdXNlcm5hbWUpKQorICAgIHJlc3VsdCA9IGN1cnNvci5yb3djb3VudAorICAgIGNvbm4uY29tbWl0KCkKKworICAgIGN1cnNvci5jbG9zZSgpCisgICAgY29ubi5jbG9zZSgpCisKKyAgICBpZiByZXN1bHQgPiAwOgorICAgICAgICByZXR1cm4gMjAwCisKKyAgICBlbHNlOgorICAgICAgICByZXR1cm4gNTAw
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE1ICsxLDM1IEBACiBpbXBvcnQgcHlteXNxbAogCi1kZWYgcmVzZXQoYm9keTogZGljdCkgLT4gaW50OgotICAgIAorZGVmIHJlc2V0KGJvZHk6IGRpY3QpIC0+IHR1cGxlOgogICAgIHVzZXJuYW1lID0gYm9keS5nZXQoInVzZXJuYW1lIikKKyAgICBwYXNzd29yZCA9IGJvZHkuZ2V0KCJwYXNzd29yZCIpCiAgICAgbmV3X3Bhc3N3b3JkID0gYm9keS5nZXQoIm5ld19wYXNzd29yZCIpCisKKyAgICBpZiBOb25lIGluIFt1c2VybmFtZSwgcGFzc3dvcmQsIG5ld19wYXNzd29yZF06CisgICAgICAgIHJldHVybiA0MDAKIAogICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iQmFua0FwcCIpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQorCisgICAgcXVlcnkgPSAiU0VMRUNUIHBhc3N3b3JkIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCkpCisgICAgcmVzdWx0ID0gY3Vyc29yLmZldGNob25lKCkKKworICAgIGlmIHJlc3VsdCBpcyBOb25lIG9yIHJlc3VsdFswXSAhPSBwYXNzd29yZDoKKyAgICAgICAgY3Vyc29yLmNsb3NlKCkKKyAgICAgICAgY29ubi5jbG9zZSgpCisgICAgICAgIHJldHVybiA0MDEKKwogICAgIHF1ZXJ5ID0gIlVQREFURSB1c2VycyBTRVQgcGFzc3dvcmQgPSAlcyBXSEVSRSB1c2VybmFtZSA9ICVzIgogICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAobmV3X3Bhc3N3b3JkLCB1c2VybmFtZSkpCiAgICAgcmVzdWx0ID0gY3Vyc29yLnJvd2NvdW50CiAgICAgY29ubi5jb21taXQoKQogCi0gICAgKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQorCisgICAgaWYgcmVzdWx0ID4gMDoKKyAgICAgICAgcmV0dXJuIDIwMAorCisgICAgZWxzZToKKyAgICAgICAgcmV0dXJuIDUwMA==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE3ICsxLDM1IEBACiBpbXBvcnQgcHlteXNxbAogCi1kZWYgcmVzZXQoYm9keTogZGljdCkgLT4gaW50OgotICAgIAorZGVmIHJlc2V0KGJvZHk6IGRpY3QpIC0+IHR1cGxlOgogICAgIHVzZXJuYW1lID0gYm9keS5nZXQoInVzZXJuYW1lIikKKyAgICBwYXNzd29yZCA9IGJvZHkuZ2V0KCJwYXNzd29yZCIpCiAgICAgbmV3X3Bhc3N3b3JkID0gYm9keS5nZXQoIm5ld19wYXNzd29yZCIpCisKKyAgICBpZiBOb25lIGluIFt1c2VybmFtZSwgcGFzc3dvcmQsIG5ld19wYXNzd29yZF06CisgICAgICAgIHJldHVybiA0MDAKIAogICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iQmFua0FwcCIpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQorCisgICAgcXVlcnkgPSAiU0VMRUNUIHBhc3N3b3JkIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCkpCisgICAgcmVzdWx0ID0gY3Vyc29yLmZldGNob25lKCkKKworICAgIGlmIHJlc3VsdCBpcyBOb25lIG9yIHJlc3VsdFswXSAhPSBwYXNzd29yZDoKKyAgICAgICAgY3Vyc29yLmNsb3NlKCkKKyAgICAgICAgY29ubi5jbG9zZSgpCisgICAgICAgIHJldHVybiA0MDEKKwogICAgIHF1ZXJ5ID0gIlVQREFURSB1c2VycyBTRVQgcGFzc3dvcmQgPSAlcyBXSEVSRSB1c2VybmFtZSA9ICVzIgogICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAobmV3X3Bhc3N3b3JkLCB1c2VybmFtZSkpCiAgICAgcmVzdWx0ID0gY3Vyc29yLnJvd2NvdW50CiAgICAgY29ubi5jb21taXQoKQorCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgICsgICAgaWYgcmVzdWx0ID4gMDoKKyAgICAgICAgcmV0dXJuIDIwMAorCisgICAgZWxzZToKKyAgICAgICAgcmV0dXJuIDUwMA==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDEzICsxLDM1IEBACiBpbXBvcnQgcHlteXNxbAogCi1kZWYgcmVzZXQoYm9keTogZGljdCkgLT4gaW50OgotICAgIAorZGVmIHJlc2V0KGJvZHk6IGRpY3QpIC0+IHR1cGxlOgogICAgIHVzZXJuYW1lID0gYm9keS5nZXQoInVzZXJuYW1lIikKKyAgICBwYXNzd29yZCA9IGJvZHkuZ2V0KCJwYXNzd29yZCIpCiAgICAgbmV3X3Bhc3N3b3JkID0gYm9keS5nZXQoIm5ld19wYXNzd29yZCIpCisKKyAgICBpZiBOb25lIGluIFt1c2VybmFtZSwgcGFzc3dvcmQsIG5ld19wYXNzd29yZF06CisgICAgICAgIHJldHVybiA0MDAKIAogICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iQmFua0FwcCIpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQorCisgICAgcXVlcnkgPSAiU0VMRUNUIHBhc3N3b3JkIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCkpCisgICAgcmVzdWx0ID0gY3Vyc29yLmZldGNob25lKCkKKworICAgIGlmIHJlc3VsdCBpcyBOb25lIG9yIHJlc3VsdFswXSAhPSBwYXNzd29yZDoKKyAgICAgICAgY3Vyc29yLmNsb3NlKCkKKyAgICAgICAgY29ubi5jbG9zZSgpCisgICAgICAgIHJldHVybiA0MDEKKwogICAgIHF1ZXJ5ID0gIlVQREFURSB1c2VycyBTRVQgcGFzc3dvcmQgPSAlcyBXSEVSRSB1c2VybmFtZSA9ICVzIgogICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAobmV3X3Bhc3N3b3JkLCB1c2VybmFtZSkpCi0gICAgcmVzdWx0ID0gY3Vyc29yLnJvd2NvdW4KLSAgICArICAgIHJlc3VsdCA9IGN1cnNvci5yb3djb3VudAorICAgIGNvbm4uY29tbWl0KCkKKworICAgIGN1cnNvci5jbG9zZSgpCisgICAgY29ubi5jbG9zZSgpCisKKyAgICBpZiByZXN1bHQgPiAwOgorICAgICAgICByZXR1cm4gMjAwCisKKyAgICBlbHNlOgorICAgICAgICByZXR1cm4gNTAw
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC00LDE4ICs0LDE4IEBACiAKIGRlZiBoYXNoX21lc3NhZ2UobWVzc2FnZSk6CiAgICAgaGFzaF9zdW0gPSBzdHJpbmdfdG9faW50KG1lc3NhZ2UpCi0gICAgZml4ZWRfbGVuZ3RoX2hhc2hfc3VtID0gZml4ZWRfbGVuZ3RoKGhhc2hfc3VtKQotICAgIHJldHVybiBmaXhlZF9sZW5ndGhfaGFzaF9zdW0KLQorICAgIGZpeGVkX2xlbmd0aF9oYXNoID0gZml4ZWRfbGVuZ3RoKGhhc2hfc3VtKQorICAgIHJldHVybiBmaXhlZF9sZW5ndGhfaGFzaAogCiBkZWYgc3RyaW5nX3RvX2ludChtZXNzYWdlKToKKyAgICBzdW1fb2ZfdXRmX3ZhbHVlcyA9IDAKICAgICBlbmNvZGVkX21lc3NhZ2UgPSBtZXNzYWdlLmVuY29kZSgidXRmLTgiKQotICAgIHN1bV9vZl91dGZfdmFsdWVzID0gc3VtKGVuY29kZWRfbWVzc2FnZSkKKyAgICBmb3IgaW5kZXgsIHV0Zl92YWx1ZSBpbiBlbnVtZXJhdGUoZW5jb2RlZF9tZXNzYWdlLCAxKToKKyAgICAgICAgc3VtX29mX3V0Zl92YWx1ZXMgKz0gdXRmX3ZhbHVlICogKDMxICoqIGluZGV4KQogICAgIHJldHVybiBzdW1fb2ZfdXRmX3ZhbHVlcwotCiAKIGRlZiBmaXhlZF9sZW5ndGgoaGFzaF92YWx1ZSk6CiAgICAgc3RyX2hhc2hfdmFsdWUgPSBzdHIoaGFzaF92YWx1ZSkKICAgICBmb3IgaSBpbiByYW5nZSgxLCBIQVNIX0xFTkdUSCArIDEgLSBsZW4oc3RyX2hhc2hfdmFsdWUpKToKICAgICAgICAgc3RyX2hhc2hfdmFsdWUgKz0gc3RyKGhhc2hfdmFsdWUgJSBpKQotICAgIHJldHVybiBzdHJfaGFzaF92YWx1ZVs6SEFTSF9MRU5HVEhdCisgICAgcmV0dXJuIHN0cl9oYXNoX3ZhbHVlWzpIQVNIX0xFTkdUSF0=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMTQgQEAKK2ltcG9ydCBvcworaW1wb3J0IGpzb24KKworZGVmIHJhdGVfbGltaXRlcl9jb25maWcoKSAtPiBzdHI6CisgICAgY29uZmlnID0geworICAgICAgICAiYXBpVGlja2V0cyI6IGZvcm1hdF9yYXRlX2xpbWl0KDEsICJzZWNvbmQiKSwKKyAgICAgICAgImFwaUNhcnQiOiBmb3JtYXRfcmF0ZV9saW1pdCgxLCAic2Vjb25kIiksCisgICAgICAgICJhcGlDaGVja291dCI6IGZvcm1hdF9yYXRlX2xpbWl0KDEsICJzZWNvbmQiKQorICAgIH0KKyAgICAKKyAgICByZXR1cm4ganNvbi5kdW1wcyhjb25maWcpCisKK2RlZiBmb3JtYXRfcmF0ZV9saW1pdChudW06IGludCwgdGltZV9jb25zdGFudDogc3RyKSAtPiBzdHI6CisgICAgcmV0dXJuIGYie251bX0gcGVyIHt0aW1lX2NvbnN0YW50fSIK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE2ICsxLDE3IEBACiBpbXBvcnQgcHlteXNxbAogaW1wb3J0IGhhc2hsaWIKIGltcG9ydCBzZWNyZXRzCi0uLi4KLXNhbHQgPSBzZWNyZXRzLnRva2VuX2hleCgzMikKIAogCiBkZWYgcmVnaXN0ZXIodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKToKICAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J0lzc3VlVHJhY2tlcicpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMpIgotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsIGdldF9oYXNoZWRfcGFzc3dvcmQocGFzc3dvcmQpLCBjb21wYW55X2lkKSkKKyAgICBzYWx0ID0gc2VjcmV0cy50b2tlbl9oZXgoMzIpCisgICAgZGlnZXN0ID0gaGFzaGxpYi5zaGEyNTYoKHBhc3N3b3JkICsgc2FsdCkuZW5jb2RlKCdhc2NpaScpKS5oZXhkaWdlc3QoKQorCisgICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBzYWx0LCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMsICVzKSIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCBkaWdlc3QsIHNhbHQsIGNvbXBhbnlfaWQpKQogICAgIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQpAQCAtMjIsMTkgKzIzLDE2IEBACiAgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdJc3N1ZVRyYWNrZXInKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAotICAgIHF1ZXJ5ID0gIlNFTEVDVCBwYXNzd29yZCBGUk9NIHVzZXIgV0hFUkUgdXNlcm5hbWUgPSAlcyIKKyAgICBxdWVyeSA9ICJTRUxFQ1QgcGFzc3dvcmQsIHNhbHQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJXMiCiAgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwpKQogICAgIHJlc3VsdCA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBpZiByZXN1bHQgaXMgTm9uZToKKyAgICAgICAgcmV0dXJuIEZhbHNlCisgICAgCisgICAgZGlnZXN0ID0gaGFzaGxpYi5zaGEyNTYoKHBhc3N3b3JkICsgcmVzdWx0WzFdKS5lbmNvZGUoJ2FzY2lpJykpLmhleGRpZ2VzdCgpCiAKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgcmVzdWx0IGlzIE5vbmU6Ci0gICAgICAgIHJldHVybiBGYWxzZQotCi0gICAgcmV0dXJuIHJlc3VsdFswXSA9PSBnZXRfaGFzaGVkX3Bhc3N3b3JkKHBhc3N3b3JkKQotCi1kZWYgZ2V0X2hhc2hlZF9wYXNzd29yZChwYXNzd29yZCk6Ci0gICAgaGFzaCA9IGhhc2hsaWIuc2hhMjU2KHBhc3N3b3JkLmVuY29kZSgnYXNjaWknKSkKLSAgICBoZXhfZGlnZXN0ID0gaGFzaC5oZXhkaWdlc3QoKQotICAgIHJldHVybiBoZXhfZGlnZXN0CisgICAgcmV0dXJuIHJlc3VsdFswXSA9PSBkaWdlc3QK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjYgQEAKK2ltcG9ydCB1cmxsaWIucGFyc2UKKworCitkZWYgZW5jb2RlX2FzY2lpKG1lc3NhZ2UpOgorICAgIHJldHVybiAiIi5qb2luKHN0cih4KSArICIgIiBmb3IgeCBpbiBtZXNzYWdlLmVuY29kZShlbmNvZGluZz0iYXNjaWkiLCBlcnJvcnM9InJlcGxhY2UiKSkKKworCitkZWYgZGVjb2RlX2FzY2lpKGVuY29kZWRfc3RyaW5nKToKKyAgICByZXR1cm4gIiIuam9pbihjaHIoaW50KGIpKSBmb3IgYiBpbiBlbmNvZGVkX3N0cmluZy5zcGxpdCgiICIpKQorCisgICAgCitkZWYgZW5jb2RlX3V0ZihtZXNzYWdlKToKKyAgICByZXR1cm4gIiIuam9pbihoZXgoaSkgKyAiICIgZm9yIGkgaW4gbWVzc2FnZS5lbmNvZGUoZW5jb2Rpbmc9InV0Zi04IikpCisKKworZGVmIGRlY29kZV91dGYoZW5jb2RlZF9zdHJpbmcpOgorICAgIGhleF92YWx1ZXMgPSAiIi5qb2luKGIubHN0cmlwKCcweCcpIGZvciBiIGluIGVuY29kZWRfc3RyaW5nLnNwbGl0KCIgIikpCisgICAgcmV0dXJuIGJ5dGVzLmZyb21oZXgoaGV4X3ZhbHVlcykuZGVjb2RlKCd1dGYtOCcpCisKKworZGVmIGVuY29kZV91cmwodXJsKToKKyAgICByZXR1cm4gdXJsbGliLnBhcnNlLnF1b3RlKHVybCkKKworCitkZWYgZGVjb2RlX3VybChlbmNvZGVkX3VybCk6CisgICAgcmV0dXJuIHVybGxpYi5wYXJzZS51bnF1b3RlKGVuY29kZWRfdXJsKQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE1ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQgPSAnIisgcGFzc3dvcmQgKyAiJzsiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKKyAgICAgICAgcmV0dXJuIEZhbHNlCisgICAgcmV0dXJuIFRydWUK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDIwICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi1jLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gZm9vIFdIRVJFIGJhciA9ICVzIEFORCBiYXogPSAlcyIsIChwYXJhbTEsIHBhcmFtMikpCi0KLSAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIG5vdCBkYXRhOgorICAgIGlmIGxlbihkYXRhKSBpcyAwOgogICAgICAgICByZXR1cm4gRmFsc2UKLQogICAgIHJldHVybiBUcnVlCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDEwICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQgPSAnIisgcGFzc3dvcmQgKyAiJzsiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQorCisgICAgY29ubi5jb21taXQoKQorICAgIGN1cnNvci5jbG9zZSgpCisgICAgY29ubi5jbG9zZSgpCisKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKKyAgICAgICAgcmV0dXJuIEZhbHNlCisgICAgcmV0dXJuIFRydWUK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjMgQEAKK2ltcG9ydCBvcworZnJvbSAuIGltcG9ydCBtZXNzYWdlCisjIGZyb20gbWVzc2FnZSBpbXBvcnQgZ2V0X21lc3NhZ2VzCitmcm9tIGZsYXNrIGltcG9ydCBGbGFzaywgYXBwLCBqc29uaWZ5LCByZXF1ZXN0CithcHAgPSBGbGFzayhfX25hbWVfXykKKworQGFwcC5yb3V0ZSgnL2dldF9tZXNzYWdlcycsIG1ldGhvZHM9WydHRVQnXSkKK2RlZiBnZXRfbWVzc2FnZXMoKToKKyAgICBjb252ZXJzYXRpb25faWQgPSByZXF1ZXN0LmFyZ3MuZ2V0KCdjb252ZXJzYXRpb25faWQnKQorICAgIGlmIG5vdCBjb252ZXJzYXRpb25faWQ6CisgICAgICAgcmV0dXJuIGpzb25pZnkoZXJyb3I9IkNvbnZlcnNhdGlvbiBpZCBub3QgZm91bmQiKSwgNDA0CisgICAKKyAgICBjb252ZXJzYXRpb24gPSBtZXNzYWdlLmdldF9jb252ZXJzYXRpb24oY29udmVyc2F0aW9uX2lkKQorICAgIGlmIG5vdCBjb252ZXJzYXRpb24gOgorICAgICAgICAgcmV0dXJuIGpzb25pZnkoZXJyb3I9IkNvbnZlcnNhdGlvbiBub3QgZm91bmQiKSwgNDA0CisgICAgCisgICAgcmVzcG9uc2UgPSBqc29uaWZ5KGNvbnZlcnNhdGlvbikKKyAgICByZXNwb25zZS5oZWFkZXJzWyJDYWNoZS1Db250cm9sIl0gPSAibm8tY2FjaGUiCisgICAgcmV0dXJuIHJlc3BvbnNlCisgICAKK0BhcHAuYWZ0ZXJfcmVxdWVzdAorZGVmIGFkZF9oZWFkZXIocmVzcG9uc2UpOgorICAgIHJldHVybiByZXNwb25zZQ==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDEwICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCisgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQorICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQgPSAnIisgcGFzc3dvcmQgKyAiJzsiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCi0gICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCisgICAgY29ubi5jb21taXQoKQorICAgIGN1cnNvci5jbG9zZSgpCisgICAgY29ubi5jbG9zZSgpCisKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKKyAgICAgICAgcmV0dXJuIEZhbHNlCisgICAgcmV0dXJuIFRydWUK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMTYgQEAKKyNpbmNsdWRlIDxzdGRsaWIuaD4KKyNpbmNsdWRlIDxzdHJpbmc+CisjaW5jbHVkZSAicmVzcG9uc2UuaCIKKyNpbmNsdWRlICJtZXNzYWdlcy5oIgordXNpbmcgbmFtZXNwYWNlIHN0ZDsKKworY2xhc3MgTWVzc2FnZXNDb250cm9sbGVyIHsKKyAgIHB1YmxpYzoKKyAgICBSZXNwb25zZTxzdHJpbmc+IGdldE1lc3NhZ2VzKHN0cmluZyBjb252ZXJzaW9uX2lkKSB7CisgICAgICAgIHN0cmluZyBtZXNzYWdlcyA9IE1lc3NhZ2VzOjpnZXRNZXNzYWdlcyhjb252ZXJzaW9uX2lkKTsKKyAgICAgICAgUmVzcG9uc2U8c3RyaW5nPiByZXNwb25zZSA9IFJlc3BvbnNlPHN0cmluZz4obWVzc2FnZXMpOworICAgICAgICByZXNwb25zZS5zZXRIZWFkZXIoIkNvbnRlbnQtVHlwZSIsICJ0ZXh0L2pzb24iKTsKKyAgICAgICAgcmVzcG9uc2Uuc2V0SGVhZGVyKCJDYWNoZS1jb250cm9sIiwgIm5vLWNhY2hlIik7CisgICAgICAgIHJldHVybiByZXNwb25zZTsKKyAgICB9Cit9Ow==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yMCw3ICsyMCw3IEBACiBpbXBvcnQgc3RhdGljIG9yZy5hcGFjaGUuY29tbW9ucy5sYW5nMy5TdHJpbmdFc2NhcGVVdGlscy5lc2NhcGVIdG1sNDsKIAogCi1wdWJsaWMgY2xhc3MgRXh0ZXJuCitwdWJsaWMgY2xhc3MgRXh0ZXJuYWx7CiAgICAgcHJpdmF0ZSBzdGF0aWMgSHR0cFVSTENvbm5lY3Rpb24gY29uOwogICAgIHByaXZhdGUgc3RhdGljIFN0cmluZyBlbmNvZGVDbGllbnRDcmVkZW50aWFsIChTdHJpbmcgY2xpZW50SWQsIFN0cmluZyBjbGllbnRTZWNyZXQgKSB7CiAgICAgICAgIFN0cmluZyBjcmVkZW50aWFscyA9IGNsaWVudElkICsgIjoiICsgY2xpZW50U2VjcmV0OwpAQCAtMzksNiArMzksMTIgQEAKICAgICAgICAgICAgIGlmKHF1ZXJ5LmNvbnRhaW5zS2V5KCJlcnJvciIpKXsKICAgICAgICAgICAgICAgICByZXNwb25zZS5wdXQoImVycm9yIiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHV0KCJtc2ciLCBxdWVyeS5nZXQoImVycm9yIikpOworICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTsKKyAgICAgICAgICAgIH0KKyAgICAgICAgICAgIFN0cmluZyBjdXJyZW50U3RhdGUgPSAoU3RyaW5nKXF1ZXJ5LmdldCgic3RhdGUiKTsKKyAgICAgICAgICAgIGlmKCFjdXJyZW50U3RhdGUuZXF1YWxzKHNhdmVkU3RhdGUpKXsKKyAgICAgICAgICAgICAgICByZXNwb25zZS5wdXQoImVycm9yIiwgdHJ1ZSk7CisgICAgICAgICAgICAgICAgcmVzcG9uc2UucHV0KCJtc2ciLCAiU3RhdGUgdmFsdWUgbWlzbWF0Y2giKTsKICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgICAgICAgICB9CiAgICAgICAgICAgICBTdHJpbmcgY29kZSA9IG51bGw7CkBAIC0xNTcsMTYgKzE2MywyMSBAQAogICAgICAgICAgICAgICAgIE9iamVjdCBvYmo7CiAgICAgICAgICAgICAgICAgb2JqID0gcGFyc2VyLnBhcnNlKGNvbnRlbnQudG9TdHJpbmcoKSk7CiAgICAgICAgICAgICAgICAgUmVxUmVzID0gKEpTT05PYmplY3QpIG9iajsKKyAgICAgICAgICAgICAgICBSZXFSZXMua2V5U2V0KCkuZm9yRWFjaChrZXkgLT4KKyAgICAgICAgICAgICAgICB7CisgICAgICAgICAgICAgICAgICAgIE9iamVjdCB2YWwgPSBSZXFSZXMuZ2V0KGtleSk7CisgICAgICAgICAgICAgICAgICAgIFJlcVJlcy5wdXQoa2V5LCBlc2NhcGVIdG1sNCh2YWwudG9TdHJpbmcoKSkpOworICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIGludCBzdGF0dXMgPSBjb24uZ2V0UmVzcG9uc2VDb2RlKCk7CiAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnB1dCgiZXJyb3IiLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnB1dCgicmVzb3VyY2UiLCBSZXFSZXMpOwogICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5wdXQoInN0YXR1c0NvZGUiLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7Ci0gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHsKKyAgICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKHJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICBjb24uZGlzY29ubmVjdCgpOwogICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTsKLSAgICAgICAgICAgICAgICB9CisgICAgICAgICAgICB9CiAgICAgICAgIH0KICAgICB9CiB9
False,
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDYgKzEsNiBAQAogaW1wb3J0IG9zCiBpbXBvcnQgcHlteXNxbAotcHJpbnQoImZvbyIpCisKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6CiAgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCkBAIC0xNSw1ICsxNSw0IEBACiAKICAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0gICAgICAgIAogICAgIHJldHVybiBUcnVlCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC01MCw0ICs1MCw0IEBACiAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oJ0FjY291bnQgbm90IGZvdW5kJykKICAgICBlbHNlOgotICAgICAgICByYWlzZSBMb2dnZWRPdXRFeGNlcHRpb24oJ1VzZXIgaXMgbm90IGxvZ2dlZCBpbicpKyAgICAgICAgcmFpc2UgTG9nZ2VkT3V0RXhjZXB0aW9uKCdVc2VyIGlzIG5vdCBsb2dnZWQgaW4nKQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjkgQEAKK2ltcG9ydCBweW15c3FsCitpbXBvcnQgcmVxdWVzdHMKK2ltcG9ydCByZQorCitkZWYgcmVnaXN0ZXIodXNlcm5hbWU6IHN0ciwgcGFzc3dvcmQ6IHN0ciwgZG9iOiBzdHIsIGJhbGFuY2U6IHN0ciwgaXA6IHN0cikgLT4gYm9vbDoKKyAgICB1cmwgPSBmImh0dHA6Ly9hcHA6NTAwMC9hcGkvaXAiCisgICAgcGFyYW1zID0geyJpcCI6IGlwfQorICAgIHIgPSByZXF1ZXN0cy5nZXQodXJsLCBwYXJhbXM9cGFyYW1zKQorICAgIGRhdGEgPSByLmpzb24oKQorICAgIGxvY2F0aW9uID0gZGF0YS5nZXQoImxvY2F0aW9uIikKKworICAgIGlmIG5vdCByZS5mdWxsbWF0Y2gociJeW2EtekEtWjAtOSxcc117MSwzMH0kIiwgbG9jYXRpb24pOgorICAgICAgICByZXR1cm4gRmFsc2UKKworICAgIHRyeToKKyAgICAgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3b3JkPSJsZXRtZWluIiwgZGI9IkJhbmtBcHAiKQorICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisgICAgICAgIAorICAgICAgICBxdWVyeSA9ICJJTlNFUlQgSU5UTyB1c2VycyAodXNlcm5hbWUsIHBhc3N3b3JkLCBkb2IsIGJhbGFuY2UsIG9yaWdpbmFsX2xvY2F0aW9uKSBWQUxVRVMgKCVzLCAlcywgJXMsICVzLCAlcyk7IgorICAgICAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCBwYXNzd29yZCwgZG9iLCBiYWxhbmNlLCBsb2NhdGlvbikpCisgICAgICAgIAorICAgICAgICBjb25uLmNvbW1pdCgpCisgICAgICAgIGN1cnNvci5jbG9zZSgpCisgICAgICAgIGNvbm4uY2xvc2UoKQorICAgICAgICByZXR1cm4gVHJ1ZQorICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKKyAgICAgICAgcHJpbnQoZSkKKyAgICAgICAgcmV0dXJuIEZhbHNlCisgICAgICAgIA==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDQgKzEsNSBAQAogaW1wb3J0IG9zLCBzdWJwcm9jZXNzCiAKIGRlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgotICAgIG9wZW4oJy90bXAvamFpbC90bXAvJyArIHVzZXJuYW1lICsgJy8nICsgZmlsZW5hbWUpLmNsb3NlKCkKKyAgICBmaWxlID0gb3BlbigidG1wLyIgKyB1c2VybmFtZSArICIvIiArIGZpbGVuYW1lLCAidyIpCisgICAgZmlsZS5jbG9zZSgpCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDQgKzEsNSBAQAogaW1wb3J0IG9zLCBzdWJwcm9jZXNzCiAKIGRlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgotICAgIG9wZW4oJ3RtcC8nICsgdXNlcm5hbWUgKyAnLycgKyBmaWxlbmFtZSkuY2xvc2UoKQorICAgIGZpbGUgPSBvcGVuKCJ0bXAvIiArIHVzZXJuYW1lICsgIi8iICsgZmlsZW5hbWUsICJ3IikKKyAgICBmaWxlLmNsb3NlKCkK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNzYgQEAKK3BhY2thZ2UgZGVtbworCitpbXBvcnQgKAorCSJjcnlwdG8vYWVzIgorCSJjcnlwdG8vY2lwaGVyIgorCSJlbmNvZGluZy9iYXNlNjQiCispCisKK2Z1bmMgZW5jcnlwdF9tZXNzYWdlKG1lc3NhZ2Ugc3RyaW5nLCBub25jZSBzdHJpbmcsIGtleSBzdHJpbmcpIChzdHJpbmcsIHN0cmluZywgZXJyb3IpIHsKKwlkZWNfbm9uY2UsIGVyciA6PSBiYXNlNjQuU3RkRW5jb2RpbmcuRGVjb2RlU3RyaW5nKG5vbmNlKQorCWlmIGVyciAhPSBuaWwgeworCQlyZXR1cm4gIiIsICIiLCBlcnIKKwl9CisKKwlkZWNfa2V5LCBlcnIgOj0gYmFzZTY0LlN0ZEVuY29kaW5nLkRlY29kZVN0cmluZyhrZXkpCisJaWYgZXJyICE9IG5pbCB7CisJCXJldHVybiAiIiwgIiIsIGVycgorCX0KKworCWJsaywgZXJyIDo9IGFlcy5OZXdDaXBoZXIoZGVjX2tleSkKKwlpZiBlcnIgIT0gbmlsIHsKKwkJcmV0dXJuICIiLCAiIiwgZXJyCisJfQorCisJZ2NtLCBlcnIgOj0gY2lwaGVyLk5ld0dDTShibGspCisJaWYgZXJyICE9IG5pbCB7CisJCXJldHVybiAiIiwgIiIsIGVycgorCX0KKworCWVuYyA6PSBnY20uU2VhbChuaWwsIGRlY19ub25jZSwgW11ieXRlKG1lc3NhZ2UpLCBuaWwpCisJY2lwaGVydGV4dCA6PSBiYXNlNjQuU3RkRW5jb2RpbmcuRW5jb2RlVG9TdHJpbmcoZW5jWzpsZW4obWVzc2FnZSldKQorCXRhZyA6PSBiYXNlNjQuU3RkRW5jb2RpbmcuRW5jb2RlVG9TdHJpbmcoZW5jW2xlbihtZXNzYWdlKTpdKQorCisJcmV0dXJuIGNpcGhlcnRleHQsIHRhZywgbmlsCit9CisKK2Z1bmMgZGVjcnlwdF9tZXNzYWdlKG1lc3NhZ2Ugc3RyaW5nLCBub25jZSBzdHJpbmcsIGtleSBzdHJpbmcsIHRhZyBzdHJpbmcpIChzdHJpbmcsIGVycm9yKSB7CisJZGVjX3RleHQsIGVyciA6PSBiYXNlNjQuU3RkRW5jb2RpbmcuRGVjb2RlU3RyaW5nKG1lc3NhZ2UpCisJaWYgZXJyICE9IG5pbCB7CisJCXJldHVybiAiIiwgZXJyCisJfQorCisJZGVjX25vbmNlLCBlcnIgOj0gYmFzZTY0LlN0ZEVuY29kaW5nLkRlY29kZVN0cmluZyhub25jZSkKKwlpZiBlcnIgIT0gbmlsIHsKKwkJcmV0dXJuICIiLCBlcnIKKwl9CisKKwlkZWNfa2V5LCBlcnIgOj0gYmFzZTY0LlN0ZEVuY29kaW5nLkRlY29kZVN0cmluZyhrZXkpCisJaWYgZXJyICE9IG5pbCB7CisJCXJldHVybiAiIiwgZXJyCisJfQorCisJZGVjX3RhZywgZXJyIDo9IGJhc2U2NC5TdGRFbmNvZGluZy5EZWNvZGVTdHJpbmcodGFnKQorCWlmIGVyciAhPSBuaWwgeworCQlyZXR1cm4gIiIsIGVycgorCX0KKworCWNpcGhlcnRleHQgOj0gYXBwZW5kKGRlY190ZXh0LCBkZWNfdGFnLi4uKQorCisJYywgZXJyIDo9IGFlcy5OZXdDaXBoZXIoZGVjX2tleSkKKwlpZiBlcnIgIT0gbmlsIHsKKwkJcmV0dXJuICIiLCBlcnIKKwl9CisKKwlnY20sIGVyciA6PSBjaXBoZXIuTmV3R0NNKGMpCisJaWYgZXJyICE9IG5pbCB7CisJCXJldHVybiAiIiwgZXJyCisJfQorCisJcGxhaW50ZXh0LCBlcnIgOj0gZ2NtLk9wZW4obmlsLCBkZWNfbm9uY2UsIGNpcGhlcnRleHQsIG5pbCkKKwlpZiBlcnIgIT0gbmlsIHsKKwkJcmV0dXJuICIiLCBlcnIKKwl9CisKKwlyZXR1cm4gc3RyaW5nKHBsYWludGV4dCksIG5pbAorfQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDUgKzEsNSBAQAogaW1wb3J0IG9zLCBzdWJwcm9jZXNzCiAKIGRlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgotICAgIHdpdGggZiA9IG9wZW4oJ3RtcC8nICsgdXNlcm5hbWUgKyAnLycgKyBmaWxlbmFtZSwgJ3cnKToKLSAgICAgICAgcGFzcworICAgIGZpbGUgPSBvcGVuKCJ0bXAvIiArIHVzZXJuYW1lICsgIi8iICsgZmlsZW5hbWUsICJ3IikKKyAgICBmaWxlLmNsb3NlKCkK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDUgKzEsNSBAQAogaW1wb3J0IG9zLCBzdWJwcm9jZXNzCiAKIGRlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgotICAgIHdpdGggb3BlbigndG1wLycgKyB1c2VybmFtZSArICcvJyArIGZpbGVuYW1lLCAndycpOgotICAgICAgICBwYXNzCisgICAgZmlsZSA9IG9wZW4oInRtcC8iICsgdXNlcm5hbWUgKyAiLyIgKyBmaWxlbmFtZSwgInciKQorICAgIGZpbGUuY2xvc2UoKQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDMgKzEsNCBAQAoraW1wb3J0IG9zCiBpbXBvcnQgcHlteXNxbAogCiAKQEAgLTUsMTUgKzYsMTMgQEAKICAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J1NvY2lhbE1lZGlhQXBwJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBxdWVyeSA9ICJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkID0gJXM7IgotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5KQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKICAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgbm90IGRhdGE6CisgICAgaWYgbGVuKGRhdGEpIGlzIDA6CiAgICAgICAgIHJldHVybiBGYWxzZQotCiAgICAgcmV0dXJuIFRydWUK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDMgKzEsNCBAQAoraW1wb3J0IG9zCiBpbXBvcnQgcHlteXNxbAogCiAKQEAgLTUsMTUgKzYsMTMgQEAKICAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J1NvY2lhbE1lZGlhQXBwJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBxdWVyeSA9ICJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkID0gJXM7IgotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIG5vdCBkYXRhOgorICAgIGlmIGxlbihkYXRhKSBpcyAwOgogICAgICAgICByZXR1cm4gRmFsc2UKLQogICAgIHJldHVybiBUcnVlCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjYgQEAKK3BhY2thZ2UgZGVtbzsKK2ltcG9ydCBqYXZhLnNxbC4qOworCitwdWJsaWMgY2xhc3MgRXh0ZXJuYWx7CisgICAgcHVibGljIHN0YXRpYyBib29sZWFuIGxvZ2luKFN0cmluZyB1c2VybmFtZSwgU3RyaW5nIHBhc3N3b3JkKSB0aHJvd3MgRXhjZXB0aW9ueworICAgICAgICB0cnl7CisgICAgICAgICAgICBDbGFzcy5mb3JOYW1lKCJjb20ubXlzcWwuamRiYy5Ecml2ZXIiKTsKKyAgICAgICAgICAgIENvbm5lY3Rpb24gY29uPURyaXZlck1hbmFnZXIuZ2V0Q29ubmVjdGlvbigiamRiYzpteXNxbDovL2RiOjMzMDYvU29jaWFsTWVkaWFBcHA/dXNlU1NMPWZhbHNlIiwicm9vdCIsImxldG1laW4iKTsKKworICAgICAgICAgICAgUHJlcGFyZWRTdGF0ZW1lbnQgc3RtdCA9IGNvbi5wcmVwYXJlU3RhdGVtZW50KCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gPyBBTkQgcGFzc3dvcmQgPSA/OyIpOworICAgICAgICAgICAgc3RtdC5zZXRTdHJpbmcoMSwgdXNlcm5hbWUpOworICAgICAgICAgICAgc3RtdC5zZXRTdHJpbmcoMiwgcGFzc3dvcmQpOworICAgICAgICAgICAgUmVzdWx0U2V0IHJzPXN0bXQuZXhlY3V0ZVF1ZXJ5KCk7CisKKyAgICAgICAgICAgIGlmIChycy5uZXh0KCkpeworICAgICAgICAgICAgICAgIGNvbi5jbG9zZSgpOworICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOworICAgICAgICAgICAgfQorCisgICAgICAgICAgICBjb24uY2xvc2UoKTsKKyAgICAgICAgICAgIHJldHVybiBmYWxzZTsKKyAgICAgICAgfSBjYXRjaChFeGNlcHRpb24gZSl7CisgICAgICAgICAgICB0aHJvdyBlOworICAgICAgICB9CisgICAgfQorfQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0zLDE0ICszLDE0IEBACiAKIHB1YmxpYyBjbGFzcyBFeHRlcm5hbHsKICAgICBwdWJsaWMgc3RhdGljIGJvb2xlYW4gbG9naW4oU3RyaW5nIHVzZXJuYW1lLCBTdHJpbmcgcGFzc3dvcmQpIHRocm93cyBFeGNlcHRpb257Ci0gICAgICAgIHRyeSB7CisgICAgICAgIHRyeXsKICAgICAgICAgICAgIENsYXNzLmZvck5hbWUoImNvbS5teXNxbC5qZGJjLkRyaXZlciIpOwotICAgICAgICAgICAgQ29ubmVjdGlvbiBjb24gPSBEcml2ZXJNYW5hZ2VyLmdldENvbm5lY3Rpb24oImpkYmM6bXlzcWw6Ly9kYjozMzA2L1NvY2lhbE1lZGlhQXBwP3VzZVNTTD1mYWxzZSIsICJyb290IiwgImxldG1laW4iKTsKKyAgICAgICAgICAgIENvbm5lY3Rpb24gY29uPURyaXZlck1hbmFnZXIuZ2V0Q29ubmVjdGlvbigiamRiYzpteXNxbDovL2RiOjMzMDYvU29jaWFsTWVkaWFBcHA/dXNlU1NMPWZhbHNlIiwicm9vdCIsImxldG1laW4iKTsKIAotCi0gICAgICAgICAgICBTdGF0ZW1lbnQgc3RtdCA9IGNvbi5jcmVhdGVTdGF0ZW1lbnQoKTsKLSAgICAgICAgICAgIFN0cmluZyBxdWVyeSA9ICJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0nIiArIHVzZXJuYW1lICsgIicgQU5EIHBhc3N3b3JkPSciKyBwYXNzd29yZCArICInOyI7Ci0gICAgICAgICAgICBSZXN1bHRTZXQgcnMgPSBzdG10LmV4ZWN1dGVRdWVyeShxdWVyeSk7CisgICAgICAgICAgICBQcmVwYXJlZFN0YXRlbWVudCBzdG10ID0gY29uLnByZXBhcmVTdGF0ZW1lbnQoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSA/IEFORCBwYXNzd29yZCA9ID87Iik7CisgICAgICAgICAgICBzdG10LnNldFN0cmluZygxLCB1c2VybmFtZSk7CisgICAgICAgICAgICBzdG10LnNldFN0cmluZygyLCBwYXNzd29yZCk7CisgICAgICAgICAgICBSZXN1bHRTZXQgcnM9c3RtdC5leGVjdXRlUXVlcnkoKTsKIAogICAgICAgICAgICAgaWYgKHJzLm5leHQoKSl7CiAgICAgICAgICAgICAgICAgY29uLmNsb3NlKCk7CkBAIC0xOSw3ICsxOSw3IEBACiAKICAgICAgICAgICAgIGNvbi5jbG9zZSgpOwogICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwotICAgICAgICB9IGNhdGNoKEV4Y2VwdGlvbiBlKSB7CisgICAgICAgIH0gY2F0Y2goRXhjZXB0aW9uIGUpewogICAgICAgICAgICAgdGhyb3cgZTsKICAgICAgICAgfQogICAgIH0K
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE5ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZCA9ICVzOyIKLSAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiBub3QgZGF0YToKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0KICAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDUgKzEsNSBAQAotaW1wb3J0IG9zLCBzdWJwcm9jZXNzCitpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CiAKLWRlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgotICAgIGZpbGUgPSBvcGVuKCJ0bXAvIiArIHVzZXJuYW1lICsgIi8iICsgZmlsZW5hbWUsICJ3IikKLSAgICBmaWxlLmNsb3NlKCkKK2V4cG9ydCBjb25zdCBjcmVhdGVGaWxlID0gKHVzZXJuYW1lOiBzdHJpbmcsIGZpbGVuYW1lOiBzdHJpbmcpOiB2b2lkID0+IHsKKyAgZnMuY2xvc2VTeW5jKGZzLm9wZW5TeW5jKGB0bXAvJHt1c2VybmFtZX0vJHtmaWxlbmFtZX1gLCAndycpKTsKK307Cg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDEyICsxLDEyIEBACi1leHBvcnRzLl8gPSAoZG9jdW1lbnQpID0+Ci0gICAgZnVuY3Rpb24gcmVuZGVyQ29tbWVudHMoY29tbWVudHMpIHsKLSAgICAgICAgY29uc3QgY29tbWVudHNCbG9jayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOworZXhwb3J0IGNvbnN0IF8gPSAoZG9jdW1lbnQ6IERvY3VtZW50KSA9PgorICBmdW5jdGlvbiByZW5kZXJDb21tZW50cyhjb21tZW50czogc3RyaW5nW10pIHsKKyAgICBjb25zdCBjb21tZW50c0Jsb2NrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAKLSAgICAgICAgZm9yIChjb25zdCBjb21tZW50IG9mIGNvbW1lbnRzKSB7Ci0gICAgICAgICAgICBjb25zdCAkY29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInAiKTsKLSAgICAgICAgICAgICRjb21tZW50LnRleHRDb250ZW50ID0gY29tbWVudDsKLSAgICAgICAgICAgIGNvbW1lbnRzQmxvY2suYXBwZW5kQ2hpbGQoJGNvbW1lbnQpOwotICAgICAgICB9CisgICAgZm9yIChjb25zdCBjb21tZW50IG9mIGNvbW1lbnRzKSB7CisgICAgICAgIGNvbnN0ICRjb21tZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgicCIpOworICAgICAgICAkY29tbWVudC50ZXh0Q29udGVudCA9IGNvbW1lbnQ7CisgICAgICAgIGNvbW1lbnRzQmxvY2suYXBwZW5kQ2hpbGQoJGNvbW1lbnQpOworICAgIH0KIAotICAgICAgICByZXR1cm4gY29tbWVudHNCbG9jazsKLSAgICB9OworICAgIHJldHVybiBjb21tZW50c0Jsb2NrOworICB9Owo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDYgKzEsNSBAQAotaW1wb3J0IG9zLCBzdWJwcm9jZXNzCitpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CiAKLWRlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgotICAgIGZpbGVfcGF0aCA9IGYidG1wL3t1c2VybmFtZX0ve2ZpbGVuYW1lfSIKLSAgICBjb21tYW5kID0gWyJ0b3VjaCIsIGZpbGVfcGF0aF0KLSAgICBzdWJwcm9jZXNzLnJ1bihjb21tYW5kKQorZXhwb3J0IGNvbnN0IGNyZWF0ZUZpbGUgPSAodXNlcm5hbWU6IHN0cmluZywgZmlsZW5hbWU6IHN0cmluZyk6IHZvaWQgPT4geworICBmcy5jbG9zZVN5bmMoZnMub3BlblN5bmMoYHRtcC8ke3VzZXJuYW1lfS8ke2ZpbGVuYW1lfWAsICd3JykpOworfTsK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDYgKzEsNSBAQAogaW1wb3J0IG9zLCBzdWJwcm9jZXNzCiAKIGRlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgotICAgIGZpbGVfcGF0aCA9IGYidG1wL3t1c2VybmFtZX0ve2ZpbGVuYW1lfSIKLSAgICBjb21tYW5kID0gWyJ0b3VjaCIsIGZpbGVfcGF0aF0KLSAgICBzdWJwcm9jZXNzLnJ1bihjb21tYW5kKQorICAgIGZpbGUgPSBvcGVuKCJ0bXAvIiArIHVzZXJuYW1lICsgIi8iICsgZmlsZW5hbWUsICJ3IikKKyAgICBmaWxlLmNsb3NlKCkK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNTIgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworCitkZWYgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKToKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J215c3FsJywgcG9ydD0zMzA2LAorICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nMScsIGRiPSdvd2FzcDEwc3FsaScpCisgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQorCisgICAgY3Vyc29yLmV4ZWN1dGUoCisgICAgICAgICJTRUxFQ1QgdXNlcl9pZCBGUk9NIHVzZXJzIFdIRVJFIHVzZXJfbmFtZSA9ICVzIEFORCBwYXNzd29yZCA9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQorICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQorCisgICAgY29ubi5jb21taXQoKQorICAgIGN1cnNvci5jbG9zZSgpCisgICAgY29ubi5jbG9zZSgpCisKKyAgICBpZiBsZW4oZGF0YSkgPT0gMDoKKyAgICAgICAgcmV0dXJuIHsKKyAgICAgICAgICAgICJsb2dnZWQiOiBGYWxzZQorICAgICAgICB9CisgICAgcmV0dXJuIHsKKyAgICAgICAgImxvZ2dlZCI6IFRydWUsCisgICAgICAgICJuYW1lIjogdXNlcm5hbWUKKyAgICB9CisKKworZGVmIGdldF9wcm9qZWN0cyhpZFByb2plY3QpOgorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nbXlzcWwnLCBwb3J0PTMzMDYsCisgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyPSdyb290JywgcGFzc3dkPScxJywgZGI9J293YXNwMTBzcWxpJykKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisKKyAgICBzdGF0ZW1lbnQgPSAiU0VMRUNUICogRlJPTSBwcm9qZWN0cyBXSEVSRSBwcm9qZWN0X2lkID0gJXM7IgorCisgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCAoaWRQcm9qZWN0KSkKKyAgICByZXNwb25zZSA9IGN1cnNvci5mZXRjaGFsbCgpCisgICAgZGF0YSA9IFtdCisgICAgZm9yIHJvdyBpbiByZXNwb25zZToKKyAgICAgICAgZGF0YS5hcHBlbmQoeworICAgICAgICAgICAgInByb2plY3RfaWQiOiByb3dbMF0sCisgICAgICAgICAgICAibmFtZSI6IHJvd1sxXSwKKyAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHJvd1syXSwKKyAgICAgICAgICAgICJzdGFydF9kYXRlIjogc3RyKHJvd1szXSksCisgICAgICAgICAgICAiZW5kX2RhdGUiOiBzdHIocm93WzRdKSwKKyAgICAgICAgICAgICJ0eXBlIjogcm93WzVdLAorICAgICAgICAgICAgIm93bmVyIjogcm93WzZdCisgICAgICAgIH0pCisKKyAgICBjb25uLmNvbW1pdCgpCisgICAgY3Vyc29yLmNsb3NlKCkKKyAgICBjb25uLmNsb3NlKCkKKyAgICByZXR1cm4gZGF0YQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC02LDggKzYsOCBAQAogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAogICAgIHN0YXRlbWVudCA9ICJJTlNFUlQgSU5UTyBwb3N0cyBWQUxVRVMgKCVzLCVzKTsiCisKICAgICBjdXJzb3IuZXhlY3V0ZShzdGF0ZW1lbnQsIChwb3N0LCB1c2VybmFtZSkpCi0KICAgICBjb25uLmNvbW1pdCgpCiAgICAgY3Vyc29yLmNsb3NlKCkKLSAgICBjb25uLmNsb3NlKCkrICAgIGNvbm4uY2xvc2UoKQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yNyw5ICsyNyw5IEBACiAKICAgICByZXR1cm4gcmVzdWx0cwogCi1kZWYgZGVsZXRlUHJvZHVjdChwcm9kdWN0SWQsIHRva2VuKTogCi0gICAgaWYgaXNBZG1pbih0b2tlbikgaXMgRmFsc2U6IAotICAgICAgICByZXR1cm4gCitkZWYgZGVsZXRlUHJvZHVjdChwcm9kdWN0SWQsIHRva2VuKToKKyAgICBpZiBpc0FkbWluKHRva2VuKSBpcyBGYWxzZToKKyAgICAgICAgcmV0dXJuCiAKICAgICByZXN1bHRzID0gbGlzdCgpCiAKQEAgLTYyLDQgKzYyLDQgQEAKICAgICBpZiBkZWNvZGVkWyJpc19hZG1pbiJdID09IDE6CiAgICAgICAgIHJldHVybiBUcnVlCiAKLSAgICByZXR1cm4gRmFsc2UrICAgIHJldHVybiBGYWxzZQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDYgKzEsNiBAQAogZnJvbSBuYWNsLnNpZ25pbmcgaW1wb3J0IFNpZ25pbmdLZXkKIAotcHJpdmF0ZV9rZXkgPSAiMDAxMTIyMzM0NDU1NjY3Nzg4OTlhYWJiY2NkZGVlZmYwMDExMjIzMzQ0NTU2Njc3ODg5OWFhYmJjY2RkZWVmZiIKK3ByaXZhdGVfa2V5ID0gIjE0MWM5NzQyZjY3YmZhMDlmODRhYjkxYWM1ZDJiNTZhNmYwMDk1N2I5ZWQyYWZjOTJmOWRlYmY5NWRlYjE4ODUiCiAKIGRlZiBzaWduX21lc3NhZ2UobWVzc2FnZTogc3RyKSAtPiBzdHI6CiAgICAgZW5jb2RlZF9rZXkgPSBieXRlcy5mcm9taGV4KHByaXZhdGVfa2V5KQpAQCAtOCw1ICs4LDYgQEAKIAogICAgIHNrID0gU2lnbmluZ0tleShlbmNvZGVkX2tleSkKICAgICBtc2cgPSBzay5zaWduKGVuY29kZWRfbWVzc2FnZSkKKyAgICBzaWdfaGV4ID0gbXNnLnNpZ25hdHVyZS5oZXgoKQogCi0gICAgcmV0dXJuIG1zZy5zaWduYXR1cmUuaGV4KCkKKyAgICByZXR1cm4gc2lnX2hleAo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC02LDE0ICs2LDYgQEAKICAgICByZXR1cm4gY29ubgogCiBkZWYgYWRkVXNlcihmb3JtX2VsZW1lbnRzKToKLSAgICAKLSAgICAKLQotICAgIAotICAgIAotICAgICAgICAKLSAgICAKLQogICAgIG1lc3NhZ2UgPSAiIgogICAgIHJlc3VsdHMgPSBsaXN0KCkKIApAQCAtMjMsOCArMTUsOCBAQAogICAgIGN1cnNvci5leGVjdXRlKHNxbCwgKGZvcm1fZWxlbWVudHNbInVzZXJuYW1lIl0sCiAgICAgICAgIGZvcm1fZWxlbWVudHNbInBhc3N3b3JkIl0sCiAgICAgICAgIGZvcm1fZWxlbWVudHNbImZpcnN0X25hbWUiXSwKLSAgICAgICAgIGZvcm1fZWxlbWVudHNbImxhc3RfbmFtZSJdLAotICAgICAgICAgZm9ybV9lbGVtZW50c1siZW1haWwiXSkpCisgICAgICAgIGZvcm1fZWxlbWVudHNbImxhc3RfbmFtZSJdLAorICAgICAgICBmb3JtX2VsZW1lbnRzWyJlbWFpbCJdKSkKIAogICAgIGxhc3RJZCA9IGN1cnNvci5sYXN0cm93aWQKICAgICBjb25uLmNvbW1pdCgpCkBAIC0zNSw3ICsyNyw3IEBACiAgICAgdXNlciA9IGN1cnNvci5mZXRjaG9uZSgpCiAKICAgICBpZiB1c2VyIGlzIE5vbmU6Ci0gICAgICAgIHJlc3VsdHMuYXBwZW5kKHsiZXJyb3IiOiBUcnVlLCAibWVzc2FnZSI6ICJFcnJvciBvY2N1cnJlZCEifSkKKyAgICAgICAgcmVzdWx0cy5hcHBlbmQoeyJlcnJvciI6IFRydWUsICJtZXNzYWdlIjogIkVycm9yIG9jY3VyZWQhIn0pCiAgICAgZWxzZToKICAgICAgICAgbWVzc2FnZSA9ICJSZWdpc3RyYXRpb24gY29tcGxldGUuIgogICAgICAgICBpZiB1c2VyWydlbWFpbF92ZXJpZmllZCddID09IDA6Cg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDQgKzIsNCBAQAogCiBkZWYgY3JlYXRlX2ZpbGUodXNlcm5hbWUsIGZpbGVuYW1lKToKICAgICBmaWxlID0gb3BlbigidG1wLyIgKyB1c2VybmFtZSArICIvIiArIGZpbGVuYW1lLCAidyIpCi0gICAgZmlsZS5jbG9zZSgpKyAgICBmaWxlLmNsb3NlKCkK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE2ICsxLDE2IEBACiBpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKLWRlZiBnZXRfb3JkZXJzKHJlcWlkLCBhcGlrZXkpOgorZGVmIGdldF9vcmRlcnModXNlcmlkLCBhcGlrZXkpOgogICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nRWNvbW1lcmNlQXBwJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCB1c2VyaWQsIGFwaWtleSBGUk9NIHVzZXJzIFdIRVJFIHVzZXJpZD0gJXMgQU5EIGFwaWtleT0gJXMgTElNSVQgMTsiLCAocmVxaWQsYXBpa2V5KSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIHVzZXJpZCxhcGlrZXkgRlJPTSB1c2VycyBXSEVSRSB1c2VyaWQ9ICVzIEFORCBhcGlrZXk9ICVzIExJTUlUIDE7IiwgKHVzZXJpZCxhcGlrZXkpKQogICAgIHVzZXIgPSBjdXJzb3IuZmV0Y2hvbmUoKQogCiAgICAgZGF0YSA9IFtdCiAgICAgaWYgdXNlciBpcyBub3QgTm9uZToKICAgICAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IocHlteXNxbC5jdXJzb3JzLkRpY3RDdXJzb3IpCi0gICAgICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1Qgb3JkZXJuYW1lLG9yZGVyaWQsdXNlcmlkLCB0b3RhbCBGUk9NIG9yZGVycyBXSEVSRSB1c2VyaWQgPSAlczsgICAgIiwgKHJlcWlkKSkKKyAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBvcmRlcm5hbWUsb3JkZXJpZCx1c2VyaWQsIHRvdGFsIEZST00gb3JkZXJzIFdIRVJFIHVzZXJpZD0gJXM7ICAgICIsICh1c2VyaWQpKQogICAgICAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKIAogICAgICAgICBjb25uLmNvbW1pdCgpCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDMgKzEsNCBAQAoraW1wb3J0IG9zCiBpbXBvcnQgcHlteXNxbAogCiAKQEAgLTUsMTUgKzYsMTMgQEAKICAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J1NvY2lhbE1lZGlhQXBwJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBxdWVyeSA9ICJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkID0gJXM7IgotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIG5vdCBkYXRhOgorICAgIGlmIGxlbihkYXRhKSBpcyAwOgogICAgICAgICByZXR1cm4gRmFsc2UKLQotICAgIHJldHVybiBUcnVlKyAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC02LDcgKzYsNyBAQAogI2RlZmluZSB0cnVlICAxCiAjZGVmaW5lIGZhbHNlIDAKIAotZW51bSB7IFNUUlNJWkUgPSAxMDI0IH07CitlbnVtIHsgU1RSU0laRSA9IDEwMjQsIFBBUkFNUyA9IDIgfTsKIAogaW50IGxvZ2luKGNvbnN0IGNoYXIgKnVzZXJuYW1lLCBjb25zdCBjaGFyICpwYXNzd29yZCkgewogICAgIE1ZU1FMICpjb25uID0gbXlzcWxfaW5pdChOVUxMKTsKQEAgLTIwLDM5ICsyMCw1MyBAQAogICAgICAgICBleGl0KEVYSVRfRkFJTFVSRSk7CiAgICAgfQogCi0gICAgY2hhciAqcXVlcnkgPSBtYWxsb2MoU1RSU0laRSArIDEpOwotICAgIGlmIChxdWVyeSA9PSBOVUxMKSB7Ci0gICAgICAgIGZwcmludGYoc3RkZXJyLCAiRXJyb3IgYWxsb2NhdGluZyBtZW1vcnkgZm9yIHF1ZXJ5XG4iKTsKKyAgICBjaGFyICpzZWxlY3QgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8gQU5EIHBhc3N3b3JkID0gPyI7CisgICAgTVlTUUxfU1RNVCAqc3RtdDsKKyAgICBNWVNRTF9CSU5EIGJpbmRbUEFSQU1TXTsKKworICAgIHN0bXQgPSBteXNxbF9zdG10X2luaXQoY29ubik7CisgICAgaWYgKHN0bXQgPT0gTlVMTCkgeworICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIm15c3FsX3N0bXRfaW5pdCgpIG91dCBvZiBtZW1vcnlcbiIpOwogICAgICAgICBleGl0KEVYSVRfRkFJTFVSRSk7CiAgICAgfQogCi0gICAgaW50IG4gPSBzbnByaW50ZihxdWVyeSwgU1RSU0laRSwgIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSclcycgYW5kIHBhc3N3b3JkPSclcyciLCB1c2VybmFtZSwgcGFzc3dvcmQpOwotICAgIGlmIChuIDwgMCB8fCBuID49IFNUUlNJWkUpIHsKLSAgICAgICAgZnByaW50ZihzdGRlcnIsICJFcnJvciB3cml0aW5nIGludG8gcXVlcnlcbiIpOworICAgIGlmIChteXNxbF9zdG10X3ByZXBhcmUoc3RtdCwgc2VsZWN0LCBzdHJsZW4oc2VsZWN0KSkpIHsKKyAgICAgICAgZnByaW50ZihzdGRlcnIsICJteXNxbF9zdG10X3ByZXBhcmUoKTogJXNcbiIsIG15c3FsX3N0bXRfZXJyb3Ioc3RtdCkpOwogICAgICAgICBleGl0KEVYSVRfRkFJTFVSRSk7CiAgICAgfQogCi0gICAgaWYgKG15c3FsX3F1ZXJ5KGNvbm4sIHF1ZXJ5KSkgewotICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIm15c3FsX3F1ZXJ5OiAlc1xuIiwgbXlzcWxfZXJyb3IoY29ubikpOworICAgIG1lbXNldChiaW5kLCAwLCBzaXplb2YoYmluZCkpOworCisgICAgdW5zaWduZWQgbG9uZyB1c2VybmFtZV9sZW4gPSBzdHJsZW4odXNlcm5hbWUpOworICAgIGJpbmRbMF0uYnVmZmVyX3R5cGUgPSBNWVNRTF9UWVBFX1NUUklORzsKKyAgICBiaW5kWzBdLmJ1ZmZlciA9IHVzZXJuYW1lOworICAgIGJpbmRbMF0uYnVmZmVyX2xlbmd0aCA9IHN0cmxlbih1c2VybmFtZSk7CisgICAgYmluZFswXS5pc19udWxsPSAwOworICAgIGJpbmRbMF0ubGVuZ3RoPSAmdXNlcm5hbWVfbGVuOworCisgICAgdW5zaWduZWQgbG9uZyBwYXNzd29yZF9sZW4gPSBzdHJsZW4ocGFzc3dvcmQpOworICAgIGJpbmRbMV0uYnVmZmVyX3R5cGUgPSBNWVNRTF9UWVBFX1NUUklORzsKKyAgICBiaW5kWzFdLmJ1ZmZlciA9IHBhc3N3b3JkOworICAgIGJpbmRbMV0uYnVmZmVyX2xlbmd0aCA9IHN0cmxlbihwYXNzd29yZCk7CisgICAgYmluZFsxXS5pc19udWxsPSAwOworICAgIGJpbmRbMV0ubGVuZ3RoPSAmcGFzc3dvcmRfbGVuOworCisgICAgaWYgKG15c3FsX3N0bXRfYmluZF9wYXJhbShzdG10LCBiaW5kKSkgeworICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIm15c3FsX3N0bXRfYmluZF9wYXJhbSgpOiAlc1xuIiwgbXlzcWxfc3RtdF9lcnJvcihzdG10KSk7CiAgICAgICAgIGV4aXQoRVhJVF9GQUlMVVJFKTsKICAgICB9CiAKLSAgICBNWVNRTF9SRVMgKnJlc3VsdCA9IG15c3FsX3N0b3JlX3Jlc3VsdChjb25uKTsKLSAgICBpZiAocmVzdWx0ID09IE5VTEwpIHsKLSAgICAgICAgZnByaW50ZihzdGRlcnIsICJteXNxbF9zdG9yZV9yZXN1bHQ6ICVzXG4iLCBteXNxbF9lcnJvcihjb25uKSk7CisgICAgaWYgKG15c3FsX3N0bXRfZXhlY3V0ZShzdG10KSkgeworICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIm15c3FsX3N0bXRfZXhlY3V0ZSgpOiAlc1xuIiwgbXlzcWxfc3RtdF9lcnJvcihzdG10KSk7CiAgICAgICAgIGV4aXQoRVhJVF9GQUlMVVJFKTsKICAgICB9CiAKLSAgICBmcmVlKHF1ZXJ5KTsKLQotICAgIE1ZU1FMX1JPVyByb3c7Ci0gICAgd2hpbGUgKChyb3cgPSBteXNxbF9mZXRjaF9yb3cocmVzdWx0KSkpIHsKLSAgICAgICAgbXlzcWxfY2xvc2UoY29ubik7Ci0gICAgICAgIG15c3FsX2ZyZWVfcmVzdWx0KHJlc3VsdCk7Ci0gICAgICAgIHJldHVybiB0cnVlCisgICAgaW50IHN0YXR1cyA9IG15c3FsX3N0bXRfZmV0Y2goc3RtdCk7CisgICAgbXlzcWxfY2xvc2UoY29ubik7CisgICAgbXlzcWxfc3RtdF9jbG9zZShzdG10KTsKKyAgICBpZiAoc3RhdHVzID09IDEgfHwgc3RhdHVzID09IE1ZU1FMX05PX0RBVEEpIHsKKyAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgIH0KIAotICAgIG15c3FsX2Nsb3NlKGNvbm4pOwotICAgIG15c3FsX2ZyZWVfcmVzdWx0KHJlc3VsdCk7Ci0gICAgcmV0dXJuIGZhbHNlOworICAgIHJldHVybiB0cnVlOwogfQ==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDkgKzIsOCBAQAogaW1wb3J0IHB5bXlzcWwKIAogZGVmIGdldERCQ29ubmVjdGlvbigpOgotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iU29jaWFsTWVkaWFBcHAiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nU29jaWFsTWVkaWFBcHAnKQogICAgIHJldHVybiBjb25uCi0KIAogZGVmIGdldFVzZXIodXNlcmlkKToKICAgICBtZXNzYWdlID0gIiIKQEAgLTEyLDcgKzExLDcgQEAKIAogICAgIGNvbm4gPSBnZXREQkNvbm5lY3Rpb24oKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQotICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgdXNlcmlkLCB1c2VybmFtZSwgZmlyc3RfbmFtZSwgZW1haWwsIGRhdGVfb2ZfYmlydGgsIGxhc3RfaXAsIG1vdGhlcl9tYWlkZW5fbmFtZSwgZ2VuZGVyLCBob2JiaWVzLCBhYm91dF9tZSwgYWN0aXZlLCBpc19hZG1pbiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJpZCA9ICVzIiwgKHVzZXJpZCkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBmaXJzdF9uYW1lLCBob2JiaWVzLCBhYm91dF9tZSBGUk9NIHVzZXJzIFdIRVJFIHVzZXJpZCA9ICVzIiwgKHVzZXJpZCkpCiAgICAgdXNlciA9IGN1cnNvci5mZXRjaG9uZSgpCiAKICAgICBpZiB1c2VyIGlzIE5vbmU6Cg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDkgKzEsOCBAQAogaW1wb3J0IG9zCiBpbXBvcnQgcHlteXNxbAogCi0KIGRlZiBnZXREQkNvbm5lY3Rpb24oKToKLSAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9ImRiIiwgcG9ydD0zMzA2LCB1c2VyPSJyb290IiwgcGFzc3dkPSJsZXRtZWluIiwgZGI9IlNvY2lhbE1lZGlhQXBwIikKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J1NvY2lhbE1lZGlhQXBwJykKICAgICByZXR1cm4gY29ubgogCiBkZWYgZ2V0VXNlcih1c2VyaWQpOgpAQCAtMTIsNyArMTEsNyBAQAogCiAgICAgY29ubiA9IGdldERCQ29ubmVjdGlvbigpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IocHlteXNxbC5jdXJzb3JzLkRpY3RDdXJzb3IpCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCB1c2VyaWQsIHVzZXJuYW1lLCBmaXJzdF9uYW1lLCBlbWFpbCwgZGF0ZV9vZl9iaXJ0aCwgbGFzdF9pcCwgbW90aGVyX21haWRlbl9uYW1lLCBnZW5kZXIsIGhvYmJpZXMsIGFib3V0X21lLCBhY3RpdmUsIGlzX2FkbWluIEZST00gdXNlcnMgV0hFUkUgdXNlcmlkID0gJXMiLCAodXNlcmlkKSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIGZpcnN0X25hbWUsIGhvYmJpZXMsIGFib3V0X21lIEZST00gdXNlcnMgV0hFUkUgdXNlcmlkID0gJXMiLCAodXNlcmlkKSkKICAgICB1c2VyID0gY3Vyc29yLmZldGNob25lKCkKIAogICAgIGlmIHVzZXIgaXMgTm9uZToK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNCBAQAoraW1wb3J0IGh0bWwKKworZGVmIGVuY29kZV9mb3JfaHRtbChlcnJvcl9tZXNzYWdlKTogICAgCisgICAgcmV0dXJuIGh0bWwuZXNjYXBlKGVycm9yX21lc3NhZ2Up
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDQgKzEsNCBAQAogaW1wb3J0IGh0bWwKIAogZGVmIGVuY29kZV9mb3JfaHRtbChlcnJvcl9tZXNzYWdlKTogICAgCi1yZXR1cm4gZXJyb3JfbWVzc2FnZSsgICAgcmV0dXJuIGh0bWwuZXNjYXBlKGVycm9yX21lc3NhZ2Up
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDQgKzEsNCBAQAotaW1wb3J0dCBodG1sCitpbXBvcnQgaHRtbAogCiBkZWYgZW5jb2RlX2Zvcl9odG1sKGVycm9yX21lc3NhZ2UpOiAgICAKLSAgICByZXR1ciBlcnJvcl9tZXNzYWdlKyAgICByZXR1cm4gaHRtbC5lc2NhcGUoZXJyb3JfbWVzc2FnZSk=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDQgKzEsNCBAQAogaW1wb3J0IGh0bWwKIAogZGVmIGVuY29kZV9mb3JfaHRtbChlcnJvcl9tZXNzYWdlKTogICAgCi0gICAgcmV0dXIgZXJyb3JfbWVzc2FnZSsgICAgcmV0dXJuIGh0bWwuZXNjYXBlKGVycm9yX21lc3NhZ2Up
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDcgKzIsOCBAQAogLy8gZm9yd2FyZCBkZWNscmF0aW9uIG9mIGZ1bmN0aW9uIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMKIHZvaWQgZXNjYXBlKHN0ZDo6c3RyaW5nICpkYXRhKTsKIAotdGQ6OnN0cmluZyBFbmNvZGVGb3JIdG1sKHN0ZDo6c3RyaW5nIGVycm9yX21lc3NhZ2UpCitzdGQ6OnN0cmluZyBFbmNvZGVGb3JIdG1sKHN0ZDo6c3RyaW5nIGVycm9yX21lc3NhZ2UpCiB7CisgICAgZXNjYXBlKCZlcnJvcl9tZXNzYWdlKTsKICAgICByZXR1cm4gZXJyb3JfbWVzc2FnZTsKIH0=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsOSBAQAorI2luY2x1ZGUgPHN0cmluZz4KKy8vIGZvcndhcmQgZGVjbHJhdGlvbiBvZiBmdW5jdGlvbiB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzCit2b2lkIGVzY2FwZShzdGQ6OnN0cmluZyAqZGF0YSk7CisKK3N0ZDo6c3RyaW5nIEVuY29kZUZvckh0bWwoc3RkOjpzdHJpbmcgZXJyb3JfbWVzc2FnZSkKK3sKKyAgICBlc2NhcGUoJmVycm9yX21lc3NhZ2UpOworICAgIHJldHVybiBlcnJvcl9tZXNzYWdlOworfQ==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjIgQEAKK3VzaW5nIFN5c3RlbTsKK3VzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOworCituYW1lc3BhY2UgZW5naW5lLmRlbW8KK3sKKyAgcHVibGljIGNsYXNzIEV4dGVybmFsCisgIHsKKyAgICBwdWJsaWMgRXh0ZXJuYWwoKSB7fQorCisgICAgcHVibGljIHN0YXRpYyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBHZXRIZWFkZXJzKERpY3Rpb25hcnk8c3RyaW5nLCBzdHJpbmc+IG9yaWdpbmFsSGVhZGVycykgCisgICAgeworICAgICAgdmFyIG5ld0hlYWRlcnMgPSBTZXRSZWZlcnJlclBvbGljeShvcmlnaW5hbEhlYWRlcnMsICJuby1yZWZlcnJlciIpOworICAgICAgcmV0dXJuIG5ld0hlYWRlcnM7CisgICAgfQorCisgICAgcHJpdmF0ZSBzdGF0aWMgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gU2V0UmVmZXJyZXJQb2xpY3koRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gaGVhZGVycywgc3RyaW5nIHBvbGljeSkKKyAgICB7CisgICAgICBoZWFkZXJzWyJSZWZlcnJlci1Qb2xpY3kiXSA9IHBvbGljeTsKKyAgICAgIHJldHVybiBoZWFkZXJzOworICAgIH0KKyAgfQorfQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDYgKzEsNSBAQAogdXNpbmcgU3lzdGVtOwogdXNpbmcgU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWM7Ci0KIAogbmFtZXNwYWNlIGVuZ2luZS5kZW1vCiB7CkBAIC0xMCw3ICs5LDggQEAKIAogICAgIHB1YmxpYyBzdGF0aWMgRGljdGlvbmFyeTxzdHJpbmcsIHN0cmluZz4gR2V0SGVhZGVycyhEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBvcmlnaW5hbEhlYWRlcnMpIAogICAgIHsKLSAgICAgIHJldHVybiBvcmlnaW5hbEhlYWRlcnM7CisgICAgICB2YXIgbmV3SGVhZGVycyA9IFNldFJlZmVycmVyUG9saWN5KG9yaWdpbmFsSGVhZGVycywgIm5vLXJlZmVycmVyIik7CisgICAgICByZXR1cm4gbmV3SGVhZGVyczsKICAgICB9CiAKICAgICBwcml2YXRlIHN0YXRpYyBEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBTZXRSZWZlcnJlclBvbGljeShEaWN0aW9uYXJ5PHN0cmluZywgc3RyaW5nPiBoZWFkZXJzLCBzdHJpbmcgcG9saWN5KQo=
False,
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDYgKzEsNSBAQAogaW1wb3J0IG9zCiBpbXBvcnQgcHlteXNxbAotCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6CkBAIC04LDggKzcsOCBAQAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nMScsIGRiPSdvd2FzcDEwc3FsaScpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCB1c2VyX2lkIEZST00gdXNlcnMgV0hFUkUgdXNlcl9uYW1lID0gJyIgKwotICAgICAgICAgICAgICAgICAgIHVzZXJuYW1lICsgIicgQU5EIHBhc3N3b3JkID0gJyIgKyBwYXNzd29yZCArICInOyIpCisgICAgY3Vyc29yLmV4ZWN1dGUoCisgICAgICAgICJTRUxFQ1QgdXNlcl9pZCBGUk9NIHVzZXJzIFdIRVJFIHVzZXJfbmFtZSA9ICVzIEFORCBwYXNzd29yZCA9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQpAQCAtMzEsOSArMzAsOSBAQAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nMScsIGRiPSdvd2FzcDEwc3FsaScpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgc3RhdGVtZW50ID0gIlNFTEVDVCAqIEZST00gcHJvamVjdHMgV0hFUkUgcHJvamVjdF9pZCA9ICIgKyBpZFByb2plY3QgKyAiOyIKKyAgICBzdGF0ZW1lbnQgPSAiU0VMRUNUICogRlJPTSBwcm9qZWN0cyBXSEVSRSBwcm9qZWN0X2lkID0gJXM7IgogCi0gICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50KQorICAgIGN1cnNvci5leGVjdXRlKHN0YXRlbWVudCwgKGlkUHJvamVjdCkpCiAgICAgcmVzcG9uc2UgPSBjdXJzb3IuZmV0Y2hhbGwoKQogICAgIGRhdGEgPSBbXQogICAgIGZvciByb3cgaW4gcmVzcG9uc2U6Cg==
False,
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0zLDEwICszLDI4IEBACiBpbXBvcnQgcHlteXNxbAogCiBkZWYgcGFyc2VfdXBsb2FkKHhtbF9kYXRhKToKLSAgICB0cnk6Ci0gICAgICAgIGRhdGEgPSB1bnRhbmdsZS5wYXJzZSh4bWxfZGF0YSwgZmVhdHVyZV9leHRlcm5hbF9nZXM9VHJ1ZSkKLSAgICAgICAgc2VhcmNoX3Jlc3VsdHMuYXBwZW5kKHsibmFtZSI6IGRhdGF9KQotICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKLSAgICAgICAgc2VhcmNoX3Jlc3VsdHMuYXBwZW5kKHsiZXJyb3IiOiAiZXJyb3IgaW4geG1sIGZvcm1hdCJ9KQotICAgIAorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoCisgICAgICAgIGhvc3Q9J2xvY2FsaG9zdCcsCisgICAgICAgIHBvcnQ9MzMwNiwKKyAgICAgICAgdXNlcj0ncm9vdCcsCisgICAgICAgIHBhc3N3ZD0nbGV0bWVpbicsCisgICAgICAgIGRiPSdQaG9uZWJvb2tBcHAnCisgICAgKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQorCisgICAgZGF0YSA9IHVudGFuZ2xlLnBhcnNlKHhtbF9kYXRhLCBmZWF0dXJlX2V4dGVybmFsX2dlcz1GYWxzZSkKKworICAgIHNlYXJjaF9yZXN1bHRzID0gbGlzdCgpCisgICAgZm9yIHVzZXIgaW4gZGF0YS5Vc2Vycy5Vc2VyOgorICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIG5hbWUsIGVtYWlsLCBwaG9uZSBGUk9NIHRibF91c2VyIFdIRVJFIG5hbWUgTElLRSAnJSIgKyB1c2VyLk5hbWUuY2RhdGEgKyAiJSciKQorICAgICAgICByZXN1bHRzID0gY3Vyc29yLmZldGNoYWxsKCkKKyAgICAgICAgaWYgbGVuKHJlc3VsdHMpID4gMDoKKyAgICAgICAgICAgIHNlYXJjaF9yZXN1bHRzLmFwcGVuZCh7Im5hbWUiOiB1c2VyLk5hbWUuY2RhdGEsICJyZXN1bHRzIjogcmVzdWx0c30pCisgICAgICAgIGVsc2U6CisgICAgICAgICAgICBzZWFyY2hfcmVzdWx0cy5hcHBlbmQoeyJlcnJvciI6ICJObyByZXN1bHRzIGZvdW5kIGZvciB7MH0iLmZvcm1hdCh1c2VyLk5hbWUuY2RhdGEpfSkKKworICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQorCiAgICAgcmV0dXJuIHNlYXJjaF9yZXN1bHRzCg==
False,
False,
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xMSw3ICsxMSw2IEBACiAjaW5jbHVkZSA8c3N0cmVhbT4KIHVzaW5nIG5hbWVzcGFjZSBzdGQ7CiAKLQogc3RyaW5nIFByaXZhdGVLZXkgPSAiMDAxMTIyMzM0NDU1NjY3Nzg4OTlhYWJiY2NkZGVlZmYwMDExMjIzMzQ0NTU2Njc3ODg5OWFhYmJjY2RkZWVmZiI7CiAKIENyeXB0b1BQOjpTZWNCeXRlQmxvY2sgaGV4VG9CeXRlQmxvY2soY29uc3Qgc3RkOjpzdHJpbmcmIGhleCk7CkBAIC0yMiw3ICsyMSw5IEBACiAgICAgc2l6ZV90IHNpZ25hdHVyZUxlbmd0aCA9IHNpZ25lci5NYXhTaWduYXR1cmVMZW5ndGgoKTsKICAgICBDcnlwdG9QUDo6U2VjQnl0ZUJsb2NrIHNpZ25hdHVyZShzaWduYXR1cmVMZW5ndGgpOwogCi0gICAgcmV0dXJuIG1lc3NhZ2U7CisgICAgc2lnbmVyLlNpZ25NZXNzYWdlKENyeXB0b1BQOjpOdWxsUk5HKCksIChjb25zdCBDcnlwdG9QUDo6Ynl0ZSopbWVzc2FnZS5kYXRhKCksIG1lc3NhZ2Uuc2l6ZSgpLCBzaWduYXR1cmUpOworCisgICAgcmV0dXJuIGdldEhleFNpZ25hdHVyZShzaWduYXR1cmUpOwogfQogCiAvLyBoZWxwZXIgZnVuY3Rpb24gdG8gY29udmVydCBoZXggc3RyaW5nIHRvIGJ5dGUgYmxvY2sK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE5ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQgPSAnIisgcGFzc3dvcmQgKyAiJzsiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLQotICAgIGlmIG5vdCBkYXRhOgorICAgIGlmIGxlbihkYXRhKSBpcyAwOgogICAgICAgICByZXR1cm4gRmFsc2UKICAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQgPSAnIisgcGFzc3dvcmQgKyAiJzsiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiBub3QgZGF0YToKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCiAgICAgcmV0dXJuIFRydWUK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC01LDggKzUsNiBAQAogI2luY2x1ZGUgPGNwcGNvbm4vZXhjZXB0aW9uLmg+CiAjaW5jbHVkZSA8Y3BwY29ubi9yZXN1bHRzZXQuaD4KICNpbmNsdWRlIDxjcHBjb25uL3ByZXBhcmVkX3N0YXRlbWVudC5oPgotI2luY2x1ZGUgPGNwcGNvbm4vc3RhdGVtZW50Lmg+Ci0KICNpbmNsdWRlIDxpb21hbmlwPgogI2luY2x1ZGUgPHNzdHJlYW0+CiAjaW5jbHVkZSA8b3BlbnNzbC9zaGEuaD4KQEAgLTI3LDE1ICsyNSwxNyBAQAogewogICAgICB0cnkKICAgICB7Ci0JCXN0cmluZyBzcWwgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQgPSAnIiArIHBhc3N3b3JkICsgIiciOwotICAgICAgICBzcWw6OlN0YXRlbWVudCAqc3RhdGVtZW50ID0gY29ubi0+Y3JlYXRlU3RhdGVtZW50KCk7Ci0JCXNxbDo6UmVzdWx0U2V0KiByZXN1bHRzID0gc3RhdGVtZW50LT5leGVjdXRlUXVlcnkoc3FsKTsKKyAgICAgICAgc3FsOjpDb25uZWN0aW9uICpjb25uID0gZXN0YWJsaXNoQ29ubmVjdGlvbigpOworICAgICAgICBzcWw6OlByZXBhcmVkU3RhdGVtZW50ICpwcmVwX3N0bXQgPSBjb25uLT5wcmVwYXJlU3RhdGVtZW50KCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gPyBhbmQgcGFzc3dvcmQgPSA/Iik7CisgICAgICAgIHByZXBfc3RtdC0+c2V0U3RyaW5nKDEsIHVzZXJuYW1lKTsKKyAgICAgICAgcHJlcF9zdG10LT5zZXRTdHJpbmcoMiwgcGFzc3dvcmQpOworICAgICAgICBzcWw6OlJlc3VsdFNldCogcmVzdWx0cyA9IHByZXBfc3RtdC0+ZXhlY3V0ZVF1ZXJ5KCk7CiAgICAgICAgIGJvb2wgcmVzdWx0ID0gZmFsc2U7CiAgICAgICAgIGlmIChyZXN1bHRzLT5uZXh0KCkpIHsKICAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7CiAgICAgICAgIH0KICAgICAgICAgZGVsZXRlIHJlc3VsdHM7Ci0gICAgICAgIGRlbGV0ZSBzdGF0ZW1lbnQ7CisgICAgICAgIGRlbGV0ZSBwcmVwX3N0bXQ7CiAgICAgICAgIGRlbGV0ZSBjb25uOwogICAgICAgICByZXR1cm4gcmVzdWx0OyAgICAgICAgCiAgICAgfQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNDggQEAKKyNpbmNsdWRlIDxzdGRsaWIuaD4KKyNpbmNsdWRlIDxpb3N0cmVhbT4KKyNpbmNsdWRlICJteXNxbF9jb25uZWN0aW9uLmgiCisjaW5jbHVkZSA8Y3BwY29ubi9kcml2ZXIuaD4KKyNpbmNsdWRlIDxjcHBjb25uL2V4Y2VwdGlvbi5oPgorI2luY2x1ZGUgPGNwcGNvbm4vcmVzdWx0c2V0Lmg+CisjaW5jbHVkZSA8Y3BwY29ubi9wcmVwYXJlZF9zdGF0ZW1lbnQuaD4KKyNpbmNsdWRlIDxpb21hbmlwPgorI2luY2x1ZGUgPHNzdHJlYW0+CisjaW5jbHVkZSA8b3BlbnNzbC9zaGEuaD4KK3VzaW5nIG5hbWVzcGFjZSBzdGQ7CisKK3NxbDo6Q29ubmVjdGlvbiAqZXN0YWJsaXNoQ29ubmVjdGlvbigpIHsKKyAgICBzcWw6OkRyaXZlciAqZHJpdmVyOworICAgIHNxbDo6Q29ubmVjdGlvbiAqY29ubjsKKyAgICBzcWw6OlN0YXRlbWVudCAqc3RtdDsKKworICAgIC8qIENyZWF0ZSBhIGNvbm5lY3Rpb24gKi8KKyAgICBkcml2ZXIgPSBnZXRfZHJpdmVyX2luc3RhbmNlKCk7CisgICAgY29ubiA9IGRyaXZlci0+Y29ubmVjdCgidGNwOi8vZGI6MzMwNi9Tb2NpYWxNZWRpYUFwcCIsICJyb290IiwgImxldG1laW4iKTsKKyAgICByZXR1cm4gY29ubjsKK30KKworYm9vbCBMb2dpbihzdGQ6OnN0cmluZyB1c2VybmFtZSwgc3RkOjpzdHJpbmcgcGFzc3dvcmQpCit7CisgICAgIHRyeQorICAgIHsKKyAgICAgICAgc3FsOjpDb25uZWN0aW9uICpjb25uID0gZXN0YWJsaXNoQ29ubmVjdGlvbigpOworICAgICAgICBzcWw6OlByZXBhcmVkU3RhdGVtZW50ICpwcmVwX3N0bXQgPSBjb25uLT5wcmVwYXJlU3RhdGVtZW50KCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gPyBhbmQgcGFzc3dvcmQgPSA/Iik7CisgICAgICAgIHByZXBfc3RtdC0+c2V0U3RyaW5nKDEsIHVzZXJuYW1lKTsKKyAgICAgICAgcHJlcF9zdG10LT5zZXRTdHJpbmcoMiwgcGFzc3dvcmQpOworICAgICAgICBzcWw6OlJlc3VsdFNldCogcmVzdWx0cyA9IHByZXBfc3RtdC0+ZXhlY3V0ZVF1ZXJ5KCk7CisgICAgICAgIGJvb2wgcmVzdWx0ID0gZmFsc2U7CisgICAgICAgIGlmIChyZXN1bHRzLT5uZXh0KCkpIHsKKyAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7CisgICAgICAgIH0KKyAgICAgICAgZGVsZXRlIHJlc3VsdHM7CisgICAgICAgIGRlbGV0ZSBwcmVwX3N0bXQ7CisgICAgICAgIGRlbGV0ZSBjb25uOworICAgICAgICByZXR1cm4gcmVzdWx0OyAgICAgICAgCisgICAgfQorICAgIGNhdGNoIChleGNlcHRpb24gJmUpIAorICAgIHsKKyAgICAgICAgY291dCA8PCAiRXJyb3I6ICIgPDwgZS53aGF0KCkgPDwgZW5kbDsKKyAgICAgICAgdGhyb3cgZTsKKyAgICB9CisgICAgcmV0dXJuIGZhbHNlOworfQ==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDIwICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQgPSAnIisgcGFzc3dvcmQgKyAiJzsiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCi0gICAgCiAKLSAgICBpZiBub3QgZGF0YToKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0KICAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xOSw3ICsxOSw3IEBACiAKICAgICByZXR1cm4gVHJ1ZQogCi1kZWYgbG9naW4odXNlcm5hbWUgcGFzc3dvcmQpOgorZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6CiAgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdJc3N1ZVRyYWNrZXInKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIApAQCAtMzUsNCArMzUsNCBAQAogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICByZXR1cm4gcmVzdWx0WzBdID09IGRpZ2VzdCsgICAgcmV0dXJuIHJlc3VsdFswXSA9PSBkaWdlc3QK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC02LDQgKzYsNCBAQAogCiAKIGRlZiBnZXRfc2hhcmVkX3NlY3JldChwcmltZSwgc2VydmVyX3B1YmxpY19rZXkpOgotICAgIHJldHVybiBwb3coc2VydmVyX3B1YmxpY19rZXksIFBSSVZBVEVfS0VZLCBwcmltZSkrICAgIHJldHVybiBwb3coc2VydmVyX3B1YmxpY19rZXksIFBSSVZBVEVfS0VZLCBwcmltZSkK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0zNSw0ICszNSw0IEBACiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIHJldHVybiByZXN1bHRbMF0gPT0gZGlnZXN0KyAgICByZXR1cm4gcmVzdWx0WzBdID09IGRpZ2VzdAo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xMSw0ICsxMSw0IEBACiAgICAgcmV0dXJuIGpzb24uZHVtcHMoY29uZmlnKQogCiBkZWYgZm9ybWF0X3JhdGVfbGltaXQobnVtOiBpbnQsIHRpbWVfY29uc3RhbnQ6IHN0cikgLT4gc3RyOgotICAgIHJldHVybiBmIntudW19IHBlciB7dGltZV9jb25zdGFudH0iKyAgICByZXR1cm4gZiJ7bnVtfSBwZXIge3RpbWVfY29uc3RhbnR9Igo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yMyw0ICsyMyw0IEBACiAKIAogZGVmIGRlY29kZV91cmwoZW5jb2RlZF91cmwpOgotICAgIHJldHVybiB1cmxsaWIucGFyc2UudW5xdW90ZShlbmNvZGVkX3VybCkrICAgIHJldHVybiB1cmxsaWIucGFyc2UudW5xdW90ZShlbmNvZGVkX3VybCkK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDIzICsxLDY1IEBACiBpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCitpbXBvcnQganNvbgoraW1wb3J0IHJlcXVlc3RzCitpbXBvcnQgand0CiAKLWRlZiBnZXRfb3JkZXJzKHVzZXJpZCwgYXBpa2V5KToKK2RlZiBnZXRDb25uZWN0aW9uKCk6CiAgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdFY29tbWVyY2VBcHAnKQotICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKLSAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIHVzZXJpZCxhcGlrZXkgRlJPTSB1c2VycyBXSEVSRSB1c2VyaWQ9ICVzIEFORCBhcGlrZXk9ICVzIExJTUlUIDE7IiwgKHVzZXJpZCxhcGlrZXkpKQotICAgIHVzZXIgPSBjdXJzb3IuZmV0Y2hvbmUoKQorICAgIHJldHVybiBjb25uCiAKLSAgICBkYXRhID0gW10KLSAgICBpZiB1c2VyIGlzIG5vdCBOb25lOgotICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcihweW15c3FsLmN1cnNvcnMuRGljdEN1cnNvcikKLSAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCBvcmRlcm5hbWUsb3JkZXJpZCx1c2VyaWQsIHRvdGFsIEZST00gb3JkZXJzIFdIRVJFIHVzZXJpZD0gJXM7ICAgICIsICh1c2VyaWQpKQotICAgICAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKK2RlZiB2aWV3UHJvZHVjdChwcm9kdWN0SWQsIHRva2VuKToKKyAgICBtZXNzYWdlID0gIiIKIAorICAgIGNvbm4gPSBnZXRDb25uZWN0aW9uKCkKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcihweW15c3FsLmN1cnNvcnMuRGljdEN1cnNvcikKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIHByb2R1Y3RfaWQsIHByb2R1Y3RfbmFtZSwgZGVzY3JpcHRpb24sIHByaWNlLCBwaWN0dXJlIEZST00gcHJvZHVjdCBXSEVSRSBwcm9kdWN0X2lkID0gJXMiLChwcm9kdWN0SWQpKQorICAgIHByb2R1Y3QgPSBjdXJzb3IuZmV0Y2hvbmUoKQorCisgICAgaWYgcHJvZHVjdCBpcyBOb25lOgorICAgICAgICBtZXNzYWdlID0gIlByb2R1Y3Qgbm90IGZvdW5kISIKKworICAgIHJlc3VsdHMgPSBsaXN0KCkKKyAgICByZXN1bHRzLmFwcGVuZCh7Im1lc3NhZ2UiIDogbWVzc2FnZSwgInByb2R1Y3QiOiBwcm9kdWN0fSkKKyAgICBjb25uLmNvbW1pdCgpCisgICAgY3Vyc29yLmNsb3NlKCkKKyAgICBjb25uLmNsb3NlKCkKKworICAgIHJldHVybiByZXN1bHRzCisKK2RlZiBkZWxldGVQcm9kdWN0KHByb2R1Y3RJZCwgdG9rZW4pOgorICAgIGlmIGlzQWRtaW4odG9rZW4pIGlzIEZhbHNlOgorICAgICAgICByZXR1cm4KKworICAgIHJlc3VsdHMgPSBsaXN0KCkKKworICAgIGNvbm4gPSBnZXRDb25uZWN0aW9uKCkKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcihweW15c3FsLmN1cnNvcnMuRGljdEN1cnNvcikKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIHByb2R1Y3RfaWQsIHByb2R1Y3RfbmFtZSwgZGVzY3JpcHRpb24sIHByaWNlLCBwaWN0dXJlIEZST00gcHJvZHVjdCBXSEVSRSBwcm9kdWN0X2lkID0gJXMiLCAocHJvZHVjdElkKSkKKyAgICBwcm9kdWN0ID0gY3Vyc29yLmZldGNob25lKCkKKworICAgIGlmIHByb2R1Y3QgaXMgbm90IE5vbmU6CisgICAgICAgIGN1cnNvci5leGVjdXRlKCJERUxFVEUgRlJPTSBwcm9kdWN0IFdIRVJFIHByb2R1Y3RfaWQgPSAlcyIsIChwcm9kdWN0SWQpKQogICAgICAgICBjb25uLmNvbW1pdCgpCiAgICAgICAgIGN1cnNvci5jbG9zZSgpCisgICAgICAgIG1lc3NhZ2UgPSAiUHJvZHVjdCBoYXMgYmVlbiBkZWxldGVkISIKKyAgICBlbHNlOgorICAgICAgICBtZXNzYWdlID0gIlByb2R1Y3Qgbm90IGZvdW5kISIKIAorICAgIHJlc3VsdHMuYXBwZW5kKHsibWVzc2FnZSIgOiBtZXNzYWdlfSkKKworICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQotICAgIHJlc3VsdHMgPSBsaXN0KCkKLSAgICByZXN1bHRzLmFwcGVuZCh7InJlc3VsdHMiOiBkYXRhfSkKIAotICAgIHJldHVybiByZXN1bHRzKyAgICByZXR1cm4gcmVzdWx0cworCitkZWYgaXNBZG1pbih0b2tlbik6CisKKyAgICBpZiB0b2tlbjoKKyAgICAgICAgZGVjb2RlZCA9IGp3dC5kZWNvZGUodG9rZW4sICdsdUJFSyhQJHhbJVplUTRIQUQ1SmkxWio7MEdjejU4M3lQIXZ8S0NtTkVERG1RRi85UCk+R3BKSz5DeH0zO1InLCBhbGdvcml0aG09J0hTMjU2JykKKworICAgIGlmIGRlY29kZWRbImlzX2FkbWluIl0gPT0gMToKKyAgICAgICAgcmV0dXJuIFRydWUKKworICAgIHJldHVybiBGYWxzZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xICsxLDE4IEBACi1mb29iYXIraW1wb3J0IG9zCitpbXBvcnQgcHlteXNxbAorCisKK2RlZiBsb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpOgorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nU29jaWFsTWVkaWFBcHAnKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKKworICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKKworICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQorCisgICAgaWYgbGVuKGRhdGEpIGlzIDA6CisgICAgICAgIHJldHVybiBGYWxzZQorICAgIHJldHVybiBUcnVlCg==
