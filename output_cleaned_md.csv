passed,diff_delta
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNTMgQEAKK2ltcG9ydCBqd3QKK2ltcG9ydCBweW15c3FsCisKKworY2xhc3MgTG9nZ2VkT3V0RXhjZXB0aW9uKEV4Y2VwdGlvbik6CisgICAgJycnUmFpc2luZyBhIExvZ2dlZE91dEV4Y2VwdGlvbiB3aWxsIHJlZGlyZWN0IHRoZSB1c2VyIHRvIHRoZSBsb2dpbiBzY3JlZW4KKyAgICBpbiB0aGUgYXBwLgorICAgICcnJworICAgIHBhc3MKKworZGVmIGFjY291bnRfbG9va3VwKGFjY291bnRfaWQsIGp3dF90b2tlbik6CisKKyAgICB0cnk6CisgICAgICAgIHRva2VuID0gand0LmRlY29kZShqd3RfdG9rZW4sICdsdUJFSyhQJHhbJVplUTRIQUQ1SmkxWio7MEdjejU4M3lQIXZ8S0NtTkVERG1RRi85UCk+R3BKSz5DeH0zO1InLCBhbGdvcml0aG09J0hTMjU2JykKKyAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CisgICAgICAgIHJhaXNlIExvZ2dlZE91dEV4Y2VwdGlvbignVXNlciBpcyBub3QgbG9nZ2VkIGluJykKKworICAgIGlmICJsb2dnZWRfaW4iIGluIHRva2VuLmtleXMoKSBhbmQgdG9rZW5bImxvZ2dlZF9pbiJdID09IFRydWU6CisgICAgICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoCisgICAgICAgICAgICBob3N0PSdteXNxbCcsCisgICAgICAgICAgICBwb3J0PTMzMDYsCisgICAgICAgICAgICB1c2VyPSdyb290JywKKyAgICAgICAgICAgIHBhc3N3ZD0nbGV0bWVpbicsCisgICAgICAgICAgICBkYj0nQmFua0FwcCcKKyAgICAgICAgKQorICAgICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisKKyAgICAgICAgc3RhdGVtZW50ID0gIlNFTEVDVCB1c2VybmFtZSBGUk9NIHRibF91c2VyIFdIRVJFIGlkID0gIiArIGFjY291bnRfaWQgKyAiOyIKKyAgICAgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50KQorICAgICAgICB1c2VybmFtZV9yZXN1bHRzID0gY3Vyc29yLmZldGNob25lKCkKKyAgICAgICAgaWYgdXNlcm5hbWVfcmVzdWx0cyBhbmQgdXNlcm5hbWVfcmVzdWx0c1swXSAhPSB0b2tlblsidXNlcm5hbWUiXToKKyAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignWW91IGRvIG5vdCBoYXZlIGFjY2VzcycpCisKKyAgICAgICAgaWYgdXNlcm5hbWVfcmVzdWx0czoKKyAgICAgICAgICAgIHVzZXJuYW1lID0gdXNlcm5hbWVfcmVzdWx0c1swXQorCisgICAgICAgICAgICBzdGF0ZW1lbnQgPSAiU0VMRUNUIGJhbGFuY2UsIGRvYiBGUk9NIHRibF9hY2NvdW50IFdIRVJFIHVzZXJfaWQgPSAiICsgYWNjb3VudF9pZCArICI7IgorICAgICAgICAgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50KQorICAgICAgICAgICAgYWNjb3VudF9yZXN1bHRzID0gY3Vyc29yLmZldGNob25lKCkKKworICAgICAgICAgICAgY29ubi5jb21taXQoKQorICAgICAgICAgICAgY3Vyc29yLmNsb3NlKCkKKyAgICAgICAgICAgIGNvbm4uY2xvc2UoKQorCisgICAgICAgICAgICByZXR1cm4geworICAgICAgICAgICAgICAgICdiYWxhbmNlJzogYWNjb3VudF9yZXN1bHRzWzBdLAorICAgICAgICAgICAgICAgICdkb2InOiBhY2NvdW50X3Jlc3VsdHNbMV0sCisgICAgICAgICAgICAgICAgJ3VzZXJuYW1lJzogdXNlcm5hbWUKKyAgICAgICAgICAgIH0KKyAgICAgICAgZWxzZToKKyAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbignQWNjb3VudCBub3QgZm91bmQnKQorICAgIGVsc2U6CisgICAgICAgIHJhaXNlIExvZ2dlZE91dEV4Y2VwdGlvbignVXNlciBpcyBub3QgbG9nZ2VkIGluJykK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjEgQEAKK2ltcG9ydCBvcworCitIQVNIX0xFTkdUSCA9IDE2CisKK2RlZiBoYXNoX21lc3NhZ2UobWVzc2FnZSk6CisgICAgaGFzaF9zdW0gPSBzdHJpbmdfdG9faW50KG1lc3NhZ2UpCisgICAgZml4ZWRfbGVuZ3RoX2hhc2ggPSBmaXhlZF9sZW5ndGgoaGFzaF9zdW0pCisgICAgcmV0dXJuIGZpeGVkX2xlbmd0aF9oYXNoCisKK2RlZiBzdHJpbmdfdG9faW50KG1lc3NhZ2UpOgorICAgIHN1bV9vZl91dGZfdmFsdWVzID0gMAorICAgIGVuY29kZWRfbWVzc2FnZSA9IG1lc3NhZ2UuZW5jb2RlKCJ1dGYtOCIpCisgICAgZm9yIGluZGV4LCB1dGZfdmFsdWUgaW4gZW51bWVyYXRlKGVuY29kZWRfbWVzc2FnZSwgMSk6CisgICAgICAgIHN1bV9vZl91dGZfdmFsdWVzICs9IHV0Zl92YWx1ZSAqICgzMSAqKiBpbmRleCkKKyAgICByZXR1cm4gc3VtX29mX3V0Zl92YWx1ZXMKKworZGVmIGZpeGVkX2xlbmd0aChoYXNoX3ZhbHVlKToKKyAgICBzdHJfaGFzaF92YWx1ZSA9IHN0cihoYXNoX3ZhbHVlKQorICAgIGZvciBpIGluIHJhbmdlKDEsIEhBU0hfTEVOR1RIICsgMSAtIGxlbihzdHJfaGFzaF92YWx1ZSkpOgorICAgICAgICBzdHJfaGFzaF92YWx1ZSArPSBzdHIoaGFzaF92YWx1ZSAlIGkpCisgICAgcmV0dXJuIHN0cl9oYXNoX3ZhbHVlWzpIQVNIX0xFTkdUSF0=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xNSw0ICsxNSw0IEBACiAKICAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0gICAgcmV0dXJuIFRydWUrICAgIHJldHVybiBUcnVlCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE5ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZCA9ICVzOyIKLSAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIG5vdCBkYXRhOgorICAgIGlmIGxlbihkYXRhKSBpcyAwOgogICAgICAgICByZXR1cm4gRmFsc2UKLQogICAgIHJldHVybiBUcnVlCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xMCw0ICsxMCw0IEBACiAgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCAocG9zdCwgdXNlcm5hbWUpKQogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQotICAgIGNvbm4uY2xvc2UoKSsgICAgY29ubi5jbG9zZSgpCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMTMgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworZGVmIGFkZF9wb3N0KHBvc3QsIHVzZXJuYW1lKToKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J1NvY2lhbE1lZGlhQXBwJykKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisKKyAgICBzdGF0ZW1lbnQgPSAiSU5TRVJUIElOVE8gcG9zdHMgVkFMVUVTICglcywlcyk7IgorCisgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCAocG9zdCwgdXNlcm5hbWUpKQorICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC00LDQgKzQsNCBAQAogICAgIHJlc3VsdCA9IHVybHBhcnNlKGhyZWYpCiAgICAgaWYgcmVzdWx0LnNjaGVtZSBpbiAoJ2h0dHAnLCAnaHR0cHMnKToKICAgICAgICAgcmV0dXJuIGhyZWYKLSAgICByZXR1cm4gIiIKKyAgICByZXR1cm4gIiI=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMTggQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworCitkZWYgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKToKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J1NvY2lhbE1lZGlhQXBwJykKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCisgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCisKKyAgICBjb25uLmNvbW1pdCgpCisgICAgY3Vyc29yLmNsb3NlKCkKKyAgICBjb25uLmNsb3NlKCkKKworICAgIGlmIGxlbihkYXRhKSBpcyAwOgorICAgICAgICByZXR1cm4gRmFsc2UKKyAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNjUgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKK2ltcG9ydCBqc29uCitpbXBvcnQgcmVxdWVzdHMKK2ltcG9ydCBqd3QKKworZGVmIGdldENvbm5lY3Rpb24oKToKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J0Vjb21tZXJjZUFwcCcpCisgICAgcmV0dXJuIGNvbm4KKworZGVmIHZpZXdQcm9kdWN0KHByb2R1Y3RJZCwgdG9rZW4pOgorICAgIG1lc3NhZ2UgPSAiIgorCisgICAgY29ubiA9IGdldENvbm5lY3Rpb24oKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgcHJvZHVjdF9pZCwgcHJvZHVjdF9uYW1lLCBkZXNjcmlwdGlvbiwgcHJpY2UsIHBpY3R1cmUgRlJPTSBwcm9kdWN0IFdIRVJFIHByb2R1Y3RfaWQgPSAlcyIsKHByb2R1Y3RJZCkpCisgICAgcHJvZHVjdCA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBpZiBwcm9kdWN0IGlzIE5vbmU6CisgICAgICAgIG1lc3NhZ2UgPSAiUHJvZHVjdCBub3QgZm91bmQhIgorCisgICAgcmVzdWx0cyA9IGxpc3QoKQorICAgIHJlc3VsdHMuYXBwZW5kKHsibWVzc2FnZSIgOiBtZXNzYWdlLCAicHJvZHVjdCI6IHByb2R1Y3R9KQorICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQorCisgICAgcmV0dXJuIHJlc3VsdHMKKworZGVmIGRlbGV0ZVByb2R1Y3QocHJvZHVjdElkLCB0b2tlbik6CisgICAgaWYgaXNBZG1pbih0b2tlbikgaXMgRmFsc2U6CisgICAgICAgIHJldHVybgorCisgICAgcmVzdWx0cyA9IGxpc3QoKQorCisgICAgY29ubiA9IGdldENvbm5lY3Rpb24oKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgcHJvZHVjdF9pZCwgcHJvZHVjdF9uYW1lLCBkZXNjcmlwdGlvbiwgcHJpY2UsIHBpY3R1cmUgRlJPTSBwcm9kdWN0IFdIRVJFIHByb2R1Y3RfaWQgPSAlcyIsIChwcm9kdWN0SWQpKQorICAgIHByb2R1Y3QgPSBjdXJzb3IuZmV0Y2hvbmUoKQorCisgICAgaWYgcHJvZHVjdCBpcyBub3QgTm9uZToKKyAgICAgICAgY3Vyc29yLmV4ZWN1dGUoIkRFTEVURSBGUk9NIHByb2R1Y3QgV0hFUkUgcHJvZHVjdF9pZCA9ICVzIiwgKHByb2R1Y3RJZCkpCisgICAgICAgIGNvbm4uY29tbWl0KCkKKyAgICAgICAgY3Vyc29yLmNsb3NlKCkKKyAgICAgICAgbWVzc2FnZSA9ICJQcm9kdWN0IGhhcyBiZWVuIGRlbGV0ZWQhIgorICAgIGVsc2U6CisgICAgICAgIG1lc3NhZ2UgPSAiUHJvZHVjdCBub3QgZm91bmQhIgorCisgICAgcmVzdWx0cy5hcHBlbmQoeyJtZXNzYWdlIiA6IG1lc3NhZ2V9KQorCisgICAgY29ubi5jb21taXQoKQorICAgIGN1cnNvci5jbG9zZSgpCisgICAgY29ubi5jbG9zZSgpCisKKyAgICByZXR1cm4gcmVzdWx0cworCitkZWYgaXNBZG1pbih0b2tlbik6CisKKyAgICBpZiB0b2tlbjoKKyAgICAgICAgZGVjb2RlZCA9IGp3dC5kZWNvZGUodG9rZW4sICdsdUJFSyhQJHhbJVplUTRIQUQ1SmkxWio7MEdjejU4M3lQIXZ8S0NtTkVERG1RRi85UCk+R3BKSz5DeH0zO1InLCBhbGdvcml0aG09J0hTMjU2JykKKworICAgIGlmIGRlY29kZWRbImlzX2FkbWluIl0gPT0gMToKKyAgICAgICAgcmV0dXJuIFRydWUKKworICAgIHJldHVybiBGYWxzZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNyBAQAorZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHVybHBhcnNlCisKK2RlZiB2YWxpZGF0ZVVSTChocmVmKToKKyAgICByZXN1bHQgPSB1cmxwYXJzZShocmVmKQorICAgIGlmIHJlc3VsdC5zY2hlbWUgaW4gKCdodHRwJywgJ2h0dHBzJyk6CisgICAgICAgIHJldHVybiBocmVmCisgICAgcmV0dXJuICIi
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC02Miw0ICs2Miw0IEBACiAgICAgaWYgZGVjb2RlZFsiaXNfYWRtaW4iXSA9PSAxOgogICAgICAgICByZXR1cm4gVHJ1ZQogCi0gICAgcmV0dXJuIEZhbHNlKyAgICByZXR1cm4gRmFsc2UK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMjMgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworZGVmIGdldF9vcmRlcnModXNlcmlkLCBhcGlrZXkpOgorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nRWNvbW1lcmNlQXBwJykKKyAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCB1c2VyaWQsYXBpa2V5IEZST00gdXNlcnMgV0hFUkUgdXNlcmlkPSAlcyBBTkQgYXBpa2V5PSAlcyBMSU1JVCAxOyIsICh1c2VyaWQsYXBpa2V5KSkKKyAgICB1c2VyID0gY3Vyc29yLmZldGNob25lKCkKKworICAgIGRhdGEgPSBbXQorICAgIGlmIHVzZXIgaXMgbm90IE5vbmU6CisgICAgICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQorICAgICAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIG9yZGVybmFtZSxvcmRlcmlkLHVzZXJpZCwgdG90YWwgRlJPTSBvcmRlcnMgV0hFUkUgdXNlcmlkPSAlczsgICAgIiwgKHVzZXJpZCkpCisgICAgICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQorCisgICAgICAgIGNvbm4uY29tbWl0KCkKKyAgICAgICAgY3Vyc29yLmNsb3NlKCkKKworICAgIGNvbm4uY2xvc2UoKQorICAgIHJlc3VsdHMgPSBsaXN0KCkKKyAgICByZXN1bHRzLmFwcGVuZCh7InJlc3VsdHMiOiBkYXRhfSkKKworICAgIHJldHVybiByZXN1bHRz
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNDEgQEAKK2ltcG9ydCBvcworaW1wb3J0IHB5bXlzcWwKKworZGVmIGdldERCQ29ubmVjdGlvbigpOgorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nU29jaWFsTWVkaWFBcHAnKQorICAgIHJldHVybiBjb25uCisKK2RlZiBhZGRVc2VyKGZvcm1fZWxlbWVudHMpOgorICAgIG1lc3NhZ2UgPSAiIgorICAgIHJlc3VsdHMgPSBsaXN0KCkKKworICAgIGNvbm4gPSBnZXREQkNvbm5lY3Rpb24oKQorICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKKyAgICBzcWwgPSAiSU5TRVJUIElOVE8gdXNlcnMgKHVzZXJuYW1lLCBwYXNzd29yZCwgZmlyc3RfbmFtZSwgbGFzdF9uYW1lLCBlbWFpbCkgVkFMVUVTICglcywgJXMsICVzLCAlcywgJXMpOyIKKyAgICBjdXJzb3IuZXhlY3V0ZShzcWwsIChmb3JtX2VsZW1lbnRzWyJ1c2VybmFtZSJdLAorICAgICAgICBmb3JtX2VsZW1lbnRzWyJwYXNzd29yZCJdLAorICAgICAgICBmb3JtX2VsZW1lbnRzWyJmaXJzdF9uYW1lIl0sCisgICAgICAgIGZvcm1fZWxlbWVudHNbImxhc3RfbmFtZSJdLAorICAgICAgICBmb3JtX2VsZW1lbnRzWyJlbWFpbCJdKSkKKworICAgIGxhc3RJZCA9IGN1cnNvci5sYXN0cm93aWQKKyAgICBjb25uLmNvbW1pdCgpCisgICAgY3Vyc29yLmNsb3NlKCkKKworICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKHB5bXlzcWwuY3Vyc29ycy5EaWN0Q3Vyc29yKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgdXNlcmlkLCBlbWFpbF92ZXJpZmllZCBGUk9NIHVzZXJzIFdIRVJFIHVzZXJpZCA9ICVzIiwgKGxhc3RJZCkpCisgICAgdXNlciA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBpZiB1c2VyIGlzIE5vbmU6CisgICAgICAgIHJlc3VsdHMuYXBwZW5kKHsiZXJyb3IiOiBUcnVlLCAibWVzc2FnZSI6ICJFcnJvciBvY2N1cmVkISJ9KQorICAgIGVsc2U6CisgICAgICAgIG1lc3NhZ2UgPSAiUmVnaXN0cmF0aW9uIGNvbXBsZXRlLiIKKyAgICAgICAgaWYgdXNlclsnZW1haWxfdmVyaWZpZWQnXSA9PSAwOgorICAgICAgICAgICAgbWVzc2FnZSArPSAiIFBsZWFzZSB2ZXJpZnkgeW91ciBlbWFpbC4iCisgICAgICAgIHJlc3VsdHMuYXBwZW5kKHsiZXJyb3IiOiBGYWxzZSwgIm1lc3NhZ2UiOiBtZXNzYWdlLCAidXNlcl9pZCI6IHVzZXJbJ3VzZXJpZCddLCAiZW1haWxfdmVyaWZpZWQiOiB1c2VyWydlbWFpbF92ZXJpZmllZCddfSkKKworICAgIGNvbm4uY29tbWl0KCkKKyAgICBjdXJzb3IuY2xvc2UoKQorICAgIGNvbm4uY2xvc2UoKQorCisgICAgcmV0dXJuIHJlc3VsdHM=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yOCw0ICsyOCw0IEBACiAgICAgCiAgICAgcmV0dXJuIHJlc3VsdHMKICAgZW5kCi1lbmQKK2VuZA==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDUgKzEsNCBAQAogaW1wb3J0IGh0bWwKIAotZGVmIGVuY29kZV9mb3JfaHRtbChlcnJvcl9tZXNzYWdlKToKLSAgICBjbGVhbl92YXIgPSBodG1sLmVzY2FwZShlcnJvcl9tZXNzYWdlKSAKLSAgICByZXR1cm4gY2xlYW5fdmFyCitkZWYgZW5jb2RlX2Zvcl9odG1sKGVycm9yX21lc3NhZ2UpOiAgICAKKyAgICByZXR1cm4gaHRtbC5lc2NhcGUoZXJyb3JfbWVzc2FnZSk=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDUgKzEsNyBAQAogZnJvbSB1cmxsaWIucGFyc2UgaW1wb3J0IHVybHBhcnNlCiAKLWRlZiB2YWxpZGF0ZVVSTChocmVmKTogICAgCi0gICAgdXJsID0gdXJscGFyc2UoaHJlZikKLSAgICByZXR1cm4gdXJsLnNjaGVtZQorZGVmIHZhbGlkYXRlVVJMKGhyZWYpOgorICAgIHJlc3VsdCA9IHVybHBhcnNlKGhyZWYpCisgICAgaWYgcmVzdWx0LnNjaGVtZSBpbiAoJ2h0dHAnLCAnaHR0cHMnKToKKyAgICAgICAgcmV0dXJuIGhyZWYKKyAgICByZXR1cm4gIiI=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDEyICsyLDEyIEBACiBpbXBvcnQgcHlteXNxbAogCiBkZWYgYWRkX3Bvc3QocG9zdCwgdXNlcm5hbWUpOgotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iU29jaWFsTWVkaWFBcHAiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nU29jaWFsTWVkaWFBcHAnKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAotICAgIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHBvc3RzIFZBTFVFUyAoJyIgKyBwb3N0ICsgIicsJyIgKyB1c2VybmFtZSArIicpOyIKLSAgICBjdXJzb3IuZXhlY3V0ZSgiSU5TRVJUIElOVE8gcG9zdHMgVkFMVUVTICglcywlcykiLCAocG9zdCwgdXNlcm5hbWUpKQorICAgIHN0YXRlbWVudCA9ICJJTlNFUlQgSU5UTyBwb3N0cyBWQUxVRVMgKCVzLCVzKTsiCiAKKyAgICBjdXJzb3IuZXhlY3V0ZShzdGF0ZW1lbnQsIChwb3N0LCB1c2VybmFtZSkpCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0zLDExICszLDEyIEBACiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJteXNxbCIsIHBvcnQ9MzMwNiwKLSAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI9InJvb3QiLCBwYXNzd2Q9IjEiLCBkYj0ib3dhc3AxMHNxbGkiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nbXlzcWwnLCBwb3J0PTMzMDYsCisgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyPSdyb290JywgcGFzc3dkPScxJywgZGI9J293YXNwMTBzcWxpJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUIHVzZXJfaWQgRlJPTSB1c2VycyBXSEVSRSB1c2VyX25hbWUgPSAlcyBBTkQgcGFzc3dvcmQgPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgKKyAgICAgICAgIlNFTEVDVCB1c2VyX2lkIEZST00gdXNlcnMgV0hFUkUgdXNlcl9uYW1lID0gJXMgQU5EIHBhc3N3b3JkID0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCkBAIC0yNSwxMyArMjYsMTMgQEAKIAogCiBkZWYgZ2V0X3Byb2plY3RzKGlkUHJvamVjdCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJteXNxbCIsIHBvcnQ9MzMwNiwKLSAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXI9InJvb3QiLCBwYXNzd2Q9IjEiLCBkYj0ib3dhc3AxMHNxbGkiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nbXlzcWwnLCBwb3J0PTMzMDYsCisgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VyPSdyb290JywgcGFzc3dkPScxJywgZGI9J293YXNwMTBzcWxpJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBzdGF0ZW1lbnQgPSAiU0VMRUNUICogRlJPTSBwcm9qZWN0cyBXSEVSRSBwcm9qZWN0X2lkID0gIiArIGlkUHJvamVjdCArICI7IgorICAgIHN0YXRlbWVudCA9ICJTRUxFQ1QgKiBGUk9NIHByb2plY3RzIFdIRVJFIHByb2plY3RfaWQgPSAlczsiCiAKLSAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSBwcm9qZWN0cyBXSEVSRSBwcm9qZWN0X2lkID0gJXM7IiwgKGlkUHJvamVjdCkpCisgICAgY3Vyc29yLmV4ZWN1dGUoc3RhdGVtZW50LCAoaWRQcm9qZWN0KSkKICAgICByZXNwb25zZSA9IGN1cnNvci5mZXRjaGFsbCgpCiAgICAgZGF0YSA9IFtdCiAgICAgZm9yIHJvdyBpbiByZXNwb25zZToK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDEzICsyLDEyIEBACiBpbXBvcnQgcHlteXNxbAogCiBkZWYgYWRkX3Bvc3QocG9zdCwgdXNlcm5hbWUpOgotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iU29jaWFsTWVkaWFBcHAiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nU29jaWFsTWVkaWFBcHAnKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAotICAgIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHBvc3RzIFZBTFVFUyAoJyIgKyBwb3N0ICsgIicsJyIgKyB1c2VybmFtZSArIicpOyIKLSAgICBjdXJzb3IuZXhlY3V0ZSgiSU5TRVJUIElOVE8gcG9zdHMgVkFMVUVTICglcywlcykiLCAocG9zdCwgdXNlcm5hbWUpKQotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5KQorICAgIHN0YXRlbWVudCA9ICJJTlNFUlQgSU5UTyBwb3N0cyBWQUxVRVMgKCVzLCVzKTsiCiAKKyAgICBjdXJzb3IuZXhlY3V0ZShzdGF0ZW1lbnQsIChwb3N0LCB1c2VybmFtZSkpCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC00LDEyICs0LDE0IEBACiAKIAogZGVmIHJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCk6Ci0gICAgc2FsdCA9IHNlY3JldHMudG9rZW5faGV4KDMyKQotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iSXNzdWVUcmFja2VyIikKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J0lzc3VlVHJhY2tlcicpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMpIgotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsIHBhc3N3b3JkK3NhbHQsIGNvbXBhbnlfaWQpKQorICAgIHNhbHQgPSBzZWNyZXRzLnRva2VuX2hleCgzMikKKyAgICBkaWdlc3QgPSBoYXNobGliLnNoYTI1NigocGFzc3dvcmQgKyBzYWx0KS5lbmNvZGUoJ2FzY2lpJykpLmhleGRpZ2VzdCgpCisKKyAgICBxdWVyeSA9ICJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIHNhbHQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoJXMsICVzLCAlcywgJXMpIgorICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsIGRpZ2VzdCwgc2FsdCwgY29tcGFueV9pZCkpCiAgICAgCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCkBAIC0xOCwxNyArMjAsMTkgQEAKICAgICByZXR1cm4gVHJ1ZQogCiBkZWYgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKToKLSAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9ImRiIiwgcG9ydD0zMzA2LCB1c2VyPSJyb290IiwgcGFzc3dkPSJsZXRtZWluIiwgZGI9Iklzc3VlVHJhY2tlciIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdJc3N1ZVRyYWNrZXInKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKIAotICAgIHF1ZXJ5ID0gIlNFTEVDVCBwYXNzd29yZCBGUk9NIHVzZXIgV0hFUkUgdXNlcm5hbWUgPSAlcyIKKyAgICBxdWVyeSA9ICJTRUxFQ1QgcGFzc3dvcmQsIHNhbHQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJXMiCiAgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwpKQogICAgIHJlc3VsdCA9IGN1cnNvci5mZXRjaG9uZSgpCisKKyAgICBpZiByZXN1bHQgaXMgTm9uZToKKyAgICAgICAgcmV0dXJuIEZhbHNlCisgICAgCisgICAgZGlnZXN0ID0gaGFzaGxpYi5zaGEyNTYoKHBhc3N3b3JkICsgcmVzdWx0WzFdKS5lbmNvZGUoJ2FzY2lpJykpLmhleGRpZ2VzdCgpCiAKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgcmVzdWx0IGlzIE5vbmU6Ci0gICAgICAgIHJldHVybiBGYWxzZQotCi0gICAgcmV0dXJuIHJlc3VsdFswXSA9PSBwYXNzd29yZAorICAgIHJldHVybiByZXN1bHRbMF0gPT0gZGlnZXN0Cg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC00LDE3ICs0LDE0IEBACiAKIAogZGVmIHJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCk6Ci0gICAgc2FsdCA9IHNlY3JldHMudG9rZW5faGV4KDMyKQotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iSXNzdWVUcmFja2VyIikKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J0lzc3VlVHJhY2tlcicpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcGFzc3dvcmQgPSBwYXNzd29yZCtzYWx0CisgICAgc2FsdCA9IHNlY3JldHMudG9rZW5faGV4KDMyKQorICAgIGRpZ2VzdCA9IGhhc2hsaWIuc2hhMjU2KChwYXNzd29yZCArIHNhbHQpLmVuY29kZSgnYXNjaWknKSkuaGV4ZGlnZXN0KCkKIAotICAgIGhhc2ggPSBoYXNobGliLnNoYTI1NihwYXNzd29yZC5lbmNvZGUoJ2FzY2lpJykpCi0gICAgaGV4X2RpZ2VzdCA9IGhhc2guaGV4ZGlnZXN0KCkKLQotICAgIHF1ZXJ5ID0gIklOU0VSVCBJTlRPIHVzZXIgKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCwgc2FsdCkgVkFMVUVTICglcywgJXMsICVzLCAlcykiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwgaGV4X2RpZ2VzdCwgY29tcGFueV9pZCwgc2FsdCkpCisgICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBzYWx0LCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMsICVzKSIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCBkaWdlc3QsIHNhbHQsIGNvbXBhbnlfaWQpKQogICAgIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQpAQCAtMjMsMjIgKzIwLDE5IEBACiAgICAgcmV0dXJuIFRydWUKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJJc3N1ZVRyYWNrZXIiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nSXNzdWVUcmFja2VyJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKICAgICBxdWVyeSA9ICJTRUxFQ1QgcGFzc3dvcmQsIHNhbHQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJXMiCiAgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwpKQogICAgIHJlc3VsdCA9IGN1cnNvci5mZXRjaG9uZSgpCiAKLSAgICBwYXNzd29yZCA9IHBhc3N3b3JkK3Jlc3VsdFsxXQotCi0gICAgaGFzaCA9IGhhc2hsaWIuc2hhMjU2KHBhc3N3b3JkLmVuY29kZSgnYXNjaWknKSkKLSAgICBoZXhfZGlnZXN0ID0gaGFzaC5oZXhkaWdlc3QoKQorICAgIGlmIHJlc3VsdCBpcyBOb25lOgorICAgICAgICByZXR1cm4gRmFsc2UKKyAgICAKKyAgICBkaWdlc3QgPSBoYXNobGliLnNoYTI1NigocGFzc3dvcmQgKyByZXN1bHRbMV0pLmVuY29kZSgnYXNjaWknKSkuaGV4ZGlnZXN0KCkKIAogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiByZXN1bHQgaXMgTm9uZToKLSAgICAgICAgcmV0dXJuIEZhbHNlCi0KLSAgICByZXR1cm4gcmVzdWx0WzBdID09IGhleF9kaWdlc3QKKyAgICByZXR1cm4gcmVzdWx0WzBdID09IGRpZ2VzdAo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC00LDEyICs0LDE0IEBACiAKIAogZGVmIHJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCk6Ci0gICAgc2FsdCA9IHNlY3JldHMudG9rZW5faGV4KDMyKQotICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0iZGIiLCBwb3J0PTMzMDYsIHVzZXI9InJvb3QiLCBwYXNzd2Q9ImxldG1laW4iLCBkYj0iSXNzdWVUcmFja2VyIikKKyAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9J2RiJywgcG9ydD0zMzA2LCB1c2VyPSdyb290JywgcGFzc3dkPSdsZXRtZWluJywgZGI9J0lzc3VlVHJhY2tlcicpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMpIgotICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsIHBhc3N3b3JkLCBjb21wYW55X2lkKSkKKyAgICBzYWx0ID0gc2VjcmV0cy50b2tlbl9oZXgoMzIpCisgICAgZGlnZXN0ID0gaGFzaGxpYi5zaGEyNTYoKHBhc3N3b3JkICsgc2FsdCkuZW5jb2RlKCdhc2NpaScpKS5oZXhkaWdlc3QoKQorCisgICAgcXVlcnkgPSAiSU5TRVJUIElOVE8gdXNlciAodXNlcm5hbWUsIHBhc3N3b3JkLCBzYWx0LCBjb21wYW55X2lkKSBWQUxVRVMgKCVzLCAlcywgJXMsICVzKSIKKyAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCBkaWdlc3QsIHNhbHQsIGNvbXBhbnlfaWQpKQogICAgIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQpAQCAtMTgsMTcgKzIwLDE5IEBACiAgICAgcmV0dXJuIFRydWUKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJJc3N1ZVRyYWNrZXIiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nSXNzdWVUcmFja2VyJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBxdWVyeSA9ICJTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJXMiCisgICAgcXVlcnkgPSAiU0VMRUNUIHBhc3N3b3JkLCBzYWx0IEZST00gdXNlciBXSEVSRSB1c2VybmFtZSA9ICVzIgogICAgIGN1cnNvci5leGVjdXRlKHF1ZXJ5LCAodXNlcm5hbWUsKSkKICAgICByZXN1bHQgPSBjdXJzb3IuZmV0Y2hvbmUoKQorCisgICAgaWYgcmVzdWx0IGlzIE5vbmU6CisgICAgICAgIHJldHVybiBGYWxzZQorICAgIAorICAgIGRpZ2VzdCA9IGhhc2hsaWIuc2hhMjU2KChwYXNzd29yZCArIHJlc3VsdFsxXSkuZW5jb2RlKCdhc2NpaScpKS5oZXhkaWdlc3QoKQogCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIHJlc3VsdCBpcyBOb25lOgotICAgICAgICByZXR1cm4gRmFsc2UKLQotICAgIHJldHVybiByZXN1bHRbMF0gPT0gcGFzc3dvcmQKKyAgICByZXR1cm4gcmVzdWx0WzBdID09IGRpZ2VzdAo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNyBAQAorbW9kdWxlIFNhbmRib3gKKworICBkZWYgc2VsZi5jcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpCisgICAgRmlsZS5vcGVuKCd0bXAvJyArIHVzZXJuYW1lICsgJy8nICsgZmlsZW5hbWUsICJ3IikKKyAgZW5kCisKK2VuZAo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDUgKzEsNSBAQAogaW1wb3J0IG9zLCBzdWJwcm9jZXNzCiAKIGRlZiBjcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpOgotICAgIGZpbGUgPSBvcGVuKCJ0b3VjaCB0bXAvIiArIHVzZXJuYW1lICsgIi8iICsgZmlsZW5hbWUsICJ3IikKKyAgICBmaWxlID0gb3BlbigidG1wLyIgKyB1c2VybmFtZSArICIvIiArIGZpbGVuYW1lLCAidyIpCiAgICAgZmlsZS5jbG9zZSgpCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDcgKzEsNyBAQAogbW9kdWxlIFNhbmRib3gKIAogICBkZWYgc2VsZi5jcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpCi0gICAgRmlsZS5vcGVuKCd0b3VjaCB0bXAvJyArIHVzZXJuYW1lICsgJy8nICsgZmlsZW5hbWUsICJ3IikKKyAgICBGaWxlLm9wZW4oJ3RtcC8nICsgdXNlcm5hbWUgKyAnLycgKyBmaWxlbmFtZSwgInciKQogICBlbmQKIAogZW5kCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQgPSAlcyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKICAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgbm90IGRhdGE6CisgICAgaWYgbGVuKGRhdGEpIGlzIDA6CiAgICAgICAgIHJldHVybiBGYWxzZQotCiAgICAgcmV0dXJuIFRydWUK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcmFtZSA9ICVzIEFORCBwYXNzd29yZCA9ICVzIiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiBub3QgZGF0YToKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0KICAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDcgKzEsNyBAQAogbW9kdWxlIFNhbmRib3gKIAogICBkZWYgc2VsZi5jcmVhdGVfZmlsZSh1c2VybmFtZSwgZmlsZW5hbWUpCi0gICAgRmlsZS5vcGVuKCd0bXAvJyArIHVzZXJuYW1lICsgJy8nICsgZmlsZW5hbWUpCisgICAgRmlsZS5vcGVuKCd0bXAvJyArIHVzZXJuYW1lICsgJy8nICsgZmlsZW5hbWUsICJ3IikKICAgZW5kCiAKIGVuZAo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDI1ICsyLDE5IEBACiAKIAogZGVmIGFjY291bnRfbG9va3VwKHNlc3Npb24pOgorICAgIGlmIG5vdCBhdXRob3JpemUoc2Vzc2lvbik6CisgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigiQWNjZXNzIERlbmllZCIpCiAgICAgdXNlcl9pZCA9IHNlc3Npb25bInVzZXJfaWQiXQotICAgIGlmICFhdXRob3JpemUodXNlcl9pZCk6Ci0gICAgICAgIHJhaXNlIEV4Y2VwdGlvbigiQWNjZXNzIERlbmllZCIpCiAgICAgcmV0dXJuIGdldF9hY2NvdW50KHVzZXJfaWQpCiAKIAotIyAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSMgCi0jICBEb24ndCB0b3VjaCBhbnl0aGluZyBiZWxvdyB0aGlzIGxpbmUKLSMgIFV0aWxpdHkgZnVuY3Rpb25zIGJlbG93Ci0jIAotIyAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLQorIyBVdGlsaXR5IGZ1bmN0aW9ucyBiZWxvdywgbm8gbmVlZCB0byBtb2RpZnkKIGRiID0gcHlteXNxbC5jb25uZWN0KAotICAgIGhvc3Q9Im15c3FsIiwKKyAgICBob3N0PSdteXNxbCcsCiAgICAgcG9ydD0zMzA2LAotICAgIHVzZXI9InJvb3QiLAotICAgIHBhc3N3ZD0ibGV0bWVpbiIsCi0gICAgZGI9IkJhbmtBcHAiCisgICAgdXNlcj0ncm9vdCcsCisgICAgcGFzc3dkPSdsZXRtZWluJywKKyAgICBkYj0nQmFua0FwcCcKICkKIAogCkBAIC0zNyw5ICszMSw5IEBACiAgICAgICAgIHJldHVybiBGYWxzZQogCiAgICAgcmV0dXJuIHsKLSAgICAgICAgImJhbGFuY2UiOiBkYXRhWzBdLAotICAgICAgICAiZG9iIjogZGF0YVsxXSwKLSAgICAgICAgInVzZXJuYW1lIjogZ2V0X3VzZXIodXNlcl9pZClbMF0KKyAgICAgICAgJ2JhbGFuY2UnOiBkYXRhWzBdLAorICAgICAgICAnZG9iJzogZGF0YVsxXSwKKyAgICAgICAgJ3VzZXJuYW1lJzogZ2V0X3VzZXIodXNlcl9pZClbMF0KICAgICB9CiAKIApAQCAtODgsOCArODIsOCBAQAogICAgIHVzZXJfaWQgPSBzZXNzaW9uWyJ1c2VyX2lkIl0KICAgICBkZWNvZGVkX2p3dCA9IHNlc3Npb25bImRlY29kZWRfand0Il0KIAotICAgIHVzZXJuYW1lID0gZGVjb2RlZF9qd3RbInVzZXJuYW1lIl0KLSAgICByb2xlID0gZGVjb2RlZF9qd3RbInJvbGUiXQorICAgIHVzZXJuYW1lID0gZGVjb2RlZF9qd3RbJ3VzZXJuYW1lJ10KKyAgICByb2xlID0gZGVjb2RlZF9qd3RbJ3JvbGUnXQogCiAgICAgY3VycmVudF91c2Vyc19pZCA9IGdldF91c2VyX2lkKHVzZXJuYW1lKQogCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0yLDI1ICsyLDE5IEBACiAKIAogZGVmIGFjY291bnRfbG9va3VwKHNlc3Npb24pOgorICAgIGlmIG5vdCBhdXRob3JpemUoc2Vzc2lvbik6CisgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigiQWNjZXNzIERlbmllZCIpCiAgICAgdXNlcl9pZCA9IHNlc3Npb25bInVzZXJfaWQiXQotICAgIGlmICFhdXRob3JpemUodXNlcl9pZCkKLSAgICAgICAgcmFpc2UgRXhjZXB0aW9uKCJBY2Nlc3MgRGVuaWVkIikKICAgICByZXR1cm4gZ2V0X2FjY291bnQodXNlcl9pZCkKIAogCi0jICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotIyAKLSMgIERvbid0IHRvdWNoIGFueXRoaW5nIGJlbG93IHRoaXMgbGluZQotIyAgVXRpbGl0eSBmdW5jdGlvbnMgYmVsb3cKLSMgCi0jICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotCisjIFV0aWxpdHkgZnVuY3Rpb25zIGJlbG93LCBubyBuZWVkIHRvIG1vZGlmeQogZGIgPSBweW15c3FsLmNvbm5lY3QoCi0gICAgaG9zdD0ibXlzcWwiLAorICAgIGhvc3Q9J215c3FsJywKICAgICBwb3J0PTMzMDYsCi0gICAgdXNlcj0icm9vdCIsCi0gICAgcGFzc3dkPSJsZXRtZWluIiwKLSAgICBkYj0iQmFua0FwcCIKKyAgICB1c2VyPSdyb290JywKKyAgICBwYXNzd2Q9J2xldG1laW4nLAorICAgIGRiPSdCYW5rQXBwJwogKQogCiAKQEAgLTM3LDkgKzMxLDkgQEAKICAgICAgICAgcmV0dXJuIEZhbHNlCiAKICAgICByZXR1cm4gewotICAgICAgICAiYmFsYW5jZSI6IGRhdGFbMF0sCi0gICAgICAgICJkb2IiOiBkYXRhWzFdLAotICAgICAgICAidXNlcm5hbWUiOiBnZXRfdXNlcih1c2VyX2lkKVswXQorICAgICAgICAnYmFsYW5jZSc6IGRhdGFbMF0sCisgICAgICAgICdkb2InOiBkYXRhWzFdLAorICAgICAgICAndXNlcm5hbWUnOiBnZXRfdXNlcih1c2VyX2lkKVswXQogICAgIH0KIAogCkBAIC04OCw4ICs4Miw4IEBACiAgICAgdXNlcl9pZCA9IHNlc3Npb25bInVzZXJfaWQiXQogICAgIGRlY29kZWRfand0ID0gc2Vzc2lvblsiZGVjb2RlZF9qd3QiXQogCi0gICAgdXNlcm5hbWUgPSBkZWNvZGVkX2p3dFsidXNlcm5hbWUiXQotICAgIHJvbGUgPSBkZWNvZGVkX2p3dFsicm9sZSJdCisgICAgdXNlcm5hbWUgPSBkZWNvZGVkX2p3dFsndXNlcm5hbWUnXQorICAgIHJvbGUgPSBkZWNvZGVkX2p3dFsncm9sZSddCiAKICAgICBjdXJyZW50X3VzZXJzX2lkID0gZ2V0X3VzZXJfaWQodXNlcm5hbWUpCiAK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0zLDE0ICszLDExIEBACiAKIAogZGVmIHJlZ2lzdGVyKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJJc3N1ZVRyYWNrZXIiKQorICAgIGNvbm4gPSBweW15c3FsLmNvbm5lY3QoaG9zdD0nZGInLCBwb3J0PTMzMDYsIHVzZXI9J3Jvb3QnLCBwYXNzd2Q9J2xldG1laW4nLCBkYj0nSXNzdWVUcmFja2VyJykKICAgICBjdXJzb3IgPSBjb25uLmN1cnNvcigpCiAKLSAgICBoYXNoID0gaGFzaGxpYi5zaGEyNTYocGFzc3dvcmQuZW5jb2RlKCdhc2NpaScpKQotICAgIGhleF9kaWdlc3QgPSBoYXNoLmhleGRpZ2VzdCgpCi0KICAgICBxdWVyeSA9ICJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoJXMsICVzLCAlcykiCi0gICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwgaGV4X2RpZ2VzdCwgY29tcGFueV9pZCkpCisgICAgY3Vyc29yLmV4ZWN1dGUocXVlcnksICh1c2VybmFtZSwgZ2V0X2hhc2hlZF9wYXNzd29yZChwYXNzd29yZCksIGNvbXBhbnlfaWQpKQogICAgIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQpAQCAtMTksMTEgKzE2LDggQEAKICAgICByZXR1cm4gVHJ1ZQogCiBkZWYgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKToKLSAgICBjb25uID0gcHlteXNxbC5jb25uZWN0KGhvc3Q9ImRiIiwgcG9ydD0zMzA2LCB1c2VyPSJyb290IiwgcGFzc3dkPSJsZXRtZWluIiwgZGI9Iklzc3VlVHJhY2tlciIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdJc3N1ZVRyYWNrZXInKQogICAgIGN1cnNvciA9IGNvbm4uY3Vyc29yKCkKLQotICAgIGhhc2ggPSBoYXNobGliLnNoYTI1NihwYXNzd29yZC5lbmNvZGUoJ2FzY2lpJykpCi0gICAgaGV4X2RpZ2VzdCA9IGhhc2guaGV4ZGlnZXN0KCkKIAogICAgIHF1ZXJ5ID0gIlNFTEVDVCBwYXNzd29yZCBGUk9NIHVzZXIgV0hFUkUgdXNlcm5hbWUgPSAlcyIKICAgICBjdXJzb3IuZXhlY3V0ZShxdWVyeSwgKHVzZXJuYW1lLCkpCkBAIC0zNSw0ICsyOSw5IEBACiAgICAgaWYgcmVzdWx0IGlzIE5vbmU6CiAgICAgICAgIHJldHVybiBGYWxzZQogCi0gICAgcmV0dXJuIHJlc3VsdFswXSA9PSBoZXhfZGlnZXN0CisgICAgcmV0dXJuIHJlc3VsdFswXSA9PSBnZXRfaGFzaGVkX3Bhc3N3b3JkKHBhc3N3b3JkKQorCitkZWYgZ2V0X2hhc2hlZF9wYXNzd29yZChwYXNzd29yZCk6CisgICAgaGFzaCA9IGhhc2hsaWIuc2hhMjU2KHBhc3N3b3JkLmVuY29kZSgnYXNjaWknKSkKKyAgICBoZXhfZGlnZXN0ID0gaGFzaC5oZXhkaWdlc3QoKQorICAgIHJldHVybiBoZXhfZGlnZXN0Cg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgcHMgPSBjbGllbnQucHJlcGFyZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8gQU5EIHBhc3N3b3JkID0gPyIpCi0gICAgZGF0YSA9IHBzLmV4ZWN1dGUodXNlcm5hbWUsIHBhc3N3b3JkKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgbm90IGRhdGE6CisgICAgaWYgbGVuKGRhdGEpIGlzIDA6CiAgICAgICAgIHJldHVybiBGYWxzZQotCiAgICAgcmV0dXJuIFRydWUK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQgPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKKyAgICBjdXJzb3IuZXhlY3V0ZSgiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ICVzIEFORCBwYXNzd29yZD0gJXM7IiwgKHVzZXJuYW1lLCBwYXNzd29yZCkpCiAgICAgZGF0YSA9IGN1cnNvci5mZXRjaGFsbCgpCiAKICAgICBjb25uLmNvbW1pdCgpCiAgICAgY3Vyc29yLmNsb3NlKCkKICAgICBjb25uLmNsb3NlKCkKIAotICAgIGlmIG5vdCBkYXRhOgorICAgIGlmIGxlbihkYXRhKSBpcyAwOgogICAgICAgICByZXR1cm4gRmFsc2UKLQogICAgIHJldHVybiBUcnVlCg==
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE5ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQogCi0gICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQgPSAlcyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQorICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gJXMgQU5EIHBhc3N3b3JkPSAlczsiLCAodXNlcm5hbWUsIHBhc3N3b3JkKSkKICAgICBkYXRhID0gY3Vyc29yLmZldGNoYWxsKCkKIAogICAgIGNvbm4uY29tbWl0KCkKICAgICBjdXJzb3IuY2xvc2UoKQogICAgIGNvbm4uY2xvc2UoKQogCi0gICAgaWYgbm90IGRhdGE6CisgICAgaWYgbGVuKGRhdGEpIGlzIDA6CiAgICAgICAgIHJldHVybiBGYWxzZQotCiAgICAgcmV0dXJuIFRydWUKLQo=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xLDE4ICsxLDE4IEBACitpbXBvcnQgb3MKIGltcG9ydCBweW15c3FsCiAKIAogZGVmIGxvZ2luKHVzZXJuYW1lLCBwYXNzd29yZCk6Ci0gICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSJkYiIsIHBvcnQ9MzMwNiwgdXNlcj0icm9vdCIsIHBhc3N3ZD0ibGV0bWVpbiIsIGRiPSJTb2NpYWxNZWRpYUFwcCIpCisgICAgY29ubiA9IHB5bXlzcWwuY29ubmVjdChob3N0PSdkYicsIHBvcnQ9MzMwNiwgdXNlcj0ncm9vdCcsIHBhc3N3ZD0nbGV0bWVpbicsIGRiPSdTb2NpYWxNZWRpYUFwcCcpCiAgICAgY3Vyc29yID0gY29ubi5jdXJzb3IoKQotICAgIAotICAgIGN1cnNvci5leGVjdXRlKCJTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJuYW1lID0gICVzIEFORCBwYXNzd29yZCA9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQorCisgICAgY3Vyc29yLmV4ZWN1dGUoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSAlcyBBTkQgcGFzc3dvcmQ9ICVzOyIsICh1c2VybmFtZSwgcGFzc3dvcmQpKQogICAgIGRhdGEgPSBjdXJzb3IuZmV0Y2hhbGwoKQogCiAgICAgY29ubi5jb21taXQoKQogICAgIGN1cnNvci5jbG9zZSgpCiAgICAgY29ubi5jbG9zZSgpCiAKLSAgICBpZiBub3QgZGF0YToKKyAgICBpZiBsZW4oZGF0YSkgaXMgMDoKICAgICAgICAgcmV0dXJuIEZhbHNlCi0KICAgICByZXR1cm4gVHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC05LDEwICs5LDEwIEBACiAgICAgICA6ZGF0YWJhc2UgPT4gJ1NvY2lhbE1lZGlhQXBwJwogICAgICkKIAotICAgIHJlc3VsdHMgPSBjbGllbnQucXVlcnkoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQ9JyIrIHBhc3N3b3JkICsgIic7IikKLSAgICBwdXRzICJ0aGlzIHNob3VsZCBmYWlsIgorICAgIHJzID0gY2xpZW50LnByZXBhcmUgIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSA/IEFORCBwYXNzd29yZCA9ID8gOyIKKyAgICByZXMgPSBycy5leGVjdXRlKHVzZXJuYW1lLCBwYXNzd29yZCwgOmFzID0+IDphcnJheSkKIAotICAgIGlmIHJlc3VsdHMuY291bnQgPT0gMAorICAgIGlmIHJlcy50b19hLmxlbmd0aCA9PSAwCiAgICAgICByZXR1cm4gZmFsc2UKICAgICBlbHNlCiAgICAgICByZXR1cm4gdHJ1ZQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC05LDEwICs5LDEwIEBACiAgICAgICA6ZGF0YWJhc2UgPT4gJ1NvY2lhbE1lZGlhQXBwJwogICAgICkKIAotICAgIHJlc3VsdHMgPSBjbGllbnQucXVlcnkoIlNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgdXNlcm5hbWUgPSciICsgdXNlcm5hbWUgKyAiJyBBTkQgcGFzc3dvcmQ9JyIrIHBhc3N3b3JkICsgIic7IikKLSAgICBwdXRzICJ0aGlzIHNob3VsZCBmYWlsdWgiCisgICAgcnMgPSBjbGllbnQucHJlcGFyZSAiU0VMRUNUICogRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8gQU5EIHBhc3N3b3JkID0gPyA7IgorICAgIHJlcyA9IHJzLmV4ZWN1dGUodXNlcm5hbWUsIHBhc3N3b3JkLCA6YXMgPT4gOmFycmF5KQogCi0gICAgaWYgcmVzdWx0cy5jb3VudCA9PSAwCisgICAgaWYgcmVzLnRvX2EubGVuZ3RoID09IDAKICAgICAgIHJldHVybiBmYWxzZQogICAgIGVsc2UKICAgICAgIHJldHVybiB0cnVlCg==
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNTMgQEAKK3BhY2thZ2UgZGVtbzsKKworaW1wb3J0IGNvbS5nb29nbGUuZ3Nvbi5Hc29uOworaW1wb3J0IGNvbS5nb29nbGUuZ3Nvbi5hbm5vdGF0aW9ucy5TZXJpYWxpemVkTmFtZTsKK2ltcG9ydCBvcmcuanNvbi5zaW1wbGUuSlNPTk9iamVjdDsKKworaW1wb3J0IHN0YXRpYyBkZW1vLkRiLio7CisKK3B1YmxpYyBjbGFzcyBFeHRlcm5hbCB7CisgICAgcHVibGljIHN0YXRpYyBTdHJpbmcgaGFuZGxlUG9zdChTdHJpbmcgcmVxdWVzdCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisgICAgICAgIEdzb24gZ3NvbiA9IG5ldyBHc29uKCk7CisKKyAgICAgICAgUmVzZXJ2YXRpb24gcmVzZXJ2YXRpb24gPSBnc29uLmZyb21Kc29uKHJlcXVlc3QsIFJlc2VydmF0aW9uLmNsYXNzKTsKKworICAgICAgICBSZXNlcnZhdGlvbiBmaWx0ZXJlZCA9IG5ldyBSZXNlcnZhdGlvbigpOworICAgICAgICBmaWx0ZXJlZC5lbWFpbCA9IHJlc2VydmF0aW9uLmVtYWlsOworICAgICAgICBmaWx0ZXJlZC5jaGVja2luID0gcmVzZXJ2YXRpb24uY2hlY2tpbjsKKyAgICAgICAgZmlsdGVyZWQuY2hlY2tvdXQgPSByZXNlcnZhdGlvbi5jaGVja291dDsKKworICAgICAgICBpbnQgaW5zZXJ0ZWRJZCA9IGluc2VydFJlc2VydmF0aW9uKGZpbHRlcmVkKTsKKyAgICAgICAgUmVzZXJ2YXRpb24gc2F2ZWQgPSBnZXRSZXNlcnZhdGlvbihpbnNlcnRlZElkKTsKKworICAgICAgICBKU09OT2JqZWN0IGZpbHRlcmVkU2F2ZWQgPSBuZXcgSlNPTk9iamVjdCgpOworICAgICAgICBmaWx0ZXJlZFNhdmVkLnB1dCgiY29uZmlybWF0aW9uIiwgc2F2ZWQuY29uZmlybWF0aW9uKTsKKworICAgICAgICByZXR1cm4gZmlsdGVyZWRTYXZlZC50b1N0cmluZygpOworICAgIH0KKworICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgUmVzZXJ2YXRpb24geworICAgICAgICBwdWJsaWMgaW50IGlkOworICAgICAgICBwdWJsaWMgU3RyaW5nIGVtYWlsOworICAgICAgICBwdWJsaWMgU3RyaW5nIGNoZWNraW47CisgICAgICAgIHB1YmxpYyBTdHJpbmcgY2hlY2tvdXQ7CisgICAgICAgIHB1YmxpYyBkb3VibGUgcmF0ZTsKKyAgICAgICAgcHVibGljIGRvdWJsZSB0b3RhbDsKKyAgICAgICAgcHVibGljIFN0cmluZyBjb25maXJtYXRpb247CisgICAgICAgIEBTZXJpYWxpemVkTmFtZSgicmVzZXJ2YXRpb25fc3RhdHVzIikKKyAgICAgICAgcHVibGljIFN0cmluZyByZXNlcnZhdGlvblN0YXR1czsKKworICAgICAgICBwdWJsaWMgUmVzZXJ2YXRpb24oKSB7fQorCisgICAgICAgIHB1YmxpYyBSZXNlcnZhdGlvbihpbnQgaWQsIFN0cmluZyBlbWFpbCwgU3RyaW5nIGNoZWNraW4sIFN0cmluZyBjaGVja291dCwgZG91YmxlIHJhdGUsIGRvdWJsZSB0b3RhbCwgU3RyaW5nIGNvbmZpcm1hdGlvbiwgU3RyaW5nIHJlc2VydmF0aW9uU3RhdHVzKSB7CisgICAgICAgICAgICB0aGlzLmlkID0gaWQ7CisgICAgICAgICAgICB0aGlzLmVtYWlsID0gZW1haWw7CisgICAgICAgICAgICB0aGlzLmNoZWNraW4gPSBjaGVja2luOworICAgICAgICAgICAgdGhpcy5jaGVja291dCA9IGNoZWNrb3V0OworICAgICAgICAgICAgdGhpcy5yYXRlID0gcmF0ZTsKKyAgICAgICAgICAgIHRoaXMudG90YWwgPSB0b3RhbDsKKyAgICAgICAgICAgIHRoaXMuY29uZmlybWF0aW9uID0gY29uZmlybWF0aW9uOworICAgICAgICAgICAgdGhpcy5yZXNlcnZhdGlvblN0YXR1cyA9IHJlc2VydmF0aW9uU3RhdHVzOworICAgICAgICB9CisgICAgfQorfQo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMzYgQEAKK2NvbnN0IG15c3FsID0gcmVxdWlyZSgnbXlzcWwyL3Byb21pc2UnKTsKKworZXhwb3J0cy5yZXNldCA9IGFzeW5jIGZ1bmN0aW9uIChib2R5KSB7CisgICAgY29uc3QgdXNlcm5hbWUgPSBib2R5LnVzZXJuYW1lOworICAgIGNvbnN0IHBhc3N3b3JkID0gYm9keS5wYXNzd29yZDsKKyAgICBjb25zdCBuZXdfcGFzc3dvcmQgPSBib2R5Lm5ld19wYXNzd29yZDsKKworICAgIGlmICghdXNlcm5hbWUgfHwgIXBhc3N3b3JkIHx8ICFuZXdfcGFzc3dvcmQpIHsKKyAgICAgICAgcmV0dXJuIDQwMDsKKyAgICB9CisKKyAgICBjb25zdCBjb25uID0gYXdhaXQgbXlzcWwuY3JlYXRlQ29ubmVjdGlvbih7CisgICAgICAgIGhvc3Q6ICdkYicsCisgICAgICAgIHVzZXI6ICdyb290JywKKyAgICAgICAgcG9ydDogMzMwNiwKKyAgICAgICAgcGFzc3dvcmQ6ICdsZXRtZWluJywKKyAgICAgICAgZGF0YWJhc2U6ICdCYW5rQXBwJywKKyAgICB9KTsKKworICAgIGxldCBxdWVyeSA9ICdTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VycyBXSEVSRSB1c2VybmFtZSA9ID8nOworICAgIGNvbnN0IFtwYXNzd29yZFJlc3VsdF0gPSBhd2FpdCBjb25uLnF1ZXJ5KHF1ZXJ5LCBbdXNlcm5hbWVdKTsKKyAgICBpZiAocGFzc3dvcmRSZXN1bHQubGVuZ3RoID09PSAwIHx8IHBhc3N3b3JkUmVzdWx0WzBdLnBhc3N3b3JkICE9PSBwYXNzd29yZCkgeworICAgICAgICBjb25uLmVuZCgpOworICAgICAgICByZXR1cm4gNDAxOworICAgIH0KKworICAgIHF1ZXJ5ID0gJ1VQREFURSB1c2VycyBTRVQgcGFzc3dvcmQgPSA/IFdIRVJFIHVzZXJuYW1lID0gPyc7CisgICAgY29uc3QgW3VwZGF0ZVJlc3VsdF0gPSBhd2FpdCBjb25uLnF1ZXJ5KHF1ZXJ5LCBbbmV3X3Bhc3N3b3JkLCB1c2VybmFtZV0pOworICAgIGNvbm4uZW5kKCk7CisKKyAgICBpZiAodXBkYXRlUmVzdWx0LmFmZmVjdGVkUm93cyA+IDApIHsKKyAgICAgICAgcmV0dXJuIDIwMDsKKyAgICB9IGVsc2UgeworICAgICAgICByZXR1cm4gNTAwOworICAgIH0KK30=
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xNCw4ICsxNCw4IEBACiAgICAgbXkgJGNvbXBhbnlfaWQgPSAkX1syXTsKICAgICAKICAgICBteSAkYnVmZmVyID0gbWFrZXJhbmRvbShTaXplID0+IDEyOCwgU3RyZW5ndGggPT4gMSk7Ci0gICAgbXkgJHNhbHQgPSBNYXRoOjpCaWdJbnQtPm5ldygiJGJ1ZmZlciIpLT50b19oZXgoKTsKLSAgICBteSAkaGFzaCA9IGFyZ29uMmlkX3Bhc3MoJHBhc3N3b3JkLCAiYWJjYWJjYWJjYWJjYWJjYSIsIDMsICc2NE0nLCA0LCAxNik7CisgICAgbXkgJHNhbHQgPSBNYXRoOjpCaWdJbnQtPnRvX2hleCgkYnVmZmVyKTsKKyAgICBteSAkaGFzaCA9IGFyZ29uMmlkX3Bhc3MoJHBhc3N3b3JkLCAkc2FsdCwgMywgJzY0TScsIDQsIDE2KTsKIAogICAgICRjb25uID0gREJJLT5jb25uZWN0KCJEQkk6bXlzcWw6ZGF0YWJhc2U9SXNzdWVUcmFja2VyO2hvc3Q9ZGIiLCAicm9vdCIsICJsZXRtZWluIiwgeydSYWlzZUVycm9yJyA9PiAxfSk7CiAgICAgbXkgJHN0aCA9ICRjb25uLT5wcmVwYXJlKCJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoPywgPywgPykiKTsK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsNTEgQEAKKyMhL3Vzci9iaW4vcGVybAorCitwYWNrYWdlIEV4dGVybmFsOworCit1c2Ugd2FybmluZ3M7Cit1c2UgREJJOwordXNlIENyeXB0OjpBcmdvbjIgcXcvYXJnb24yaWRfcGFzcyBhcmdvbjJpZF92ZXJpZnkvOwordXNlIENyeXB0OjpSYW5kb20gcXcobWFrZXJhbmRvbSk7IAordXNlIE1hdGg6OkJpZ0ludDsKKworc3ViIHJlZ2lzdGVyIHsKKyAgICBteSAkdXNlcm5hbWUgPSAkX1swXTsKKyAgICBteSAkcGFzc3dvcmQgPSAkX1sxXTsKKyAgICBteSAkY29tcGFueV9pZCA9ICRfWzJdOworICAgIAorICAgIG15ICRidWZmZXIgPSBtYWtlcmFuZG9tKFNpemUgPT4gMTI4LCBTdHJlbmd0aCA9PiAxKTsKKyAgICBteSAkc2FsdCA9IE1hdGg6OkJpZ0ludC0+dG9faGV4KCRidWZmZXIpOworICAgIG15ICRoYXNoID0gYXJnb24yaWRfcGFzcygkcGFzc3dvcmQsICRzYWx0LCAzLCAnNjRNJywgNCwgMTYpOworCisgICAgJGNvbm4gPSBEQkktPmNvbm5lY3QoIkRCSTpteXNxbDpkYXRhYmFzZT1Jc3N1ZVRyYWNrZXI7aG9zdD1kYiIsICJyb290IiwgImxldG1laW4iLCB7J1JhaXNlRXJyb3InID0+IDF9KTsKKyAgICBteSAkc3RoID0gJGNvbm4tPnByZXBhcmUoIklOU0VSVCBJTlRPIHVzZXIgKHVzZXJuYW1lLCBwYXNzd29yZCwgY29tcGFueV9pZCkgVkFMVUVTICg/LCA/LCA/KSIpOworICAgICRzdGgtPmV4ZWN1dGUoJHVzZXJuYW1lLCAkaGFzaCwgJGNvbXBhbnlfaWQpOworCisgICAgJHN0aC0+ZmluaXNoKCk7CisgICAgJGNvbm4tPmRpc2Nvbm5lY3QoKTsKKworICAgIHJldHVybiBcMTsKK30KKworc3ViIGxvZ2luIHsKKyAgICBteSAkdXNlcm5hbWUgPSAkX1swXTsKKyAgICBteSAkcGFzc3dvcmQgPSAkX1sxXTsKKworICAgICRjb25uID0gREJJLT5jb25uZWN0KCJEQkk6bXlzcWw6ZGF0YWJhc2U9SXNzdWVUcmFja2VyO2hvc3Q9ZGIiLCAicm9vdCIsICJsZXRtZWluIiwgeydSYWlzZUVycm9yJyA9PiAxfSk7CisgICAgbXkgJHN0aCA9ICRjb25uLT5wcmVwYXJlKCJTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gPyIpOworICAgICRzdGgtPmV4ZWN1dGUoJHVzZXJuYW1lKTsKKyAgICAkbnVtX3Jvd3MgPSAkc3RoLT5yb3dzOworCisgICAgaWYgKCRudW1fcm93cyA9PSAwKSB7CisgICAgICAgIHJldHVybiBcMDsKKyAgICB9CisKKyAgICBteSgkaGFzaCkgPSAkc3RoLT5mZXRjaHJvd19hcnJheSgpOworICAgICRzdGgtPmZpbmlzaCgpOworICAgICRjb25uLT5kaXNjb25uZWN0KCk7CisKKyAgICBteSAkbWF0Y2ggPSBhcmdvbjJpZF92ZXJpZnkoJGhhc2gsICRwYXNzd29yZCk7CisKKyAgICByZXR1cm4gJG1hdGNoOworfQorMTsK
True,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0xNCw3ICsxNCw3IEBACiAgICAgbXkgJGNvbXBhbnlfaWQgPSAkX1syXTsKICAgICAKICAgICBteSAkYnVmZmVyID0gbWFrZXJhbmRvbShTaXplID0+IDEyOCwgU3RyZW5ndGggPT4gMSk7Ci0gICAgbXkgJHNhbHQgPSBNYXRoOjpCaWdJbnQtPm5ldygiJGJ1ZmZlciIpLT50b19oZXgoKTsKKyAgICBteSAkc2FsdCA9IE1hdGg6OkJpZ0ludC0+dG9faGV4KCRidWZmZXIpOwogICAgIG15ICRoYXNoID0gYXJnb24yaWRfcGFzcygkcGFzc3dvcmQsICRzYWx0LCAzLCAnNjRNJywgNCwgMTYpOwogCiAgICAgJGNvbm4gPSBEQkktPmNvbm5lY3QoIkRCSTpteXNxbDpkYXRhYmFzZT1Jc3N1ZVRyYWNrZXI7aG9zdD1kYiIsICJyb290IiwgImxldG1laW4iLCB7J1JhaXNlRXJyb3InID0+IDF9KTsK
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC04LDE1ICs4LDE4IEBACiB1c2UgQ3J5cHQ6OlJhbmRvbSBxdyhtYWtlcmFuZG9tKTsgCiB1c2UgTWF0aDo6QmlnSW50OwogCi0KIHN1YiByZWdpc3RlciB7CiAgICAgbXkgJHVzZXJuYW1lID0gJF9bMF07CiAgICAgbXkgJHBhc3N3b3JkID0gJF9bMV07CiAgICAgbXkgJGNvbXBhbnlfaWQgPSAkX1syXTsKKyAgICAKKyAgICBteSAkYnVmZmVyID0gbWFrZXJhbmRvbShTaXplID0+IDEyOCwgU3RyZW5ndGggPT4gMSk7CisgICAgbXkgJHNhbHQgPSBNYXRoOjpCaWdJbnQtPnRvX2hleCgkYnVmZmVyKTsKKyAgICBteSAkaGFzaCA9IGFyZ29uMmlkX3Bhc3MoJHBhc3N3b3JkLCAkc2FsdCwgMywgJzY0TScsIDQsIDE2KTsKIAogICAgICRjb25uID0gREJJLT5jb25uZWN0KCJEQkk6bXlzcWw6ZGF0YWJhc2U9SXNzdWVUcmFja2VyO2hvc3Q9ZGIiLCAicm9vdCIsICJsZXRtZWluIiwgeydSYWlzZUVycm9yJyA9PiAxfSk7CiAgICAgbXkgJHN0aCA9ICRjb25uLT5wcmVwYXJlKCJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoPywgPywgPykiKTsKLSAgICAkc3RoLT5leGVjdXRlKCR1c2VybmFtZSwgJHBhc3N3b3JkLCAkY29tcGFueV9pZCk7CisgICAgJHN0aC0+ZXhlY3V0ZSgkdXNlcm5hbWUsICRoYXNoLCAkY29tcGFueV9pZCk7CiAKICAgICAkc3RoLT5maW5pc2goKTsKICAgICAkY29ubi0+ZGlzY29ubmVjdCgpOwpAQCAtMzcsMTAgKzQwLDEyIEBACiAgICAgICAgIHJldHVybiBcMDsKICAgICB9CiAKLSAgICBteSgkc3RvcmVkX3Bhc3N3b3JkKSA9ICRzdGgtPmZldGNocm93X2FycmF5KCk7CisgICAgbXkoJGhhc2gpID0gJHN0aC0+ZmV0Y2hyb3dfYXJyYXkoKTsKICAgICAkc3RoLT5maW5pc2goKTsKICAgICAkY29ubi0+ZGlzY29ubmVjdCgpOwogCi0gICAgcmV0dXJuICRzdG9yZWRfcGFzc3dvcmQgZXEgJHBhc3N3b3JkOworICAgIG15ICRtYXRjaCA9IGFyZ29uMmlkX3ZlcmlmeSgkaGFzaCwgJHBhc3N3b3JkKTsKKworICAgIHJldHVybiAkbWF0Y2g7CiB9CiAxOwo=
False,LS0tIHVzZXJfc3VibWlzc2lvbi50eHQKKysrIHBhdGNoX2ZpbGUudHh0CkBAIC0wLDAgKzEsMTE4IEBACisjaW5jbHVkZSA8c3RkaW8uaD4KKyNpbmNsdWRlIDxzdGRsaWIuaD4KKyNpbmNsdWRlIDxteXNxbC5oPgorI2luY2x1ZGUgPG9wZW5zc2wvcmFuZC5oPgorI2luY2x1ZGUgPG9wZW5zc2wvZXZwLmg+CisjaW5jbHVkZSA8YXJnb24yLmg+CisKKyNkZWZpbmUgU1RSU0laRSAgICAgICAgICAgMTAyNAorI2RlZmluZSBIQVNITEVOICAgICAgICAgICAgIDMyCisjZGVmaW5lIFNBTFRMRU4gICAgICAgICAgICAgMTIKKyNkZWZpbmUgdHJ1ZSAgICAgICAgICAgICAgICAgMQorCitjaGFyICphcmdvbl9oYXNoKGNvbnN0IGNoYXIgKnBhc3N3b3JkKTsKK3VpbnQ4X3QgKmNyZWF0ZV9zYWx0KCk7CisKK2ludCByZWdpc3RlclVzZXIoY29uc3QgY2hhciAqdXNlcm5hbWUsIGNvbnN0IGNoYXIgKnBhc3N3b3JkLCBjb25zdCBjaGFyICpjb21wYW55X2lkKQoreworICAgIE1ZU1FMICpjb25uID0gbXlzcWxfaW5pdChOVUxMKTsKKworICAgIGlmIChjb25uID09IE5VTEwpIHsKKyAgICAgICAgcHJpbnRmKCJteXNxbF9pbml0OiAlc1xuIiwgbXlzcWxfZXJyb3IoY29ubikpOworICAgICAgICBleGl0KDEpOworICAgIH0KKworICAgIGlmIChteXNxbF9yZWFsX2Nvbm5lY3QoY29ubiwgImRiIiwgInJvb3QiLCAibGV0bWVpbiIsICJJc3N1ZVRyYWNrZXIiLCAzMzA2LCBOVUxMLCAwKSA9PSBOVUxMKSB7CisgICAgICAgIHByaW50ZigiXG5FcnJvciAobXlzcWxfcmVhbF9jb25uZWN0KTogJXMgWyVkXVxuIiwgbXlzcWxfZXJyb3IoY29ubiksIG15c3FsX2Vycm5vKGNvbm4pKTsKKyAgICAgICAgZXhpdCgxKTsKKyAgICB9CisKKyAgICBjaGFyICpoYXNoZWRfcGFzc3dvcmQgPSBhcmdvbl9oYXNoKChjaGFyICopIHBhc3N3b3JkKTsKKworICAgIGNoYXIgKnF1ZXJ5ID0gbWFsbG9jKFNUUlNJWkUpOworICAgIHNwcmludGYocXVlcnksICJJTlNFUlQgSU5UTyB1c2VyICh1c2VybmFtZSwgcGFzc3dvcmQsIGNvbXBhbnlfaWQpIFZBTFVFUyAoJyVzJywgJyVzJywgJyVzJykiLCAKKyAgICAgICAgICAgICAgICAgICAgdXNlcm5hbWUsIGhhc2hlZF9wYXNzd29yZCwgY29tcGFueV9pZCk7CisgICAgaWYgKG15c3FsX3F1ZXJ5KGNvbm4sIHF1ZXJ5KSkgeworICAgICAgICBwcmludGYoIlxuRXJyb3IgKG15c3FsX3F1ZXJ5KTogJXMgWyVkXVxuIiwgbXlzcWxfZXJyb3IoY29ubiksIG15c3FsX2Vycm5vKGNvbm4pKTsKKyAgICAgICAgZXhpdCgxKTsKKyAgICB9CisgICAgZnJlZShxdWVyeSk7CisgICAgZnJlZShoYXNoZWRfcGFzc3dvcmQpOworCisgICAgTVlTUUxfUkVTICpyZXN1bHQgPSBteXNxbF9zdG9yZV9yZXN1bHQoY29ubik7CisKKyAgICBteXNxbF9mcmVlX3Jlc3VsdChyZXN1bHQpOworICAgIG15c3FsX2Nsb3NlKGNvbm4pOworCisgICAgcmV0dXJuIHRydWU7Cit9CisKK2ludCBsb2dpbihjb25zdCBjaGFyICp1c2VybmFtZSwgY29uc3QgY2hhciAqcGFzc3dvcmQpCit7CisgICAgTVlTUUwgKmNvbm4gPSBteXNxbF9pbml0KE5VTEwpOworCisgICAgaWYgKGNvbm4gPT0gTlVMTCkgeworICAgICAgICBwcmludGYoIm15c3FsX2luaXQ6ICVzXG4iLCBteXNxbF9lcnJvcihjb25uKSk7CisgICAgICAgIGV4aXQoMSk7CisgICAgfQorCisgICAgaWYgKG15c3FsX3JlYWxfY29ubmVjdChjb25uLCAiZGIiLCAicm9vdCIsICJsZXRtZWluIiwgIklzc3VlVHJhY2tlciIsIDMzMDYsIE5VTEwsIDApID09IE5VTEwpIHsKKyAgICAgICAgcHJpbnRmKCJcbkVycm9yIChteXNxbF9yZWFsX2Nvbm5lY3QpOiAlcyBbJWRdXG4iLCBteXNxbF9lcnJvcihjb25uKSwgbXlzcWxfZXJybm8oY29ubikpOworICAgICAgICBleGl0KDEpOworICAgIH0KKworICAgIGNoYXIgKnF1ZXJ5ID0gbWFsbG9jKFNUUlNJWkUpOworICAgIHNwcmludGYocXVlcnksICJTRUxFQ1QgcGFzc3dvcmQgRlJPTSB1c2VyIFdIRVJFIHVzZXJuYW1lID0gJyVzJyIsIHVzZXJuYW1lKTsKKyAgICAgICAgaWYgKG15c3FsX3F1ZXJ5KGNvbm4sIHF1ZXJ5KSkgeworICAgICAgICBwcmludGYoIlxuRXJyb3IgKG15c3FsX3F1ZXJ5KTogJXMgWyVkXVxuIiwgbXlzcWxfZXJyb3IoY29ubiksIG15c3FsX2Vycm5vKGNvbm4pKTsKKyAgICAgICAgZXhpdCgxKTsKKyAgICB9CisgICAgZnJlZShxdWVyeSk7CisKKyAgICBNWVNRTF9SRVMgKnJlc3VsdCA9IG15c3FsX3N0b3JlX3Jlc3VsdChjb25uKTsKKyAgICBNWVNRTF9ST1cgcm93OworCisgICAgcm93ID0gbXlzcWxfZmV0Y2hfcm93KHJlc3VsdCk7CisKKyAgICBteXNxbF9mcmVlX3Jlc3VsdChyZXN1bHQpOworICAgIG15c3FsX2Nsb3NlKGNvbm4pOworCisgICAgaW50IGFyZ29uX3ZlcmlmaWNhdGlvbiA9IGFyZ29uMmlkX3ZlcmlmeSgoY29uc3QgY2hhciAqKSByb3dbMF0sIChjaGFyICopIHBhc3N3b3JkLCBzdHJsZW4ocGFzc3dvcmQpKTsKKworICAgIHJldHVybiBhcmdvbl92ZXJpZmljYXRpb24gPT0gQVJHT04yX09LOworfQorCisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBIZWxwZXIgZnVuY3Rpb25zIGJlbG93IC0tIERvbid0IHRvdWNoIGFueXRoaW5nIHVuZGVyIHRoaXMgYm94LiAqCisgKiBJbXBsZW1lbnQgYXJnb25faGFzaCgpIGFib3ZlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK2NoYXIgKmFyZ29uX2hhc2goY29uc3QgY2hhciAqcGFzc3dvcmQpCit7CisgICAgdWludDhfdCAqc2FsdCA9IGNyZWF0ZV9zYWx0KCk7CisKKyAgICBjaGFyICplbmNvZGVkID0gY2FsbG9jKFNUUlNJWkUsIHNpemVvZihjaGFyKSk7CisgICAgdWludDhfdCAqcHdkID0gKHVpbnQ4X3QgKikgc3RyZHVwKHBhc3N3b3JkKTsKKyAgICB1aW50MzJfdCBwd2RsZW4gPSBzdHJsZW4oKGNoYXIgKikgcHdkKTsKKworICAgIHVpbnQzMl90IHRfY29zdCA9IDM7ICAgICAgICAgICAgCisgICAgdWludDMyX3QgbV9jb3N0ID0gKDE8PDE2KTsgICAgICAKKyAgICB1aW50MzJfdCBwYXJhbGxlbGlzbSA9IDQ7CisKKyAgICBhcmdvbjJpZF9oYXNoX2VuY29kZWQodF9jb3N0LCBtX2Nvc3QsIHBhcmFsbGVsaXNtLCBwd2QsIHB3ZGxlbiwgc2FsdCwgU0FMVExFTiwgSEFTSExFTiwgZW5jb2RlZCwgU1RSU0laRSAtIDEpOworICAgIGZyZWUocHdkKTsKKworICAgIHJldHVybiBlbmNvZGVkOworfQorCit1aW50OF90ICpjcmVhdGVfc2FsdCgpCit7CisgICAgdW5zaWduZWQgY2hhciByYW5kb21fYnl0ZXNbU0FMVExFTl07CisgICAgdWludDhfdCAqc2FsdCA9IGNhbGxvYyhTQUxUTEVOLCBzaXplb2YoY2hhcikpOworCisgICAgUkFORF9ieXRlcyhyYW5kb21fYnl0ZXMsIHNpemVvZihyYW5kb21fYnl0ZXMpKTsKKyAgICBFVlBfRW5jb2RlQmxvY2soKHVuc2lnbmVkIGNoYXIgKilzYWx0LCByYW5kb21fYnl0ZXMsIAorICAgICAgICBzaXplb2YocmFuZG9tX2J5dGVzKSk7CisKKyAgICByZXR1cm4gc2FsdDsKK30K